[{"authors":["david-xiao"],"categories":null,"content":"David Xiao is a senior cloud engineer at Toronto Stock Exchange.\n","date":1591920000,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1591920000,"objectID":"3cd11a3614f5641f8703d8da70c09029","permalink":"https://davidxiao.me/author/david-xiao/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/david-xiao/","section":"authors","summary":"David Xiao is a senior cloud engineer at Toronto Stock Exchange.","tags":null,"title":"David Xiao","type":"authors"},{"authors":["David Xiao"],"categories":["Coding"],"content":"Onboarding an existing project to GitHub If the project is not yet initialized by git, do the following first\ngit init ; # then create a .gitignore file if needed git add . ; git status -u ; # will show you all the files to be committed. git commit -m \u0026#34;init commit\u0026#34; ; Then connect it to GitHub\ngit remote add origin git@github.com:davxiao/my-proj.git ; git branch --set-upstream-to=origin/master master ; git pull origin master --allow-unrelated-histories ; git push ; ","date":1591920000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591920000,"objectID":"404329cd4368a7d9443a994170b0d483","permalink":"https://davidxiao.me/post/my-awesome-github-cheatsheet/","publishdate":"2020-06-12T00:00:00Z","relpermalink":"/post/my-awesome-github-cheatsheet/","section":"post","summary":"An awesome list of useful git slash github commands I compiled over time.","tags":["github","git","cheatsheet"],"title":"My Awesome GitHub CheatSheet","type":"post"},{"authors":["David Xiao"],"categories":["Site-Building"],"content":"If you own a personal site and like to make both your site and visitors secure, read this: Just because you\u0026rsquo;ve enabled HTTPS does not mean it\u0026rsquo;s sound and secure.\nTLS v1.0 and v1.1 are known to be vulnerable and should not be allowed on your site. It is a security best practice to make TLS v1.2 the minimum version allowed on your site.\nFor more detail, check out this post on Google Security Blog and this post on Google Chrome Browser Updates.\nGet a Test on your Site You can use SSLLabs to conduct a quick test on your site.\n  Initial test results   Click on any of the server will give you a brief explaination on the findings.\n  See explaination here   I\u0026rsquo;m using Cloudflare as CDN for api.davidxiao.me, so I went on to the Cloudflare portal and updated the \u0026ldquo;Minimum TLS Version\u0026rdquo; to \u0026ldquo;TLS 1.2\u0026rdquo;.\n  Updating minimum TLS version to 1.2   Then performed a re-scan. It looks much better this time.\n  The new results   Hope this is helpful!\n","date":1591833600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591833600,"objectID":"f287de2a3bb9f1d3288d7f84d12d7a34","permalink":"https://davidxiao.me/post/secure-your-https-ssl-tls/","publishdate":"2020-06-11T00:00:00Z","relpermalink":"/post/secure-your-https-ssl-tls/","section":"post","summary":"To site owners: Just because you've enabled HTTPS does not mean it's sound and secure. TLS v1.0 and v1.1 is unsecure and phasing out. ","tags":["security","https","tls"],"title":"Secure Your HTTPS / SSL / TLS","type":"post"},{"authors":["David Xiao"],"categories":["Homelab","Site-Building"],"content":"You will need the following to get dynamic DNS working on Cloudflare:\n  Cloudflare as your DNS provider. Migrating from your current DNS provider over to Cloudflare is easy and free whether you are using Godaddy, Namecheap or another one.\n  Get API token set up on Cloudflare.\n  Install cloudflare-cli.\n    Cloudflare API token    Cloudflare Token is preferred way over API key as token enables added security by allowing to specify access level with permissions and resources.\nToken can be disabled when not in use.\n  When those are met, a one-liner like the following will update A record api.davidxiao.me with your public internet IP.\nNOTE: If you are only using DDNS on Cloudflare and not using its CDN, remove --activate from the command below.\n$ env CF_API_KEY=\u0026#39;your-own-cloudflare-token-NOT-api-key\u0026#39; \\  CF_API_DOMAIN=\u0026#39;your-own-TLD-such-as-davidxiao.me\u0026#39; \\  cfcli --activate --type A edit your-subdomain-such-as-api.davidxiao.me \\  `curl -s \u0026#39;https://ip.seeip.org/\u0026#39;` ; Finally, put the code it into crontab will automate the process.\n","date":1591747200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591747200,"objectID":"c6c5540080ee57d9e628a5edae3468b4","permalink":"https://davidxiao.me/post/dynamic-dns-on-cloudflare/","publishdate":"2020-06-10T00:00:00Z","relpermalink":"/post/dynamic-dns-on-cloudflare/","section":"post","summary":"You will need the following to get dynamic DNS working on Cloudflare:\n  Cloudflare as your DNS provider. Migrating from your current DNS provider over to Cloudflare is easy and free whether you are using Godaddy, Namecheap or another one.","tags":["self-hosting","cloudflare","ddns","dynamic-dns"],"title":"Dynamic DNS on Cloudflare in 5 Minutes","type":"post"},{"authors":["David Xiao"],"categories":["Homelab","Site-Building"],"content":"Suppose you plan on hosting multiple API endpoints on one domain, make it api.your-domain.com, one way to do it is to put each endpoint under a distinctive path, each one would look like:\nhttps://api.your-domain.com/myapp1/    Tunneling through a Nginx reverse proxy   Configure a reverse proxy such as Nginx and set up rewrite rules can get it done quickly.\nSee below my example:\n Depending on your Linux distro and Nginx, most would need to put the conf file under /etc/nginx/sites-available/ directory and create a symbol link in /etc/nginx/sites-enabled/.\nRestart nginx service by sudo systemctl restart nginx ; and it\u0026rsquo;s working!\n","date":1591747200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591747200,"objectID":"626dbdf75bd549cb5401924f9e8f0fdb","permalink":"https://davidxiao.me/post/hosting-multiple-containers-with-nginx-rewrite-rules/","publishdate":"2020-06-10T00:00:00Z","relpermalink":"/post/hosting-multiple-containers-with-nginx-rewrite-rules/","section":"post","summary":"A reverse proxy such as Nginx will come in handy if you need to host multiple apps on a single domain. Here's a 5-minute how-to.","tags":["self-hosting","nginx","nginx rewrite"],"title":"Hosting Multiple Apps With Nginx Rewrite Rules","type":"post"},{"authors":["David Xiao"],"categories":["Homelab","Site-Building","Cloud"],"content":"TLDR ðŸ‘‰ It talks about hosting remark42 commenting system as Docker container; Leveraging Cloudflare to protect the remark42 endpoint; Integrating remark42 to a Hugo static site which is built on Hugo and using academic theme.\nBefore getting started, have a look at any post on my blog at davidxiao.me and see the way commenting works. If you like what you saw, please read on.\nWhat Will be Covered in This Post   Deploy remark42 container on Docker\n  Protect your remark42 endpoint with Cloudflare CDN\n  Integrate remark42 to your Hugo site\n  Step 1. Hosting Remark42  Remark42 is an open source commenting system that can be deployed as container. It\u0026rsquo;s self-contained with little external dependencies. You can find deployement guide on its Remark42\u0026rsquo;s git repo.\nFeel free to do container your way but if you are interested in what tool I use for docker management, it\u0026rsquo;s Portainer.\nI have the following parameters on my remark42 container:\nREMARK_URL make sure it has the full path if you are using reverse proxy and rewrites, e.g. https://api.davidxiao.me/remark42 SITE\tsite id. For example: davidxiao SECRET\trequired. can be a long and hard-to-guess string DEBUG\ttrue AUTH_GOOGLE_CID your own value AUTH_GOOGLE_CSEC same AUTH_FACEBOOK_CID same AUTH_FACEBOOK_CSEC same AUTH_TWITTER_CID same AUTH_TWITTER_CSEC same AUTH_GITHUB_CID same AUTH_GITHUB_CSEC same ADMIN_SHARED_EMAIL mail address that will receive notifications such as new comments NOTIFY_EMAIL_ADMIN\ttrue NOTIFY_TYPE\temail NOTIFY_EMAIL_FROM\tmail address that is in the same domain see Mailgun settings. For example, mine is remark42@davidxiao.me AUTH_EMAIL_FROM\tsame as above ADMIN_SHARED_ID\tOAuth authenticated user id that has admin access. see https://github.com/umputun/remark42#admin-users SMTP_HOST\tsmtp.mailgun.org SMTP_PORT\t465 SMTP_TLS\ttrue SMTP_USERNAME\tSMTP credential from Mailgun SMTP_PASSWORD\tNOTES: for more detail on Remark42 email configuration, check this page\nApp Registration on the OAuth Providers Before you can complete app registration on the OAuth providers supported by Remark42 (Google, facebook, twitter, github), you would need to determine the domain name of your Remark42 api endpoint.\n  My app registration page on facebook as an example   Using a dynamic DNS (DDNS) would allow you to update IP address when your endpoint IP changes. If you are hosting Remark42 container on cloud such as AWS EC2 or on your homelab, DDNS can be helpful.\nSelecting a proper one as your DDNS provider is important to your solution. There are a few reasons.\nEach OAuth provider has its own rules over what kind of OAuth redirect URIs is allowed, some just don\u0026rsquo;t allow certain DDNS domains. For instance, facebook does not allow any duckdns.org domain as part of redirect URIs at time of writing.\nSecond, a typical DDNS provider would resolve your domain to your public IP. It\u0026rsquo;s what DDNS does. But for our purpose of hosting web apps, it\u0026rsquo;s not a great idea to expose your public IP as it could be exploited during an attack. CDN is a better approach but some DDNS providers may not offer that.\nService availability is another concern. Without any service level agreement, your API will become inaccessible when the DDNS it relies on stops working.\nLast, the security posture of some DDNS providers can be doubtful. When the service platform itself gets compromised, bad things could happen really quickly before you are made aware of as end user.\nðŸ‘‰ See my solution in twofold:\n  Use a large-scale commercial DNS provider that supports DNS management over API, or even better - when it offers CDN protection over your origin endpoint.\n  Use a reverse proxy such as Nginx to rewrite URLs so that multiple apps can be \u0026ldquo;tunneled through\u0026rdquo; a single domain name when needed. See here for detail.\n  With respect to DDNS provider, I landed on Cloudflare after having reviewed a few choices including Cloudflare, Duckdns, No-IP. See my Cloudflare DDNS setup here.\nStep 2. Protect(tunnel) your Endpoint I assume you are using Cloudflare as DNS provider as it\u0026rsquo;s a prerequisite if you need to enable Cloudflare CDN.\nTo enable CDN, first go to Cloudflare portal and enable CDN for your remark42 subdomain. In my case that\u0026rsquo;s api.davidxiao.me.\n  Enabling Proxy by clicking on the Proxy status icon   Second, modify caching level to \u0026ldquo;No query string\u0026rdquo;. No Query String means it only delivers files from cache when there is no query string. It\u0026rsquo;s the caching behavior we expect for an API endpoint, isn\u0026rsquo;t it?\n  Enabling Proxied by clicking on Proxy status icon   Step 2.1 Enable End-to-end HTTPS with Cloudflare There are several SSL options provided by Cloudflare. Check this out to understand the difference.\nBased on my own needs, I\u0026rsquo;ve set up a \u0026ldquo;Full\u0026rdquo; mode in Cloudflare, which ensures a secure connection between both the web browser and Cloudflare and between Cloudflare and my endpoint. This option uses a self-signed certificate at the my endpoint web server.\n  Enabling SSL in Full mode     Generate and download Cloudflare\u0026rsquo;s self-signed certificates   Save the origin certificat as origin-cert.pem and the private key as priv.key, place both files on your host and make sure they both have ownership of root and have 0600 permissions.\nThen you just need to add the file locations in your nginx configuration file. See below my configruation files for example:\n Step 3. Integrate Remark42 to Your Hugo Site Override the comments.html template by:\n$ cp your-project-root/themes/academic/layouts/partials/comments.html your-project-root/layouts/partials/comments.html  and modify the new one as you see fit.\nThe following is my modified version of comments.html.\n Conclusion Congrats! You\u0026rsquo;ve got the remark42 commenting system integrated to your Hugo site. Comment, Suggestion, and Feedback are all welcome!\n","date":1591660800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591660800,"objectID":"ee0bc639306b982f76fe73369383b2ef","permalink":"https://davidxiao.me/post/adding-your-own-commenting-system-to-a-static-site/","publishdate":"2020-06-09T00:00:00Z","relpermalink":"/post/adding-your-own-commenting-system-to-a-static-site/","section":"post","summary":"If you are looking for integrating a commenting system on your site but also like to have control over its infrastructure and data, this is how I did it.","tags":["self-hosting","hugo","hugo-academic","remark42","cloudflare","docker"],"title":"Integrating a Self-Hosting Commenting System to Your Site","type":"post"},{"authors":["David Xiao"],"categories":["Homelab"],"content":"Mailgun is a SaaS that provides email services (both sending and receiving) through both conventional SMTP and RESTful APIs. Find more detail here.\nIn this post we will cover the SMTP option as it can be easily integrated with Postfix.\nWhat\u0026rsquo;s Required You would need the following:\n  A custom domain name, something like yourcompany.com. You also need to have admin access to your DNS provider.\n  A Mailgun account that allows you to send out mails using your custom domain name. Payment information is required when signing up but no charges will take place at the moment.\n  Admin privilege on a Linux box to set up Postfix server. Outbound internet access is required.\n  Onboarding Mailgun Make sure you fill out payment information when signing up a new account on Mailgun. There\u0026rsquo;s no charge for small volume mail delivery but it\u0026rsquo;s a Mailgun requirement if you plan on delivering emails with your custom mail address like yourname@yourdomain.com.\n  Sign up on Mailgun   Mailgun provides multiple plans, the Flex Trial is essentially a pay-as-you-go option that works very well if you don\u0026rsquo;t need to deliver a large volume of emails everyday.\n  Flex Trial is pay-as-you-go   DNS Settings For Sending on Mailgun to work properly, you\u0026rsquo;ve got to update a few DNS settings. First, you\u0026rsquo;d have to add a subdomain to your domain for Mailgun MX. For example, I\u0026rsquo;ve added mg.davidxiao.me.\nThen you\u0026rsquo;d have to add a few TXT records on DNS.\n  Adding TXT records for sending emails   What About Receiving Receiving and forwarding incoming mails is a premium feature on Mailgun that requires spending commitments.\nI will write another post talking about using a free-of-charge mail forwading service. Stay tuned.\nSMTP Credential On Mailgun portal, under Settings/Domain Settings and click on SMTP credentials, you will be able to provision new SMTP credentials. The SMTP password will only show one time during user provisioning for security.\n  SMTP user credential and SMTP server detail   Which SMTP Port to Use Short version: It depends on what your client can support.\nLong version:\nMailgun indicates the following ports are open: 25, 587, and 465 (SSL/TLS)\nPort 25 is not recommended because many enterprise firewalls deny it for security reasons.\nPort 587 is the STARTTLS version. In short, client first initiates a plain TCP connection. When server advises that it supports STARTTLS, client will respond with STARTTLS and proceed with reconnecting to the same 587 port, this time with TLS handshake. The protocol is such that server will deny TLS handshakes in the first place if client did not complete an initial TCP session and ask for STARTTLS.\nPort 465 is the \u0026ldquo;straight-in\u0026rdquo; SSL/TLS in that it deals with every session as TLS.\nPostfix Postfix can be easily installed on almost any Linux distro. On Ubuntu, run:\nsudo apt install libsasl2-modules postfix ;  Then create a file /etc/postfix/sasl/sasl_passwd_mailgun. Copy the following line into the file, replacing your-username@mg.yourdomain.com:your-password-here with your actual SMTP credential.\n[smtp.mailgun.org]:587 your-username@mg.yourdomain.com:your-password-here  Run:\nsudo postmap /etc/postfix/sasl/sasl_passwd_mailgun ;  If all went well, you have a new file as /etc/postfix/sasl/sasl_passwd_mailgun.db. It\u0026rsquo;s what Postfix will be reading from for Mailgun SMTP authentication.\nSecure the passwords Both sasl_passwd_mailgun and sasl_passwd_mailgun.db contain plain text of your app password, to secure the access, you need to:\nsudo chown root:root /etc/postfix/sasl/sasl_passwd_mailgun /etc/postfix/sasl/sasl_passwd_mailgun.db ; sudo chmod 0600 /etc/postfix/sasl/sasl_passwd_mailgun /etc/postfix/sasl/sasl_passwd_mailgun.db ;  Setting up Postfix\u0026rsquo;s main configuration file is /etc/postfix/main.cf. See the following my own configuration for your reference.\n   myhostname indicates the hostname of the Postfix\n  mynetworks is the IP CIDRs that are allowed to relay mails through Postfix. It should only contain your local networks\n  smtp_sasl_password_maps is where the sasl_passwd file is located\n  relayhost is the server name and port. Replace it with[smtp.mailgun.org]:587\n  Edit the values respectively.\nFor security reason, do not expose Postfix service to anywhere outside of your trusted networks.\nIn the example above, I am allowing anonymous SMTP authentication from mynetworks. The argument can be made that attackers will be after more valuable targets than fiddling with Postfix relay service provided the local network is compromised.\nTesting and Troubleshooting When config file is done, reload Postfix configurations without having to restart the service:\nsudo postfix reload ;  For SMTP testing, I personally like to use swaks, a purpose-built Perl script.\nWith swaks installed, it will be just a one-liner to send out a testing mail:\n./swaks \\  --server \u0026lt;your-postfix-server-ip\u0026gt; \\  --port 25 \\  --from yourname@yourdomain.com \\  --to anymailbox@wherever.com \\  --h-Subject: \u0026#34;Hello world\u0026#34; \\  --body \u0026#39;Testing some Mailgun awesomness!\u0026#39; If you suspect something went wrong, go check the logs:\nsudo tail -f /var/log/syslog ; # and sudo tail -f /var/log/mail.err ;  That\u0026rsquo;s it!\nOn a side note, there are lots of tweaks can be done on the Postfix end depending on what you need to achieve, but this simple guide should be able to get you started quickly.\nLet me know if you have any questions or comments.\n","date":1591401600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591401600,"objectID":"6594869e12680af7c30fde196ac33f2a","permalink":"https://davidxiao.me/post/setting-up-a-mailgun-relay-with-postfix/","publishdate":"2020-06-06T00:00:00Z","relpermalink":"/post/setting-up-a-mailgun-relay-with-postfix/","section":"post","summary":"Set up a Postfix server on local network that relays outgoing emails through Mailgun SMTP.","tags":["homelab","postfix","mailgun","mailgun relay"],"title":"Setting Up a Mailgun Relay With Postfix","type":"post"},{"authors":["David Xiao"],"categories":["Homelab"],"content":"You would need the following to set up a gmail relay on Postfix:\n  An app password obtained from your Gmail account. It will be effectively your Gmail SMTP password.\n  Admin privilege on a Linux box to set up Postfix server. Outbound internet access is required.\n  Google App Password App passwords let you sign in to your Google Account from apps that don\u0026rsquo;t support 2-Step Verification. This post from Google explains how to obtain an app password.\n  Sign up for an App Password on your Google Account   Essentially, first you need to go to Google Account and enable two Factor Authentication. Without enabling 2FA, app password option is disabled on Google.\nThen click on \u0026lsquo;Security\u0026rsquo; from the left, click on \u0026lsquo;App passwords\u0026rsquo; under \u0026lsquo;Signing in to Google\u0026rsquo; and click on \u0026lsquo;Generate\u0026rsquo; button, here you go. Copy the password as we will need it later.\nThe rest of the post is using Ubuntu as an example, but the approach should work for most recent Linux distro in general.\nPostfix Postfix can be easily installed on almost any Linux distro. On Ubuntu, run:\nsudo apt install libsasl2-modules postfix ;  Then create a file /etc/postfix/sasl/sasl_passwd. Copy the following line into the file, replacing your@gmail.com with your actual Gmail; abcdefghijk123 with your actual app password.\n[smtp.gmail.com]:587 your@gmail.com:abcdefghijk123  Run:\nsudo postmap /etc/postfix/sasl/sasl_passwd ;  If all went well, you have a new file as /etc/postfix/sasl/sasl_passwd.db. It\u0026rsquo;s what Postfix will be reading from for Gmail SMTP authentication.\nSecure the passwords Both sasl_passwd and sasl_passwd.db contain plain text of your app password, to secure the access, you need to:\nsudo chown root:root /etc/postfix/sasl/sasl_passwd /etc/postfix/sasl/sasl_passwd.db ; sudo chmod 0600 /etc/postfix/sasl/sasl_passwd /etc/postfix/sasl/sasl_passwd.db ;  Setting up Postfix\u0026rsquo;s main configuration file is /etc/postfix/main.cf. See the following my own configuration for your reference.\n   myhostname indicates the hostname of the Postfix\n  mynetworks is the IP CIDRs that are allowed to relay mails through Postfix. It should only contain your local networks\n  smtp_sasl_password_maps is where the sasl_passwd file is located\n  relayhost is the server name and port\n  Edit the values respectively.\nFor security reason, do not expose Postfix service to anywhere outside of your trusted networks.\nIn the example above, I am allowing anonymous SMTP authentication from mynetworks. The argument can be made that attackers will be after more valuable targets than fiddling with Postfix relay service provided the local network is compromised.\nTesting and Troubleshooting When config file is done, reload Postfix configurations without having to restart the service:\nsudo postfix reload ;  For SMTP testing, I personally like to use swaks, a purpose-built Perl script.\nWith swaks installed, it will be just a one-liner to send out a testing mail:\n./swaks \\  --server \u0026lt;your-postfix-server-ip\u0026gt; \\  --port 25 \\  --from yourmail@gmail.com \\  --to anymailbox@wherever.com \\  --h-Subject: \u0026#34;Hello world\u0026#34; \\  --body \u0026#39;Testing some Mailgun awesomness!\u0026#39; If you suspect something went wrong, go check the logs:\nsudo tail -f /var/log/syslog ; # and sudo tail -f /var/log/mail.err ;  That\u0026rsquo;s it!\nOn a side note, there are lots of tweaks can be done on the Postfix end depending on what you need to achieve, but this simple guide should be able to get you started quickly.\nLet me know if you have any questions or comments. On my post I will be discussing setting up a Mailgun relay. Stay tuned!\n","date":1591315200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591315200,"objectID":"a6c6a4f34a210c3670766ea945bc7735","permalink":"https://davidxiao.me/post/setting-up-a-gmail-relay-with-postfix/","publishdate":"2020-06-05T00:00:00Z","relpermalink":"/post/setting-up-a-gmail-relay-with-postfix/","section":"post","summary":"Set up Postfix that relays outgoing emails through your personal Gmail account.","tags":["homelab","postfix","gmail","gmail relay"],"title":"Setting up a Gmail Relay With Postfix","type":"post"},{"authors":["David Xiao"],"categories":["Homelab"],"content":" TL;DR\nInstall and configure Proxmox as KVM hypervisor.\n  Playing ä¸‰åœ‹å¿—XIII on Win10 guest through Remote Desktop   ","date":1590710400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590710400,"objectID":"ed7797a56d44b5b65ba3e870422a0de8","permalink":"https://davidxiao.me/post/my-homelab-setup-from-hardware-to-kvm-part-2/","publishdate":"2020-05-29T00:00:00Z","relpermalink":"/post/my-homelab-setup-from-hardware-to-kvm-part-2/","section":"post","summary":"Install and configure Proxmox as KVM hypervisor.","tags":[],"title":"My Homelab Setup From Hardware to KVM - Part 2","type":"post"},{"authors":["David Xiao"],"categories":["Homelab"],"content":" TL;DR\nI plan on writing a few posts about my Homelab project. This is the first one focusing on the hardware spec and networking.\n Last year I decided to set up a homelab to learn technologies, to run some services for my own use and more importantly, to have fun.\nThere is a budget and a few high level requirements on the infrastructure side I worked on:\n  Be able to run a hypervisor that supports both Linux and Windows virtual machine\n  One single host. No clustering\n  Use open source as long as the it\u0026rsquo;s mature enough\n  Easy to manage and operate\n  Cost effective\n  No dedicated networking hardware\n  I plan on writing a few posts with respect to the HW spec I chose, the architecture decisions I made along the way and how I built the whole lab. This is the first post.\nHardware  table th:nth-of-type(1){ width: 20%; } table th:nth-of-type(2) { width: 30%; } table th:nth-of-type(3) { width: 50%; }     Item Spec Notes     CPU AMD Ryzen 7 3700x 65W TDP. 8-core, 16-thread, 7nm   Motherboard ASUS PRIME X470-PRO See my notes   Memory 16gb x2 ECC UDIMM Unbuffered ECC   System Storage 250GB SATA SSD See my notes   Data Storage 4TB HDD As temporary data storage   Networking On-board Gigabit Ethernet See my notes   Graphics Card #1 Asus GeForce GTX 1660 Super model: TUF-GTX1660S-O6G-GAMING See my notes   Graphics Card #2 MSI GeForce GT 710 1GB Fanless design    Accessories such as case and power supply are not listed but included in the total cost.\nTotal Cost The hardware cost of my homelab is around CA $1,400 when I bought them back in December 2019.\nMotherboard If you need to use ECC memory, you have to pick a motherboard that support ECC. In consumer grade motherboard market, look no further than ASUS and ASROCK. Those two are know for building consumer grade ECC-enabled motherboards.\nIf you need to manage your homelab hypervisor from a remote location, and be able to access it when troubleshooting something low level, e.g. when hypervisor is crashed or configuring BIOS, you have two choices: Phyical Access or IPMI.\nPhyical Access It means hook up a display, a keyboard and a mouse to your server and sit in front of it when troubleshooting.\nIPMI With IPMI, tasks such as power on/off the machine, configure BIOS settings and monitor console output all can be done from remote wia a web portal. Motherboards that support IPMI typically provide a dedicated Ethernet port for IPMI management. Learn more about IPMI here.\nASROCK has some pretty good IPMI-enabled workstartion motherboards. For AMD cpu, take a look at ASROCK X470D4U or x470d4u2-2t with 10G networking. There are also x570d4i-2t to be released in 2020.\nStorage To have flexability and speed, I need two kinds of storage. Direct Attached Storage (DAS) for hypervisor and guest OS images and Network Attached Storage (NAS) for data such as video and photos.\nSSD as DAS M2.SSD is my primary choice for DAS since it\u0026rsquo;s much faster than SATA SSD both on paper and in reality. So I bought a XPG SX8800 PRO 1TB and installed it on my server.\nUnfortunately my server started freezing up randomly every a few hours to a few days. Troubleshooting proved to be one hell of an effort when my server is in the basement without a dedicated display. I\u0026rsquo;d have to take an external display from my home office down to the basement for troubleshooting. IPMI could have saved my day.\n  Error messages showing I/O error on nvme0n1   It took some time to reproduce the problem and troubleshoot the issues. Finally I was able to conclude that the controller chip that XPG SX8800 PRO uses may have compatibility issue with PRIME X470-PRO. After I replaced the M2.SSD with an old SATA SSD that I have, the server runs smoothly without any issues.\nSynology NAS I have a Synology DS416play. It\u0026rsquo;s a little home NAS with 4 bays and 1GB memory. I\u0026rsquo;ve since upgraded the memory to 8G and have it fitted with 4x10G HDD. In terms of usable space it has around 27T with one disk fault tolerance which is more than enough for me.\nThe downside of this NAS is it only has Gigabit Ethernet. If you think 10G is appealing, I\u0026rsquo;m totally with you. QNAP is offering a number of 10G ready NAS. Check it out here for detail.\nNetworking My home network topology is rather simple. Both homlab server and NAS are connected to the internet router. The router provides basic functionalities such as IP management and port mapping.\n  Home Network Diagram   Given my home network cables are all Cat5 supporting up to 1 Gigabit, I have to stay with 1G network and the on-board Gigabit Ethernet works well in my setup.\nIf you are considering 10G, you would need to make sure all critial devices on the network (e.g. router, NAS, Wifi etc.) are capable of dealing with the throughput, since any performance bottleneck can be the low watermark that undermines the overall network performance.\nGPU Passthrough The KVM hypervisor supports passing graphics card(s) onto dedicated guest OS.\nOn my setup, GTX1660 is the primary card for tasks such as streaming encoding/decoding whereas the GT710 is pass-through to a Win10 guest. This setup allows me to play a few not-so-demanding games on the Win10 through remote desktop.\n  Playing ä¸‰åœ‹å¿—XIII on Win10 guest through Remote Desktop   I will discuss more on GPU passthrough in the next post.\n","date":1590624000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590624000,"objectID":"97dd21703514933ab3aad135fc7b49ed","permalink":"https://davidxiao.me/post/my-homelab-setup-from-hardware-to-kvm-part-1/","publishdate":"2020-05-28T00:00:00Z","relpermalink":"/post/my-homelab-setup-from-hardware-to-kvm-part-1/","section":"post","summary":"I plan on writing a few posts about my Homelab project. This is the first one focusing on the hardware spec and networking","tags":["kvm","homelab","amd ryzen","kvm","proxmox","pve"],"title":"My Homelab Setup From Hardware to KVM - Part 1","type":"post"},{"authors":["David Xiao"],"categories":["Cloud"],"content":" TL;DR\nThis post will show you how to build and deploy a voice-activated app on Google Cloud in 10 minutes. It responds to your commands and plays personalized music if you ask! Not a bad way to play on someone\u0026rsquo;s birthday, eh?\nCreate a New Project on Google Actions Console The app is built on Google Cloud using Google Actions and Dialogflow. If you don\u0026rsquo;t have a Google Actions account, click here to create a new one. It\u0026rsquo;s free.\nWhen the account is created, go ahead and create a new project. Google Actions allows you to add Actions support to existing GCP projects, but we will create a new one to keep it simple.\n  Create a new project   Specify a Catchy Name for Your App You need to specify a catchy name for the app so that every time when you say those \u0026ldquo;gateway words\u0026rdquo; to the Google Home device, it will activate the app for you.\nGo to the project dashboard, click on \u0026ldquo;Quick setup\u0026rdquo; followed by \u0026ldquo;Decide how your action is invoked\u0026rdquo; and put the app name here. It may reject the name if it\u0026rsquo;s too common or ambiguous, e.g. \u0026ldquo;Hello\u0026rdquo; is probably not a good choice here.\nFor example, my app is called \u0026ldquo;Hello Jukebox\u0026rdquo;.\n  Specify a catchy name for your app   Add Actions to Your App There is no secret sauce. An app is only as smart as what it\u0026rsquo;s taught. This app will respond to voice commands and act accordingly based on the intents developeed for it. \u0026ldquo;Intent\u0026rdquo; is a Google term referring to a combination of voice command and its response.\nWithin one app, developer can create as many intents as they want as long as no intent is stepping on one another\u0026rsquo;s toes. For example, trying to create two separate intents both responding to the same command \u0026ldquo;what is my favoriate color\u0026rdquo; would be confusing to begin with.\nWithin an intent, developer can decide on the kind of response it needs to give: it can be as simple as having Google Home say something or be more complicated with custom logic.\n  Add a new Action to your app   Use Case 1: Simple Voice Commands and Text Responses Scroll down the Actions dashboard until the Fulfillment section, click on \u0026ldquo;Edit in Dialogflow\u0026rdquo; and click on the Intents. Start adding intents.\n  Edit in Dialogflow     Add new Intent   For example, you may want to create an intent called \u0026ldquo;special-intent\u0026rdquo;, add \u0026ldquo;Do you know why today is so special\u0026rdquo; as voice command and add \u0026ldquo;Of course I know, David\u0026rdquo; as text responses to the intent. Those are what you would say to the app and what the app will say back respectively.\n  A list of intents I added     Text Responses   Use Case 2: Implement custom logic using Cloud Function The second use case is enabling webhook in an intent and developing a handler for it.\nThis approach allows you to implement custom logic for an intent. GCP supports either running your custom code on a Cloud Function or calling an external web service you specify.\n  Text Responses   I will use the Cloud Function way for this example since we don\u0026rsquo;t need to worry about resource or storage thanks to its serverless nature.\nFirst, you need to enable \u0026ldquo;Webhook\u0026rdquo; on the intent that needs to have custom logic. Second, click on the Fulfillment on the left navbar and enable Inline editor. Last, copy and paste the following code example and click on save. That\u0026rsquo;s it.\nThe code example will first say something then play an audio clip. If you need to play something else, e.g. a peronalized audio clip, you can replace the URL with your own thing, but then you would have to deal with access control.\n Testing Your New App on Simulator Click on \u0026ldquo;Google Assistant\u0026rdquo; on the right bar to open the Simulator on Google Actions. From there you can tinker with your app until you\u0026rsquo;re satisfied with it :-)\n  Text Responses   Deploying to your Google Home Device Making your app available on Google Assistant Actions Portal sounds like a great idea, however the releasing process could take some time as Google needs to review and approve your app first before it can be released. Since my post promised you a 10-minute ride, let\u0026rsquo;s rolling to get the freshly baked app onto your own Google Home device.\nOn Actions console, click on \u0026ldquo;Deploy\u0026rdquo;, choose \u0026ldquo;Alpha\u0026rdquo;, click on \u0026ldquo;Manage Alpha Testers\u0026rdquo;, and add your own Google Home device account email here. You can then switch to your Google Home account and use the opt-in link received on the invitation email to accept the invite.\n  Make an Alpha Deployment   When it\u0026rsquo;s ready, click on \u0026ldquo;Create a release\u0026rdquo;, and wait it to complete. It can take a few minutes.\nCongrats! You\u0026rsquo;ve just developed and deployed your first Google Home app in 10 minutes! Try say to your Google Home: \u0026ldquo;Hey Google, Talk to your_app_name_here\u0026rdquo; and see what happens :)\n","date":1590451200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590451200,"objectID":"568466a0369b7a28c2719b3586e50773","permalink":"https://davidxiao.me/post/building-your-first-app-on-google-home/","publishdate":"2020-05-26T00:00:00Z","relpermalink":"/post/building-your-first-app-on-google-home/","section":"post","summary":"Build and deploy a voice-activated app on Google Home in 10 minutes. It responds to your commands and plays personalized music if you ask! Not a bad way to play on someone's birthday, eh? :-)","tags":["cloud","gcp","google home","google cloud function"],"title":"Building Your First App on Google Home in 10 minutes","type":"post"},{"authors":null,"categories":null,"content":"Last Updated: May 26, 2020\nThis Privacy Policy (\u0026ldquo;Policy\u0026rdquo;) outlines the personal information handling practices on main site davidxiao.me and mirror site davxiao.github.io (\u0026ldquo;this site\u0026rdquo;, \u0026ldquo;I,\u0026rdquo;, \u0026ldquo;me,\u0026rdquo; and \u0026ldquo;my\u0026rdquo;).\nBefore you post any comments on this site, please carefully review this Privacy Policy. By posting comments on this site, you understand that your information will be collected, used, and disclosed as outlined in this Privacy Policy.\nIF YOU DO NOT AGREE TO THIS PRIVACY POLICY, PLEASE DO NOT POST ANY COMMENTS ON THIS SITE.\nTypes and Uses of Personal Information If you are browsing this site but not posting any comments on this site, no personal information is collected.\nHowever, if you wish to post comments on this site, you would first need to complete Social Login on this site with one of the following Identity Providers: Google, Twitter, Facebook, Github.\nYour name, language preference, and profile pictures will be shared with this site\u0026rsquo;s comment engine by the identity provider upon completion of the social login.\nComment Engine I use Remark42 as this site\u0026rsquo;s comment engine. It is open source and privacy focused. It saves the minimum amount of information required to be able to show comments. Such information includes name, avatar (to be shown with comment message) and your id in service you used to login (to understand it\u0026rsquo;s still you when you log in next time). Id is hashed, there\u0026rsquo;s no easy way for me to identify the profile you used for login.\nFind more details about Remark42\u0026rsquo;s privacy in here and be sure to check its source code in case you have further questions.\nAggregate Information (non-personally identifiable) This site uses Google Analytics to collect aggregated information including browser information and site traffic statistics. Find more detail about Google Analytics privacy information here.\nThis site does not use any Web Banner or Online advertising.\nCookies A cookie is a small text file that is stored on a user\u0026rsquo;s computer for record-keeping purposes.\nThis website uses cookies to work properly. Cookies are small pieces of information your browser sends to server with every request. Here\u0026rsquo;s the list of cookies used on this website:\n Google Analytics uses cookies for its analytics purposes. When logging in to post a comment, comment engine requests two cookies: one to determine it\u0026rsquo;s still you; the other one is added as an information security measure against Cross-site request forgery.  If you reject cookies, you may still visit this site, but your ability to use some areas of this site, such as comments, will require logging in.\nLinks to Other Sites This site contains links to other sites that are not owned or controlled by davidxiao.me. Please be aware that I am not responsible for the privacy practices of such other sites. This privacy statement applies only to information collected by this site.\nChanges in This Privacy Statement If this privacy policy needs to be updated, the updated version will be posted to this privacy statement, the homepage, and other places I deem appropriate.\nQuestions If you have any questions about this Privacy Policy, you can contact me at: root@davidxiao.me\n ","date":1590451200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590451200,"objectID":"18d05a63a1c8d7ed973cc51838494e41","permalink":"https://davidxiao.me/privacy/","publishdate":"2020-05-26T00:00:00Z","relpermalink":"/privacy/","section":"","summary":"Last Updated: May 26, 2020\nThis Privacy Policy (\u0026ldquo;Policy\u0026rdquo;) outlines the personal information handling practices on main site davidxiao.me and mirror site davxiao.github.io (\u0026ldquo;this site\u0026rdquo;, \u0026ldquo;I,\u0026rdquo;, \u0026ldquo;me,\u0026rdquo; and \u0026ldquo;my\u0026rdquo;).\nBefore you post any comments on this site, please carefully review this Privacy Policy.","tags":null,"title":"Privacy Policy","type":"page"},{"authors":["David Xiao"],"categories":["Raspberry-Pi"],"content":"A little teaser here: Raspberry Pi is not really ediable :-)\nSo I have a Raspberry Pi Zero W for about one year now.\nIt runs a few software. One of them is called Pi-Star. It\u0026rsquo;s an open source toolkit for digial voice over amateur radio. Find more detail about Pi-Star here.\nAmateur radio is one of my hobbies. Figuring out how digital voice modes work in the amateur radio world took some time for me but it was rewarding. At the end of the day, listening to hams talking about their passions from all over the world on my little handheld radio feels amazing.\nPi-Star works very well in my setup, so when I found out Pi-Star does not display my public IP address on OLED, I decided to write some code for it.\nHere\u0026rsquo;s what it looks like.\n  OLED display showing my Public IP    1. Download the Toolchain with Extra Libs and Headers I use Ubuntu 20.04 on my homelab as cross compiling platform, but any recent Linux distro should work.\nMy toolchain is a fork from the original toolchain with extra libs and headers for compiling MMDVMHost.\n$ cd ~/code $ git clone https://github.com/davxiao/tools.git  2. Code is the Easy Part \u0026lt;3 Pi-Star consists of a few components including a PHP frontend and a few programs as backend for data exchange over various digital voice networks.\nMMDVMHost is the program that interfaces to the digital voice modem (MMDVM) on one side, and a suitable network on the other. It\u0026rsquo;s written in standard C++ with dependencies to external libs such as ArduiPi_OLED.\nFor my purpose, I added some code in CNetworkinfo class and COLED class. If you don\u0026rsquo;t know much about C++, no worries, just download all source code from my github repo.\nDownload my repo:\n$ cd ~/code $ git clone https://github.com/davxiao/MMDVMHost.git  3. Prep for the Cross Compilation In MMDVMHost/cmake/CrossCompile.cmake, you wanted to update toolchain paths so that CMake will be able to generate correct Makefile afterwards.\nWhen it\u0026rsquo;s done, run:\n$ cd MMDVMHost/cmake $ cmake ../ -DCMAKE_TOOLCHAIN_FILE=./CrossCompile.cmake  If you see warnings like this, try delete CMakeCache.txt and run the cmake command again.\nCMake Warning: Manually-specified variables were not used by the project: CMAKE_TOOLCHAIN_FILE 4. Last Step When Cmake is done, a Makefile was generated under the same directory. Run the following in the same directory:\n$ make ;  When the complication is complete, you should see MMDVMHost in the cmake/ directory. You may wish to run file ./MMDVMHost to confirm the target platform is ARM as opposed to amd64. Here\u0026rsquo;s my output:\n./MMDVMHost: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-armhf.so.3, for GNU/Linux 2.6.32, with debug_info, not stripped Congrats! You\u0026rsquo;ve built MMDVMHost using cross compilcation.\nDeployment You can skip this section if you have set up your own deployment pipeline.\nOn my homelab, I mount the same Samba share folder on both the Ubuntu and the Pi, then just copy the MMDVMHost over. Before replacing the MMDVMHost, you need to confirm the SD card is mounted in R/W mode and MMDVMHost service is stopped. Make a backup of the original MMDVMHost is also a good idea.\n$ rpi-rw ; $ sudo systemctl stop mmdvmhost ; $ sudo systemctl stop mmdvmhost.timer ; $ sudo cp ~/nas-dir/MMDVMHost.build /usr/local/bin/MMDVMHost ; $ sudo systemctl start mmdvmhost ; $ sudo systemctl start mmdvmhost.timer ;   If you experience mount error(115): Operation now in progress when mounting CIFS on Pi, it might be caused by the iptable rules set by Pi-Star.\nTo troubleshooting the issue, run the following commands on Pi-Star and see if mount works.\nNo worries, the following changes do not persist between restarts.\nsudo iptables -P INPUT ACCEPT; sudo iptables -P FORWARD ACCEPT; sudo iptables -P OUTPUT ACCEPT; sudo iptables -F; sudo iptables -X ; sudo iptables -nvL ;    ","date":1590364800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590364800,"objectID":"aa5e9008023e4ff275a095085263da18","permalink":"https://davidxiao.me/post/cross-compile-mmdvmhost-on-ubuntu/","publishdate":"2020-05-25T00:00:00Z","relpermalink":"/post/cross-compile-mmdvmhost-on-ubuntu/","section":"post","summary":"A quick \"How-to\" guide to compiling raspberry-pi programs on Ubuntu 20.04 using pi toolchain. This post takes Pi Zero W (BCM2708 chip) as an example but the approach would be applicable to other Pi systems.","tags":["raspberrypi","cross-compile","linux","c++","cmake"],"title":"Cross Compile MMDVMHost on Ubuntu","type":"post"},{"authors":["David Xiao"],"categories":["Site-Building"],"content":"In this post I will talk about how I built this website from the ground up using Hugo as site generator and Firebase as hosting provider. I wish you\u0026rsquo;ll find it helpful.\n Web development has come a long way. Back in the late 90\u0026rsquo;s when I first came across Internet, anyone who knows anything about HTML would be considered very technical.\nFast forward into 2020, social media and smart phone is ubiquitous, web hosting services such as Wix and Wordpress have made content creation possible for anyone who wishes to create a website without much headache.\nWhy should you building a website from the ground up as opposed to using a web hosting service?\nMaybe it\u0026rsquo;s for you Building a website with a static site generator is not for everyone. George Cushen who is Hugo theme Academic\u0026rsquo;s main contributor once put:\n \u0026hellip;(it would) require a basic understanding of using the command line in the Terminal (Mac/Linux) or Command Prompt (Windows) app on your computer. If you are not interested in this, perhaps this is not for you\u0026hellip;\n Original post\n But if going beyond content creation and learning more about building a website that is lightweight and secure, cost effective yet no vendor lock-in is your thing, then let\u0026rsquo;s dive right in.\nOverview First and foremost, let\u0026rsquo;s take a look on what will be covered in the post.\n  Register a domain name.\n  Set up Hugo as static site generator.\n  Use a kick-starter theme to get going quickly.\n  Deploy the site to Firebase.\n  Add your domain to the new site.\n  1. Register a domain name It\u0026rsquo;s pretty straightforward. You come up with a great domain name. It is better to be concise and easy to remember. Be creative \u0026lt;3.\nThen complete the domain registration on any Domain Name Registrar you prefer. I use Google Domains but there are other good choices such as Namecheap and GoDaddy.\n  Register a domain name on Google Domains   June 2020: For a few reasons, one being Google domains does not provide API for dynamic DNS (A records), I\u0026rsquo;ve changed my domain name registrar to Namecheap, my DNS provider to Cloudflare].\n2. Setting up Hugo  Hugo is a static site generator. There are many other site generators, I picked Hugo for a few reasons:\n It\u0026rsquo;s open source and backed by an active developer team and support community. It\u0026rsquo;s a monolithic program with no external dependencies. It\u0026rsquo;s production ready.  In a nutshell, Hugo renders content into HTML files and uploads the files onto your choice of hosting provider. Your content is what you write as content creator. Hugo takes content files written in Markdown (.md), a format that is intended to be used by technical and non-technical writers alike. Since inception, Markdown has become the de facto format in content creation and blogging.\nIf you need to learn about Markdown syntax, there are good guides such as Markdown Guide.\nInstalling Hugo On macOS, I recommend using a package manager such as Homebrew to manage third-party packages. With Homebrew installed, to install Hugo, just run:\n$ brew install hugo ;  All set. In case you need to check which Hugo version is installed, run hugo version. On my mac it returns Hugo Static Site Generator v0.70.0/extended darwin/amd64\nFor installing Hugo on Windows or Linux, refer to Hugo\u0026rsquo;s documentation.\n3. Use a kick-starter theme Hugo has built-in theme mechanism that allows developers to quickly run a theme and see the results. It also provides all the necessary building blocks for user to personalize the theme. There are many themes available on Hugo, for my own website I use Academic Theme. It also comes with a academic-kickstart repo on github for teasers.\nThe easy way to get started is to just fork the repo, download the code and run it.\n  Fork the kickstart into your own repo   Download the code:\n$ git clone \u0026lt;replace-it-with-your-own-repo-url\u0026gt; ; $ cd \u0026lt;your-repo-root-dir\u0026gt; ; $ git submodule update --init --recursive ; # get the latest Academic theme  Run Hugo to serve the test site:\n$ hugo server -D ;  Now visit http://127.0.0.1:1313/ on your web browser and you should see the homepage.\nCongrats! You\u0026rsquo;ve got your first Hugo website up and running on your local environment!\n Hugo only binds to local network address for security by default. If you need to test the site on another computer in your local network, run:\n$ hugo server -D --bind=0.0.0.0 ;    4. Deploy the new site to Firebase There are many out there: Google Firebase, GitHub Pages, Netlify and AWS Amplify to name a few. Each one has its own offering. I picked Firebase as my hosting provider because they seem to offer a bit more on their free tier.\nFirst, install Firebase CLI and (optional) Google Cloud SDK CLI.\n  Firebase CLI. The recommended way is to run npm i -g firebase-tools ; See its github repo for more detail. If you don\u0026rsquo;t have npm installed yet, run: brew install node ;. npm will be installed alongside node.js.\n  Google Cloud SDK CLI. Run brew cask install google-cloud-sdk ;\n  Next, go to Firebase to set up an account and create a new Firebase project. Make sure it uses the default free tier plan which is called Spark. Be noted you need to specify GCP resource location under Project Overview in Firebase Dashboard after project is created. The location can not be changed afterwards, so choose something close to you would be wise.\n  Specify resource location under Project Overview in Firebase Dashboard   Set up service account authenication on Firebase Authenticating with a service account allows you to use Firebase CLI to manage your Firebase project. Google has provided a step by step guide here.\nWhen authentication is set up, go to your project root directory and follow the recorded screens below to initialize firebase and deploy the very first version of your site onto firebase.\n Congratulations! Your website is online! You should find your Hosting URL at the end of the Firebase deploy output, it\u0026rsquo;s typically something like: https://your-project-id.web.app\n5. Add your domain to the new site Go to Hosting on Firebase, click on \u0026ldquo;Add custom domain\u0026rdquo;. Typically you wanted to add your root domain name and a sub domain name such as \u0026ldquo;www\u0026rdquo;. For example, I added \u0026ldquo;davidxiao.me\u0026rdquo; for my website and added another entry for redirecting www.davidxiao.me to davidxiao.me\nWhen it\u0026rsquo;s complete, you will be able to visit your website by your custom domain regsitered on step 1.\n  Add custom domain to your website   ","date":1586995200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586995200,"objectID":"e68706bd91a6931f00b0ba34bb78d1e0","permalink":"https://davidxiao.me/post/building-a-website-in-2020/","publishdate":"2020-04-16T00:00:00Z","relpermalink":"/post/building-a-website-in-2020/","section":"post","summary":"If you are interested in building a personal blog site in a cost efficent way, this post discusses about creating a website from the ground up with minimal vendor dependency and high levels of autonomy using Hugo and Firebase.","tags":["hugo","firehose","markdown","static website"],"title":"Building a website in 2020","type":"post"}]