[{"authors":["david-xiao"],"categories":null,"content":"David Xiao is a senior cloud engineer at Toronto Stock Exchange.\n","date":1590710400,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1590710400,"objectID":"3cd11a3614f5641f8703d8da70c09029","permalink":"https://davidxiao.me/author/david-xiao/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/david-xiao/","section":"authors","summary":"David Xiao is a senior cloud engineer at Toronto Stock Exchange.","tags":null,"title":"David Xiao","type":"authors"},{"authors":["David Xiao"],"categories":["Homelab"],"content":" TL;DR\nInstall and configure Proxmox as KVM hypervisor.\n  Playing 三國志XIII on Win10 guest through Remote Desktop   ","date":1590710400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590710400,"objectID":"ed7797a56d44b5b65ba3e870422a0de8","permalink":"https://davidxiao.me/post/my-homelab-setup-from-hardware-to-kvm-part-2/","publishdate":"2020-05-29T00:00:00Z","relpermalink":"/post/my-homelab-setup-from-hardware-to-kvm-part-2/","section":"post","summary":"Install and configure Proxmox as KVM hypervisor.","tags":[],"title":"My Homelab Setup From Hardware to KVM - Part 2","type":"post"},{"authors":["David Xiao"],"categories":["Cloud"],"content":" TL;DR\nThis post will show you how to build and deploy a voice-activated app on Google Cloud in 10 minutes. It responds to your commands and plays personalized music if you ask! Not a bad way to play on someone\u0026rsquo;s birthday, eh?\nCreate a New Project on Google Actions Console The app is built on Google Cloud using Google Actions and Dialogflow. If you don\u0026rsquo;t have a Google Actions account, click here to create a new one. It\u0026rsquo;s free.\nWhen the account is created, go ahead and create a new project. Google Actions allows you to add Actions support to existing GCP projects, but we will create a new one to keep it simple.\n  Create a new project   Specify a Catchy Name for Your App You need to specify a catchy name for the app so that every time when you say those \u0026ldquo;gateway words\u0026rdquo; to the Google Home device, it will activate the app for you.\nGo to the project dashboard, click on \u0026ldquo;Quick setup\u0026rdquo; followed by \u0026ldquo;Decide how your action is invoked\u0026rdquo; and put the app name here. It may reject the name if it\u0026rsquo;s too common or ambiguous, e.g. \u0026ldquo;Hello\u0026rdquo; is probably not a good choice here.\nFor example, my app is called \u0026ldquo;Hello Jukebox\u0026rdquo;.\n  Specify a catchy name for your app   Add Actions to Your App There is no secret sauce. An app is only as smart as what it\u0026rsquo;s taught. This app will respond to voice commands and act accordingly based on the intents developeed for it. \u0026ldquo;Intent\u0026rdquo; is a Google term referring to a combination of voice command and its response.\nWithin one app, developer can create as many intents as they want as long as no intent is stepping on one another\u0026rsquo;s toes. For example, trying to create two separate intents both responding to the same command \u0026ldquo;what is my favoriate color\u0026rdquo; would be confusing to begin with.\nWithin an intent, developer can decide on the kind of response it needs to give: it can be as simple as having Google Home say something or be more complicated with custom logic.\n  Add a new Action to your app   Use Case 1: Simple Voice Commands and Text Responses Scroll down the Actions dashboard until the Fulfillment section, click on \u0026ldquo;Edit in Dialogflow\u0026rdquo; and click on the Intents. Start adding intents.\n  Edit in Dialogflow     Add new Intent   For example, you may want to create an intent called \u0026ldquo;special-intent\u0026rdquo;, add \u0026ldquo;Do you know why today is so special\u0026rdquo; as voice command and add \u0026ldquo;Of course I know, David\u0026rdquo; as text responses to the intent. Those are what you would say to the app and what the app will say back respectively.\n  A list of intents I added     Text Responses   Use Case 2: Implement custom logic using Cloud Function The second use case is enabling webhook in an intent and developing a handler for it.\nThis approach allows you to implement custom logic for an intent. GCP supports either running your custom code on a Cloud Function or calling an external web service you specify.\n  Text Responses   I will use the Cloud Function way for this example since we don\u0026rsquo;t need to worry about resource or storage thanks to its serverless nature.\nFirst, you need to enable \u0026ldquo;Webhook\u0026rdquo; on the intent that needs to have custom logic. Second, click on the Fulfillment on the left navbar and enable Inline editor. Last, copy and paste the following code example and click on save. That\u0026rsquo;s it.\nThe code example will first say something then play an audio clip. If you need to play something else, e.g. a peronalized audio clip, you can replace the URL with your own thing, but then you would have to deal with access control.\n Testing Your New App on Simulator Click on \u0026ldquo;Google Assistant\u0026rdquo; on the right bar to open the Simulator on Google Actions. From there you can tinker with your app until you\u0026rsquo;re satisfied with it :-)\n  Text Responses   Deploying to your Google Home Device Making your app available on Google Assistant Actions Portal sounds like a great idea, however the releasing process could take some time as Google needs to review and approve your app first before it can be released. Since my post promised you a 10-minute ride, let\u0026rsquo;s rolling to get the freshly baked app onto your own Google Home device.\nOn Actions console, click on \u0026ldquo;Deploy\u0026rdquo;, choose \u0026ldquo;Alpha\u0026rdquo;, click on \u0026ldquo;Manage Alpha Testers\u0026rdquo;, and add your own Google Home device account email here. You can then switch to your Google Home account and use the opt-in link received on the invitation email to accept the invite.\n  Make an Alpha Deployment   When it\u0026rsquo;s ready, click on \u0026ldquo;Create a release\u0026rdquo;, and wait it to complete. It can take a few minutes.\nCongrats! You\u0026rsquo;ve just developed and deployed your first Google Home app in 10 minutes! Try say to your Google Home: \u0026ldquo;Hey Google, Talk to your_app_name_here\u0026rdquo; and see what happens :)\nComments  var remark_config = { host: \"https://api.davidxiao.me:8964/remark42\", site_id: 'davidxiao', components: ['embed'], url: \"https://davidxiao.me/post/building-your-first-app-on-google-home/\", max_shown_comments: 10, theme: 'dark', locale: 'en' }; (function(c) { for(var i = 0; i ","date":1590451200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590451200,"objectID":"568466a0369b7a28c2719b3586e50773","permalink":"https://davidxiao.me/post/building-your-first-app-on-google-home/","publishdate":"2020-05-26T00:00:00Z","relpermalink":"/post/building-your-first-app-on-google-home/","section":"post","summary":"Build and deploy a voice-activated app on Google Home in 10 minutes. It responds to your commands and plays personalized music if you ask! Not a bad way to play on someone's birthday, eh? :-)","tags":["cloud","GCP","Google-Home","coding"],"title":"Building Your First App on Google Home in 10 minutes","type":"post"},{"authors":null,"categories":null,"content":"Last Updated: May 26, 2020\nThis Privacy Policy (\u0026ldquo;Policy\u0026rdquo;) outlines the personal information handling practices on main site davidxiao.me and mirror site davxiao.github.io (\u0026ldquo;this site\u0026rdquo;, \u0026ldquo;I,\u0026quot;, \u0026ldquo;me,\u0026rdquo; and \u0026ldquo;my\u0026rdquo;).\nBefore you post any comments on this site, please carefully review this Privacy Policy. By posting comments on this site, you understand that your information will be collected, used, and disclosed as outlined in this Privacy Policy.\nIF YOU DO NOT AGREE TO THIS PRIVACY POLICY, PLEASE DO NOT POST ANY COMMENTS ON THIS SITE.\nTypes and Uses of Personal Information If you are browsing this site but not posting any comments on this site, no personal information is collected.\nHowever, if you wish to post comments on this site, you would first need to complete Social Login on this site with one of the following Identity Providers: Google, Twitter, Facebook, Github.\nYour name, language preference, and profile pictures will be shared with this site\u0026rsquo;s comment engine by the identity provider upon completion of the social login.\nComment Engine I use Remark42 as this site\u0026rsquo;s comment engine. It is open source and privacy focused. It saves the minimum amount of information required to be able to show comments. Such information includes name, avatar (to be shown with comment message) and your id in service you used to login (to understand it\u0026rsquo;s still you when you log in next time). Id is hashed, there\u0026rsquo;s no easy way for me to identify the profile you used for login.\nFind more details about Remark42\u0026rsquo;s privacy in here and be sure to check its source code in case you have further questions.\nAggregate Information (non-personally identifiable) This site uses Google Analytics to collect aggregated information including browser information and site traffic statistics. Find more detail about Google Analytics privacy information here.\nThis site does not use any Web Banner or Online advertising.\nCookies A cookie is a small text file that is stored on a user\u0026rsquo;s computer for record-keeping purposes.\nThis website uses cookies to work properly. Cookies are small pieces of information your browser sends to server with every request. Here\u0026rsquo;s the list of cookies used on this website:\n Google Analytics uses cookies for its analytics purposes. When logging in to post a comment, comment engine requests two cookies: one to determine it\u0026rsquo;s still you; the other one is added as an information security measure against Cross-site request forgery.  If you reject cookies, you may still visit this site, but your ability to use some areas of this site, such as comments, will require logging in.\nLinks to Other Sites This site contains links to other sites that are not owned or controlled by davidxiao.me. Please be aware that I am not responsible for the privacy practices of such other sites. This privacy statement applies only to information collected by this site.\nChanges in This Privacy Statement If this privacy policy needs to be updated, the updated version will be posted to this privacy statement, the homepage, and other places I deem appropriate.\nQuestions If you have any questions about this Privacy Policy, you can contact me at: root@davidxiao.me\n ","date":1590451200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590451200,"objectID":"18d05a63a1c8d7ed973cc51838494e41","permalink":"https://davidxiao.me/privacy/","publishdate":"2020-05-26T00:00:00Z","relpermalink":"/privacy/","section":"","summary":"Last Updated: May 26, 2020\nThis Privacy Policy (\u0026ldquo;Policy\u0026rdquo;) outlines the personal information handling practices on main site davidxiao.me and mirror site davxiao.github.io (\u0026ldquo;this site\u0026rdquo;, \u0026ldquo;I,\u0026quot;, \u0026ldquo;me,\u0026rdquo; and \u0026ldquo;my\u0026rdquo;).\nBefore you post any comments on this site, please carefully review this Privacy Policy.","tags":null,"title":"Privacy Policy","type":"page"},{"authors":["David Xiao"],"categories":["Raspberry-Pi"],"content":"A little teaser here: Raspberry Pi is not really ediable :-)\nSo I have a Raspberry Pi Zero W for about one year now.\nIt runs a few software. One of them is called Pi-Star. It\u0026rsquo;s an open source toolkit for digial voice over amateur radio. Find more detail about Pi-Star here.\nAmateur radio is one of my hobbies. Figuring out how digital voice modes work in the amateur radio world took some time for me but it was rewarding. At the end of the day, listening to hams talking about their passions from all over the world on my little handheld radio feels amazing.\nPi-Star works very well in my setup, so when I found out Pi-Star does not display my public IP address on OLED, I decided to write some code for it.\nHere\u0026rsquo;s what it looks like.\n  OLED display showing my Public IP    1. Download the Toolchain with Extra Libs and Headers I use Ubuntu 20.04 on my homelab as cross compiling platform, but any recent Linux distro should work.\nMy toolchain is a fork from the original toolchain with extra libs and headers for compiling MMDVMHost.\n$ cd ~/code $ git clone https://github.com/davxiao/tools.git  2. Code is the Easy Part \u0026lt;3 Pi-Star consists of a few components including a PHP frontend and a few programs as backend for data exchange over various digital voice networks.\nMMDVMHost is the program that interfaces to the digital voice modem (MMDVM) on one side, and a suitable network on the other. It\u0026rsquo;s written in standard C++ with dependencies to external libs such as ArduiPi_OLED.\nFor my purpose, I added some code in CNetworkinfo class and COLED class. If you don\u0026rsquo;t know much about C++, no worries, just download all source code from my github repo.\nDownload my repo:\n$ cd ~/code $ git clone https://github.com/davxiao/MMDVMHost.git  3. Prep for the Cross Compilation In MMDVMHost/cmake/CrossCompile.cmake, you wanted to update toolchain paths so that CMake will be able to generate correct Makefile afterwards.\nWhen it\u0026rsquo;s done, run:\n$ cd MMDVMHost/cmake $ cmake ../ -DCMAKE_TOOLCHAIN_FILE=./CrossCompile.cmake  If you see warnings like this, try delete CMakeCache.txt and run the cmake command again.\nCMake Warning: Manually-specified variables were not used by the project: CMAKE_TOOLCHAIN_FILE  4. Last Step When Cmake is done, a Makefile was generated under the same directory. Run the following in the same directory:\n$ make ;  When the complication is complete, you should see MMDVMHost in the cmake/ directory. You may wish to run file ./MMDVMHost to confirm the target platform is ARM as opposed to amd64. Here\u0026rsquo;s my output:\n./MMDVMHost: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-armhf.so.3, for GNU/Linux 2.6.32, with debug_info, not stripped  Congrats! You\u0026rsquo;ve built MMDVMHost using cross compilcation.\nDeployment You can skip this section if you have set up your own deployment pipeline.\nOn my homelab, I mount the same Samba share folder on both the Ubuntu and the Pi, then just copy the MMDVMHost over. Before replacing the MMDVMHost, you need to confirm the SD card is mounted in R/W mode and MMDVMHost service is stopped. Make a backup of the original MMDVMHost is also a good idea.\n$ rpi-rw ; $ sudo systemctl stop mmdvmhost ; $ sudo systemctl stop mmdvmhost.timer ; $ sudo cp ~/nas-dir/MMDVMHost.build /usr/local/bin/MMDVMHost ; $ sudo systemctl start mmdvmhost ; $ sudo systemctl start mmdvmhost.timer ;   If you experience mount error(115): Operation now in progress when mounting CIFS on Pi, it might be caused by the iptable rules set by Pi-Star.\nTo troubleshooting the issue, run the following commands on Pi-Star and see if mount works.\nNo worries, the following changes do not persist between restarts.\nsudo iptables -P INPUT ACCEPT; sudo iptables -P FORWARD ACCEPT; sudo iptables -P OUTPUT ACCEPT; sudo iptables -F; sudo iptables -X ; sudo iptables -nvL ;    Comments  var remark_config = { host: \"https://api.davidxiao.me:8964/remark42\", site_id: 'davidxiao', components: ['embed'], url: \"https://davidxiao.me/post/cross-compile-mmdvmhost-on-ubuntu/\", max_shown_comments: 10, theme: 'dark', locale: 'en' }; (function(c) { for(var i = 0; i ","date":1590364800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590364800,"objectID":"aa5e9008023e4ff275a095085263da18","permalink":"https://davidxiao.me/post/cross-compile-mmdvmhost-on-ubuntu/","publishdate":"2020-05-25T00:00:00Z","relpermalink":"/post/cross-compile-mmdvmhost-on-ubuntu/","section":"post","summary":"A quick \"How-to\" guide to compiling raspberry-pi programs on Ubuntu 20.04 using pi toolchain. This post takes Pi Zero W (BCM2708 chip) as an example but the approach would be applicable to other Pi systems.","tags":["raspberrypi","cross-compile","linux","C++","CMake"],"title":"Cross Compile MMDVMHost on Ubuntu","type":"post"},{"authors":["David Xiao"],"categories":["Site-Building"],"content":"In this post I will talk about how I built this website from the ground up using Hugo as site generator and Firebase as hosting provider. I wish you\u0026rsquo;ll find it helpful.\n Web development has come a long way. Back in the late 90\u0026rsquo;s when I first came across Internet, anyone who knows anything about HTML would be considered very technical.\nFast forward into 2020, social media and smart phone is ubiquitous, web hosting services such as Wix and Wordpress have made content creation possible for anyone who wishes to create a website without much headache.\nWhy should you building a website from the ground up as opposed to using a web hosting service?\nMaybe it\u0026rsquo;s for you Building a website with a static site generator is not for everyone. George Cushen who is Hugo theme Academic\u0026rsquo;s main contributor once put:\n \u0026hellip;(it would) require a basic understanding of using the command line in the Terminal (Mac/Linux) or Command Prompt (Windows) app on your computer. If you are not interested in this, perhaps this is not for you\u0026hellip;\n Original post\n But if going beyond content creation and learning more about building a website that is lightweight and secure, cost effective yet no vendor lock-in is your thing, then let\u0026rsquo;s dive right in.\nOverview First and foremost, let\u0026rsquo;s take a look on what will be covered in the post.\n  Register a domain name.\n  Set up Hugo as static site generator.\n  Use a kick-starter theme to get going quickly.\n  Deploy the site to Firebase.\n  Add your domain to the new site.\n  1. Register a domain name It\u0026rsquo;s pretty straightforward. You come up with a great domain name. It is better to be concise and easy to remember. Be creative \u0026lt;3.\nThen complete the domain registration on any Domain Name Registrar you prefer. I use Google Domains but there are other good choices such as Namecheap and Go Daddy.\n  Register a domain name on Google Domains   2. Setting up Hugo  Hugo is a static site generator. There are many other site generators, I picked Hugo for a few reasons:\n It\u0026rsquo;s open source and backed by an active developer team and support community. It\u0026rsquo;s a monolithic program with no external dependencies. It\u0026rsquo;s production ready.  In a nutshell, Hugo renders content into HTML files and uploads the files onto your choice of hosting provider. Your content is what you write as content creator. Hugo takes content files written in Markdown (.md), a format that is intended to be used by technical and non-technical writers alike. Since inception, Markdown has become the de facto format in content creation and blogging.\nIf you need to learn about Markdown syntax, there are good guides such as Markdown Guide.\nInstalling Hugo On macOS, I recommend using a package manager such as Homebrew to manage third-party packages. With Homebrew installed, to install Hugo, just run:\n$ brew install hugo ;  All set. In case you need to check which Hugo version is installed, run hugo version. On my mac it returns Hugo Static Site Generator v0.70.0/extended darwin/amd64\nFor installing Hugo on Windows or Linux, refer to Hugo\u0026rsquo;s documentation.\n3. Use a kick-starter theme Hugo has built-in theme mechanism that allows developers to quickly run a theme and see the results. It also provides all the necessary building blocks for user to personalize the theme. There are many themes available on Hugo, for my own website I use Academic Theme. It also comes with a academic-kickstart repo on github for teasers.\nThe easy way to get started is to just fork the repo, download the code and run it.\n  Fork the kickstart into your own repo   Download the code:\n$ git clone \u0026lt;replace-it-with-your-own-repo-url\u0026gt; ; $ cd \u0026lt;your-repo-root-dir\u0026gt; ; $ git submodule update --init --recursive ; # get the latest Academic theme  Run Hugo to serve the test site:\n$ hugo server -D ;  Now visit http://127.0.0.1:1313/ on your web browser and you should see the homepage.\nCongrats! You\u0026rsquo;ve got your first Hugo website up and running on your local environment!\n Hugo only binds to local network address for security by default. If you need to test the site on another computer in your local network, run:\n$ hugo server -D --bind=0.0.0.0 ;    4. Deploy the new site to Firebase There are many out there: Google Firebase, GitHub Pages, Netlify and AWS Amplify to name a few. Each one has its own offering. I picked Firebase as my hosting provider because they seem to offer a bit more on their free tier.\nFirst, install Firebase CLI and (optional) Google Cloud SDK CLI.\n  Firebase CLI. The recommended way is to run npm i -g firebase-tools ; See its github repo for more detail. If you don\u0026rsquo;t have npm installed yet, run: brew install node ;. npm will be installed alongside node.js.\n  Google Cloud SDK CLI. Run brew cask install google-cloud-sdk ;\n  Next, go to Firebase to set up an account and create a new Firebase project. Make sure it uses the default free tier plan which is called Spark. Be noted you need to specify GCP resource location under Project Overview in Firebase Dashboard after project is created. The location can not be changed afterwards, so choose something close to you would be wise.\n  Specify resource location under Project Overview in Firebase Dashboard   Set up service account authenication on Firebase Authenticating with a service account allows you to use Firebase CLI to manage your Firebase project. Google has provided a step by step guide here.\nWhen authentication is set up, go to your project root directory and follow the recorded screens below to initialize firebase and deploy the very first version of your site onto firebase.\n Congratulations! Your website is online! You should find your Hosting URL at the end of the Firebase deploy output, it\u0026rsquo;s typically something like: https://your-project-id.web.app\n5. Add your domain to the new site Go to Hosting on Firebase, click on \u0026ldquo;Add custom domain\u0026rdquo;. Typically you wanted to add your root domain name and a sub domain name such as \u0026ldquo;www\u0026rdquo;. For example, I added \u0026ldquo;davidxiao.me\u0026rdquo; for my website and added another entry for redirecting www.davidxiao.me to davidxiao.me\nWhen it\u0026rsquo;s complete, you will be able to visit your website by your custom domain regsitered on step 1.\n  Add custom domain to your website   Comments  var remark_config = { host: \"https://api.davidxiao.me:8964/remark42\", site_id: 'davidxiao', components: ['embed'], url: \"https://davidxiao.me/post/building-a-website-in-2020/\", max_shown_comments: 10, theme: 'dark', locale: 'en' }; (function(c) { for(var i = 0; i ","date":1586995200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586995200,"objectID":"e68706bd91a6931f00b0ba34bb78d1e0","permalink":"https://davidxiao.me/post/building-a-website-in-2020/","publishdate":"2020-04-16T00:00:00Z","relpermalink":"/post/building-a-website-in-2020/","section":"post","summary":"If you are interested in building a personal blog site in a cost efficent way, this post discusses about creating a website from the ground up with minimal vendor dependency and high levels of autonomy using Hugo and Firebase.","tags":["Hugo","Firebase","Markdown","Website"],"title":"Building a website in 2020","type":"post"},{"authors":[],"categories":[],"content":"","date":1585699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585699200,"objectID":"ee0bc639306b982f76fe73369383b2ef","permalink":"https://davidxiao.me/post/adding-your-own-commenting-system-to-a-static-site/","publishdate":"2020-04-01T00:00:00Z","relpermalink":"/post/adding-your-own-commenting-system-to-a-static-site/","section":"post","summary":"","tags":[],"title":"Adding Your Own Commenting System to a Static Site","type":"post"}]