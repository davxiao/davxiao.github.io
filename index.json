[{"authors":["david-xiao"],"categories":null,"content":"My interests include cybersecurity and public cloud such as AWS.\nOutside of work, I enjoy outdoor activies and working on my Private Pilot License when I can have time.\n","date":1602547200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1602547200,"objectID":"3cd11a3614f5641f8703d8da70c09029","permalink":"https://davidxiao.me/author/david-xiao/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/david-xiao/","section":"authors","summary":"My interests include cybersecurity and public cloud such as AWS.\nOutside of work, I enjoy outdoor activies and working on my Private Pilot License when I can have time.","tags":null,"title":"David Xiao","type":"authors"},{"authors":["David Xiao"],"categories":["CyberSecurity"],"content":"TL;DR\nOWASP Top 10 Web Application Security Risks is a security project commonly referenced in web security and application security space.\nThe following table provides a quick summary of what are the Top 10 and how easy and effective to mitigate them using WAF (web application firewall).\n😈 effective\n🤔 possible with some considerations\n😨 not considered broadly effective or as a primary mitigation\n   ID OWASP Item Mitigate with WAF     1 Injection 😈   2 Broken Authentication 😨   3 Sensitive Data Exposure 😨   4 XML External Entities XXE 😈   5 Broken Access Control 🤔   6 Security Misconfiguration 🤔   7 Cross-Site Scripting XSS 😈   8 Insecure Deserialization 🤔   9 Using Components with Known Vulnerabilities 😨   10 Insufficient Logging \u0026amp; Monitoring 😨    1. Injection Most common form is SQL injection. There are other forms of injection such as OS and LDAP injection. The attacker’s hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization.\nWAF: It is usually effective in matching and mitigating such attacks.\n2. Broken Authentication To obtain these credentials, attackers either relying on vulnerabilities in the way client-server communication is implemented or targeting how tokens are generated, stored, transferred or invalidated by the application.\nAttackers then use the credentials to impersonate legitimate users and make requests to your web applications using those tokens.\nWAF is hard to mitigate this type of attacks in general. You might be able to add compromised or stolen tokens to a blacklist WAF rule.\n3. Sensitive Data Exposure Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser.\nWAF is typically hard to mitigate such kind of risks. For example, data has been decrypted from the connection level for WAF inspection so WAF has no impact on enforcing encryption hygiene.\n4. XML External Entities (XXE) Many older or poorly configured XML processors evaluate external entity references within XML documents. External entities can be used to disclose internal files using the file URI handler, internal file shares, internal port scanning, remote code execution, and denial of service attacks.\nWAF can be helpful in mitigating this type of risk as long as the entity references can be matched as pattern.\n5. Broken Access Control It allows internal objects to be manipulated without the requestor’s access permissions being properly validated.\nDepending on the specific workload, this can lead to exposure of unauthorized data, manipulation of internal web application state, path traversal, and local file inclusion.\nWAF can be effective against certain types of such attack by matching dangerous HTTP request patterns that can indicate path traversal attempts, or remote and local file inclusion.\nFor example:\nhttps://example.com/download.php?file=..%2F..%2Fetc%2Fpasswd 6. Security Misconfiguration This is commonly a result of insecure default configurations or enabling verbose error messages containing sensitive information.\nTo mitigate the risk, operating systems, frameworks, libraries and applications be securely configured and stay up-to-date in a timely fashion.\nFor example:\nLeaving default directory listings enabled on production web servers. This allows malicious users to browse for files that are hosted by the web server. WAF can be leveraged to mitigate attempts as long as the HTTP request patterns that attempt to exploit them are recognizable.\nThese patterns, however, are also application-stack specific. They depend on the operating system, web server, frameworks, or the programming languages your code uses.\n7. Cross-Site Scripting XSS XSS flaws occur whenever an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript.\nAttackers leverage this flow to execute scripts in the victim’s browser which can retrieve user cookies or redirect the user to malicious sites.\nStored XSS Attacks\naka Persistent XSS. The injected script is permanently stored on the target server such as database or a comment field on a web page etc. The victim retrieves the malicious script when it visits the web page.\nReflected XSS Attacks\n   aka Non-Persistent XSS. The injected script is reflected back to the same visitor via various forms such as in an error message, search result, or any other response when server response includes some or all of the input sent to the server as part of the request.\nFor example, when username bob log on failed, a vulnerable server produces error message that includes bob without proper escaping and safety checks.\nAn attacker can validate if a target website is vulnerable by constructing a deliberating input as username that includes executable JS code in \u0026lt;script\u0026gt;...\u0026lt;/script\u0026gt; code block and attempting to submit it on the web site. If the JS code can be reflected back to the same visitor\u0026rsquo;s browser and got executed, the validation is successful.\nCombined with the delivery technique discussed in the next paragraphs, attacker would be able to exploit this vulnerability and pull off an attack.\nReflected attacks are delivered to victims via another means such as in a phishing e-mail. When a user is tricked into clicking on a malicious link from the email, it submits a specially crafted form with some JS code to obtain sensitive such as document.cookie to a website such as a online bank website that has XSS vulnerability.\nThe injected JS code travels to the vulnerable bank website, which in turn reflects the JS code back to the user’s browser as part of the HTML. The browser will execute the JS code and allow it to obtain the cookie because the JS appears to come from the same origin.\nFrom OWASP:\n XSS flaws can be difficult to identify and remove from a web application. The best way to find flaws is to perform a security review of the code and search for all places where input from an HTTP request could possibly make its way into the HTML output.\n WAF is relatively easy to mitigate this type of attack in common scenarios because they require specific key HTML tag names in the HTTP request.\n8. Insecure Deserialization Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not result in remote code execution, they can be used to perform attacks, including replay attacks, injection attacks, and privilege escalation attacks.\nWAF is relatively effective in mitigating this type of attacks but there are some considerations:\n  It would require creating custom rules to match known patterns. These patterns are application specific and require more in-depth knowledge of those applications.\n  Take into account the limits the service imposes on such rules.\n  9. Using Components with Known Vulnerabilities Components, such as libraries, frameworks, and other software modules, run with the same privileges as the application. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications and APIs using components with known vulnerabilities may undermine application defenses and enable various attacks and impacts.\nWAF is not considered the primary mitigating control for such risks. As secondary control, one can use WAF to filter and block HTTP requests to functionality of such components that you aren’t using in your applications. This helps reduce the attack surface of those components.\n10. Insufficient Logging \u0026amp; Monitoring Insufficient logging and monitoring, coupled with missing or ineffective integration with incident response, allows attackers to further attack systems, maintain persistence, pivot to more systems, and tamper, extract, or destroy data. Most breach studies show time to detect a breach is over 200 days, typically detected by external parties rather than internal processes or monitoring.\nWAF is not considered the primary mitigating control for such risks. WAF can be produce its own logs for further consumption and analysis.\n","date":1602547200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602547200,"objectID":"746d7bb2adad36303383b6b8a566b6e4","permalink":"https://davidxiao.me/post/owasp-top-ten/","publishdate":"2020-10-13T00:00:00Z","relpermalink":"/post/owasp-top-ten/","section":"post","summary":"The OWASP Top 10 represents a broad consensus about the most common and critical security risks to web applications. It can be used as reference for web application security.","tags":["owasp","applicationsecurity"],"title":"OWASP Top Ten","type":"post"},{"authors":null,"categories":null,"content":"Last Updated: Oct 13, 2020\nThis Privacy Policy (\u0026ldquo;Policy\u0026rdquo;) outlines the personal information handling practices on the main site davidxiao.me and the mirror site davxiao.github.io (\u0026ldquo;this site\u0026rdquo;, \u0026ldquo;I,\u0026rdquo;, \u0026ldquo;me,\u0026rdquo; and \u0026ldquo;my\u0026rdquo;).\nBefore you post any comments on this site, please carefully review this Privacy Policy. By posting comments on this site, you understand that your information will be collected, used, and disclosed as outlined in this Privacy Policy.\nIF YOU DO NOT AGREE TO THIS PRIVACY POLICY, PLEASE DO NOT POST ANY COMMENTS ON THIS SITE.\nTypes and Uses of Personal Information If you are browsing this site but not posting any comments on this site, no personal information is collected.\nHowever, if you wish to post comments on this site, you would first need to complete Social Login on this site with one of the following Identity Providers: Google, Twitter, Facebook, Github.\nYour name, language preference, and profile pictures will be shared with this site\u0026rsquo;s comment engine by the identity provider upon completion of the social login.\nComment Engine I use Remark42 as this site\u0026rsquo;s comment engine. It is open source and privacy focused. It saves the minimum amount of information required to be able to show comments. Such information includes name, avatar (to be shown with comment message) and your id in service you used to login (to understand it\u0026rsquo;s still you when you log in next time). Id is hashed, there\u0026rsquo;s no easy way for me to identify the profile you used for login.\nFind more details about Remark42\u0026rsquo;s privacy in here and be sure to check its source code in case you have further questions.\nAggregate Information (non-personally identifiable) This site uses Google Analytics to collect aggregated information including browser information and site traffic statistics. Find more detail about Google Analytics privacy information here.\nThis site does not use any Web Banner or Online advertising.\nCookies A cookie is a small text file that is stored on a user\u0026rsquo;s computer for record-keeping purposes.\nThis website uses cookies to work properly. Cookies are small pieces of information your browser sends to server with every request. Here\u0026rsquo;s the list of cookies used on this website:\n Google Analytics uses cookies for its analytics purposes. When logging in to post a comment, comment engine requests two cookies: one to determine it\u0026rsquo;s still you; the other one is added as an information security measure against Cross-site request forgery.  If you reject cookies, you may still visit this site, but your ability to use some areas of this site, such as comments, will require logging in.\nLinks to Other Sites This site contains links to other sites that are not owned or controlled by davidxiao.me. Please be aware that I am not responsible for the privacy practices of such other sites. This privacy statement applies only to information collected by this site.\nChanges in This Privacy Statement If this privacy policy needs to be updated, the updated version will be posted to this privacy statement, the homepage, and other places I deem appropriate.\nQuestions If you have any questions about the Privacy Policy, you can reach out to me at root@davidxiao.me\n ","date":1602547200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602547200,"objectID":"18d05a63a1c8d7ed973cc51838494e41","permalink":"https://davidxiao.me/privacy/","publishdate":"2020-10-13T00:00:00Z","relpermalink":"/privacy/","section":"","summary":"Last Updated: Oct 13, 2020\nThis Privacy Policy (\u0026ldquo;Policy\u0026rdquo;) outlines the personal information handling practices on the main site davidxiao.me and the mirror site davxiao.github.io (\u0026ldquo;this site\u0026rdquo;, \u0026ldquo;I,\u0026rdquo;, \u0026ldquo;me,\u0026rdquo; and \u0026ldquo;my\u0026rdquo;).","tags":null,"title":"Privacy Policy","type":"page"},{"authors":["David Xiao"],"categories":["Encryption","CyberSecurity"],"content":"   Step by Step   Alice and Bob agree publicly on a prime modulus 17, and a generator 3\n  Alice selects a private random number 15\n  Alice calculates 3^15 mod 17 (three to the power fifteen mod seventeen), sends the result 6 publicly to Bob\n  Bob selects a private random number 13\n  Bob calculates 3^13 mod 17, sends the result 12 publicly to Alice\n  Alice takes Bob\u0026rsquo;s public result and raise it to the power of her own private number and mod it, i.e. calculates 12^15 mod 17, the result is 10\n  Bob does the same procedure as Alice, i.e. calculates 6^13 mod 17, the result is 10 (the same)\n  An analysis of how calculation in step 6 and step 7 are done shows that either side actually did the same calculation with the exponents in a different order. In mathematics, when you flip the exponent, the result doesn\u0026rsquo;t change.\n    Exponents in a different order   ","date":1602460800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602460800,"objectID":"4b12c0f7ce4372a85dcfa67dc4d2c3d3","permalink":"https://davidxiao.me/post/diffie-hellman-key-exchange-in-a-nutshell/","publishdate":"2020-10-12T00:00:00Z","relpermalink":"/post/diffie-hellman-key-exchange-in-a-nutshell/","section":"post","summary":"DH key exchange is a critical component in virtually every PKI implementation. Having a working knowledge of what it is and how it works would help in understanding PKI as a whole.","tags":["diffiehellman","keyexchange"],"title":"Diffie-Hellman Key Exchange in a Nutshell","type":"post"},{"authors":["David Xiao"],"categories":["CyberSecurity"],"content":"TL;DR\nWhen TLS mutual authentication is put in place between controller node and work nodes in a cluster setting, it\u0026rsquo;s not uncommon to see client certificates signed by either self-signed CA or private CA.\nThis post covers how to generate a self-signed root CA and to sign a client certificate using openssl. In cases when private CA is employed instead, the client certificate signing portion is still relevant.\n The configuration described in this post is for testing only. It is NOT secure for production use.   Self-signed CA Certificate Before we start, let\u0026rsquo;s create a root directory called tls-cert.\nUnder the root directory, we create a sub directory and some files:\n[tls-cert] mkdir ca [tls-cert] mkdir ca/ca.db.certs [tls-cert] touch ca/ca.db.index [tls-cert] echo \u0026#34;123456\u0026#34; \u0026gt; ca/ca.db.serial Next step is to generate a CA key: in this example it\u0026rsquo;s 2048-bit RSA:\n[tls-cert] openssl genrsa -out ca/ca.key 2048 Next is to create a self-signed X509 certificate out of the CA key. The client keys will be signed with it later.\n[tls-cert] openssl req -new -x509 -days 365 -key ca/ca.key -out ca/ca.crt You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter \u0026#39;.\u0026#39;, the field will be left blank. ----- Country Name (2 letter code) []:. State or Province Name (full name) []:. Locality Name (eg, city) []:. Organization Name (eg, company) []:ca-org-name Organizational Unit Name (eg, section) []:ca-orgunit-name Common Name (eg, fully qualified host name) []:ca-common-name Email Address []:admin@ca.com [tls-cert] Client certificate Now that we\u0026rsquo;ve generated CA certificate, it\u0026rsquo;s time to generate a private key for the client and create a CSR (Certificate Signing Request)for the key:\n[tls-cert] openssl req -new -newkey rsa:2048 -nodes -keyout client.key -out client-key-sign-req.pem Generating a 2048 bit RSA private key ...................................................................................................+++ ........+++ writing new private key to \u0026#39;client.key\u0026#39; ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter \u0026#39;.\u0026#39;, the field will be left blank. ----- Country Name (2 letter code) []:. State or Province Name (full name) []:. Locality Name (eg, city) []:. Organization Name (eg, company) []:client-org-name Organizational Unit Name (eg, section) []:client-orgunit-name Common Name (eg, fully qualified host name) []:client-common-name Email Address []:admin@client.com Please enter the following \u0026#39;extra\u0026#39; attributes to be sent with your certificate request A challenge password []: [tls-cert] openssl needs to know a few parameters in order to sign the CSR. Let\u0026rsquo;s put all the parameters into a file and save it as ca.conf:\n With that sorted out, the last step is to sign the CSR file client-key-sign-req.pem:\n[tls-cert] openssl ca -config ca.conf -out client-certificate.pem.crt -infiles client-key-sign-req.pem Using configuration from ca.conf Check that the request matches the signature Signature ok The Subject\u0026#39;s Distinguished Name is as follows organizationName :ASN.1 12:\u0026#39;client-org-name\u0026#39; organizationalUnitName:ASN.1 12:\u0026#39;client-orgunit-name\u0026#39; commonName :ASN.1 12:\u0026#39;client-common-name\u0026#39; emailAddress :IA5STRING:\u0026#39;admin@client.com\u0026#39; Certificate is to be certified until Oct 11 02:08:05 2021 GMT (365 days) Sign the certificate? [y/n]:y 1 out of 1 certificate requests certified, commit? [y/n]y Write out database with 1 new entries Data Base Updated [tls-cert] Conclusion We\u0026rsquo;ve produced the following files in this example:\nca/ca.key: private key of the self-signed root CA. It must be kept secret at all times.\nca/ca.crt: CA certificate of the root CA. It should be made available to whichever party that needs to verify the certificates that were signed by the root CA.\nclient.key: private key of the client certificate. It must be kept secret except during the client authentication process.\nclient-certificate.pem.crt: CA certificate of the client. It should be made available to whichever party that needs to verify the identity of the client.\n","date":1602288000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602288000,"objectID":"75e07f0814a5d3d3a36b718f19bbe67d","permalink":"https://davidxiao.me/post/sign-client-certificate-using-self-signed-ca-certificate/","publishdate":"2020-10-10T00:00:00Z","relpermalink":"/post/sign-client-certificate-using-self-signed-ca-certificate/","section":"post","summary":"In a cluster setting where TLS mutual authentication is required, it's not uncommon to see client certificates signed by either self-signed root CA or private CA.","tags":["tls","digitalcertificate","x509","selfsign"],"title":"Sign Client Certificate Using Self Signed CA Certificate","type":"post"},{"authors":["David Xiao"],"categories":["Python"],"content":"TLDR;\nThis post is my collection of python3 code snippets. It comes in handy when manipulating string and list.\nsingle or double quoted string In Python, such sequence of characters is included inside single or double quotes. There is no difference in single or double quoted string. Both can be used interchangeably.\nRemove a few elements from the beginning Slice out the first 2 elements and return the rest.\ns = \u0026#39;abcdef\u0026#39; res = s[2:] # res = \u0026#39;cdef\u0026#39; Remove a few elements from the end Slice out the last 3 elements and return the rest.\ns = \u0026#39;abcdef\u0026#39; res = s[:-3] # res = \u0026#39;abc\u0026#39; Retrieve the first few elements only s = \u0026#39;abcdef\u0026#39; res = s[:3] # res = \u0026#39;abc\u0026#39; Retrieve the last few elements only s = \u0026#39;abcdef\u0026#39; res = s[-3:] # res = \u0026#39;def\u0026#39; Retrieve elements from the middle s = \u0026#39;0123456789\u0026#39; res = s[3:7] # res = \u0026#39;3456\u0026#39; Remove single element by zero-index Remove \u0026rsquo;d\u0026rsquo; by its index: 3\n If one-based position is given instead of zero-based index, convert from position to index. e.g. index = position - 1\n s = \u0026#39;abcdef\u0026#39; res = s[:3]+s[4:] # res = \u0026#39;abcef\u0026#39; Remove multiple elements by zero-index Remove 4 element by its index starting from index 3\ns = [\u0026#39;0123456789\u0026#39;] start_index = 3 to_cut = 4 res = s[:start_index]+s[start_index+to_cut:] # res = \u0026#39;012789\u0026#39; # zero-index 4 to 7 are removed Remove/Replace element by value string version\ns = \u0026#39;abcdef\u0026#39; res = s.replace(\u0026#39;c\u0026#39;, \u0026#39;w\u0026#39;) # replace \u0026#39;c\u0026#39; with \u0026#39;w\u0026#39; # res = \u0026#39;abwdef\u0026#39; list version\ns = [\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,\u0026#39;c\u0026#39;,\u0026#39;d\u0026#39;,\u0026#39;e\u0026#39;,\u0026#39;f\u0026#39;] res = s try: pos = res.index(\u0026#39;c\u0026#39;) except: pos = -1 if (pos != -1): res.pop(pos) #remove \u0026#39;c\u0026#39; res.insert(pos, \u0026#39;w\u0026#39;) #replace with \u0026#39;w\u0026#39; # res = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;w\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;] convert string to list character-wise s = \u0026#39;abcdef\u0026#39; res=[] res[:0]=s # res = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;] convert list to string s = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;] res = \u0026#39;\u0026#39;.join(s) # res = \u0026#39;abcdef\u0026#39; Split string into word list s = \u0026#39;welcome to the jungle\u0026#39; res = s.split() # res = [\u0026#39;welcome\u0026#39;, \u0026#39;to\u0026#39;, \u0026#39;the\u0026#39;, \u0026#39;jungle\u0026#39;] Join words into a string with whitespace s = [\u0026#39;welcome\u0026#39;, \u0026#39;to\u0026#39;, \u0026#39;the\u0026#39;, \u0026#39;jungle\u0026#39;] res = \u0026#39; \u0026#39;.join(s) # res = \u0026#39;welcome to the jungle\u0026#39; iterate list items to generate a new list s = [\u0026#39;welcome\u0026#39;, \u0026#39;to\u0026#39;, \u0026#39;the\u0026#39;, \u0026#39;jungle\u0026#39;] res = [x*2 for x in s] #res = [\u0026#39;welcomewelcome\u0026#39;, \u0026#39;toto\u0026#39;, \u0026#39;thethe\u0026#39;, \u0026#39;junglejungle\u0026#39;] swap case of a string (uppercase to lowercase and vice versa)  python provides a string function that does exactly that:\nres = s.swapcase()\n def swapcase(c): if c.isupper(): return c.lower() if c.islower(): return c.upper() return c s = \u0026#39;Welcome To The Jungle\u0026#39; res = [swapcase(x) for x in s] res = \u0026#39;\u0026#39;.join(res) # res = \u0026#39;wELCOME tO tHE jUNGLE\u0026#39; produce list or string in reverse order both string and list\ns = [\u0026#39;welcome\u0026#39;, \u0026#39;to\u0026#39;, \u0026#39;the\u0026#39;, \u0026#39;jungle\u0026#39;] res = s[::-1] # res = [\u0026#39;jungle\u0026#39;, \u0026#39;the\u0026#39;, \u0026#39;to\u0026#39;, \u0026#39;welcome\u0026#39;] find all occurances in a string s = \u0026#39;welcome to to the jungle\u0026#39; find_s = \u0026#39;to\u0026#39; find_len = len(find_s) pointer = 0 while True: index = s.find(find_s,pointer) if index == -1: break print(\u0026#39;found at index \u0026#39;, index) pointer += index pointer += find_len # found at index 8 # found at index 11 replace all occurances in a string s = \u0026#39;welcome to to the jungle\u0026#39; find_s = \u0026#39;to\u0026#39; replace_s = \u0026#39;what\u0026#39; res = s.replace(find_s, replace_s) # res = \u0026#39;welcome what what the jungle\u0026#39; detect duplicate items in a list method 1: loop\ndef has_dup(lst): flag = 0 for i in range (len(lst)): for j in range (i+1,len(lst)): if (lst[i] == lst[j]): flag = 1 if (flag == 1): return True else: return False l=[1, 2, 3, 4, 5, 6] print(has_dup(l)) # False method 2: create a temp set\nset is a series of hashable objects, in a way it\u0026rsquo;s like dict but the main difference between the two is that a dict item contains both key and value while a set item contains only key.\ns = [1,2,3,1,5,1] res = set(s) if (len(s) == len(res)): print(\u0026#39;no duplicates found\u0026#39;) else: print(\u0026#39;duplicates found\u0026#39;) # duplicates found remove duplicate words in a string def unique_list(l): ulist = [] [ulist.append(x) for x in l if x not in ulist] return ulist s = \u0026#39;calvin klein design dress calvin klein\u0026#39; res = \u0026#39; \u0026#39;.join(unique_list(s.split())) # res = \u0026#39;calvin klein design dress\u0026#39; ROT13-like conversion over a string Be aware ASCII code can be outside of printable range.\ns = \u0026#39;This is a plaintext message\u0026#39; offset = 1 res = \u0026#39;\u0026#39;.join([chr(ord(c)+offset) for c in s]) # res = \u0026#39;Uijt!jt!b!qmbjoufyu!nfttbhf\u0026#39; Use regex to split complicated string into words Compared to string.split() method, regex approach preserves separators in the result so that it\u0026rsquo;s possible to re-construct the original string from the result.\nimport re s = \u0026#39;Words, words, words. \u0026#39; res=re.split(\u0026#39;([,. ]+)\u0026#39;, s) # \u0026#39;(...)\u0026#39; enables the matched separators preserved in the result list. # res = [\u0026#39;Words\u0026#39;, \u0026#39;, \u0026#39;, \u0026#39;words\u0026#39;, \u0026#39;, \u0026#39;, \u0026#39;words\u0026#39;, \u0026#39;. \u0026#39;, \u0026#39;\u0026#39;] Use regex to search a pattern import re s = \u0026#39;Welcome to the jungle...\u0026#39; match = re.search(\u0026#39;to +the +(\\w+)\u0026#39;, s) if match: res = match.group(0) # match \u0026#39;to +the +(\\w+)\u0026#39; as a whole # res = \u0026#39;to the jungle\u0026#39; res = match.group(1) # match \u0026#39;(\\w+)\u0026#39; portion # res = \u0026#39;jungle\u0026#39; else: print(\u0026#39;no match found\u0026#39;) count number of occurances of substring string.count() approach\ns = \u0026#39;jungle and jungle and another jungle...\u0026#39; res = s.count(\u0026#39;jungle\u0026#39;)) # res = 3 regular expression approach\nimport re s = \u0026#39;Welcome to the jungle. It is a big jungle with many animals. Lion is the king of the jungle.\u0026#39; match = re.findall(\u0026#39;jungle\u0026#39;, s) if match: res = len(match) # return a list of string else: print(\u0026#39;no match found\u0026#39;) escape string into html text For HTML, it needs to escape the following:\n  \u0026lt; to \u0026amp;lt;\n  \u0026gt; to \u0026amp;gt;\n  \u0026amp; to \u0026amp;amp;\n  s = \u0026#39;escape html string \u0026lt;body\u0026gt;\u0026amp;\u0026lt;/body\u0026gt;\u0026#39; res = s.replace(\u0026#39;\u0026amp;\u0026#39;, \u0026#39;\u0026amp;amp;\u0026#39;).replace(\u0026#39;\u0026gt;\u0026#39;, \u0026#39;\u0026amp;gt;\u0026#39;).replace(\u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026amp;lt;\u0026#39;) # res = \u0026#39;escape html string \u0026amp;lt;body\u0026amp;gt;\u0026amp;amp;\u0026amp;lt;/body\u0026amp;gt;\u0026#39; Use global variable maxlen = 0 def wordlength(x): global maxlen # to access global variable within a function if len(x) \u0026gt; maxlen: maxlen = len(x) s = \u0026#39;unsafe html string \u0026lt;body\u0026gt;\u0026amp;\u0026lt;/body\u0026gt;\u0026#39; words = s.split() [wordlength(x) for x in words] # maxlen = 14 get both index and value when looping a list for both string and list\ns = \u0026#39;abcdef\u0026#39; for i, value in enumerate(s): print (\u0026#34;index \u0026#34;, i, \u0026#34;value \u0026#34;, value) create a list of empty items res = [None]*4 # res = [None, None, None, None] # Note this is different res = [\u0026#39;\u0026#39;]*4 # res = [\u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;] determine if a list is sorted s = [1,2,3,4,5,6] if (s == sorted(s)): print(\u0026#34;sorted\u0026#34;) else: print(\u0026#34;not sorted\u0026#34;) looping a dict ages = { \u0026#34;Peter\u0026#34;: 10, \u0026#34;Isabel\u0026#34;: 11, \u0026#34;Anna\u0026#34;: 9, \u0026#34;Thomas\u0026#34;: 10, \u0026#34;Bob\u0026#34;: 10, \u0026#34;Joseph\u0026#34;: 11, \u0026#34;Maria\u0026#34;: 12, \u0026#34;Gabriel\u0026#34;: 10, } # loop to get all keys for x in ages: print(x) # loop to get all value for x in ages: print(ages[x]) # loop to get both keys and values for name, age in ages.items(): print(name, age) nested dict students = { \u0026#34;Peter\u0026#34;: {\u0026#34;age\u0026#34;: 10, \u0026#34;address\u0026#34;: \u0026#34;Lisbon\u0026#34;}, \u0026#34;Isabel\u0026#34;: {\u0026#34;age\u0026#34;: 11, \u0026#34;address\u0026#34;: \u0026#34;Sesimbra\u0026#34;}, \u0026#34;Anna\u0026#34;: {\u0026#34;age\u0026#34;: 9, \u0026#34;address\u0026#34;: \u0026#34;Lisbon\u0026#34;}, } for p_id, p_info in students.items(): print(\u0026#34;\\nPerson Name:\u0026#34;, p_id) for key in p_info: print(key + \u0026#39;:\u0026#39;, p_info[key]) find the max value in a dict and return the key ages = { \u0026#34;Peter\u0026#34;: 10, \u0026#34;Isabel\u0026#34;: 11, \u0026#34;Anna\u0026#34;: 9, \u0026#34;Thomas\u0026#34;: 10, \u0026#34;Bob\u0026#34;: 10, \u0026#34;Joseph\u0026#34;: 11, \u0026#34;Maria\u0026#34;: 12, \u0026#34;Gabriel\u0026#34;: 10, } value = list(ages.values()) key = list(ages.keys()) print (key[value.index(max(value))]) # Maria use nested list to cache multiplication results matrix = [] for i in range(10): #0-9 row = [] for j in range(10): #0-9 row.append(i*j) matrix.append(row) def multiply(x,y): try: return matrix[x][y] except: return x*y print(multiply(6,9)) # 54 print(multiply(66,99)) # 6534 ","date":1601596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601596800,"objectID":"52b7ac49394fdb640af31f6d096f964d","permalink":"https://davidxiao.me/post/python3-cheatsheet/","publishdate":"2020-10-02T00:00:00Z","relpermalink":"/post/python3-cheatsheet/","section":"post","summary":"This post is my collection of python3 code snippets including string and list manipulation.","tags":["python","cheatsheet"],"title":"Python3 CheatSheet","type":"post"},{"authors":["David Xiao"],"categories":[],"content":"Overview When auditing system events or performing an investigation to understand what happened, it is imperative to identify the IAM principal, to establish traceability and timelines.\nIn context of AWS CloudTrail, it means looking up events pertaining to the IAM principal and actions in question as well as looking for useful information inside such events.\nWhen a user assumes role cross-account in a multi-account environment, it can be done two ways: either programatically or via AWS management console.\nSince either way generates different CloudTrail events, I will disuss two examples in this post respectively.\nAssume Role Programmatically Cross-Account Assume Role via AWS Console Cross-Account A typical investigation flow that involves cross-account assumerole goes like this:\n  Step 1: Identify an event on CloudTrail that needs investigation\n  Step 2: Identify the closest AssumeRole event that happens before the event in question\n  Step 3: Locate the closest SwitchRole event that happens at the same time of AssumeRole. If found, it indicates the user session was established via AWS Console\n  Step 4: If you have access to the Identity Account, locate the AssumeRole\n  In the following example, we investigate a \u0026ldquo;suspicious\u0026rdquo; CreateUser event.\nIdentity Account: 203016562928\nIAM username: bob@example.com\nRole Account: 776613361644\nRole Name: assume-admin-role-example\nCreateUser\n{ \u0026#34;eventVersion\u0026#34;: \u0026#34;1.05\u0026#34;, \u0026#34;userIdentity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;AssumedRole\u0026#34;, \u0026#34;principalId\u0026#34;: \u0026#34;AROAJBP4A5WSXVNY72RLE:bob@example.com\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:sts::776613361644:assumed-role/assume-admin-role-example/bob@example.com\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;776613361644\u0026#34;, \u0026#34;accessKeyId\u0026#34;: \u0026#34;ASIA3JUODO7W6YEVI655\u0026#34;, \u0026#34;sessionContext\u0026#34;: { \u0026#34;sessionIssuer\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Role\u0026#34;, \u0026#34;principalId\u0026#34;: \u0026#34;AROAJBP4A5WSXVNY72RLE\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:iam::776613361644:role/assume-admin-role-example\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;776613361644\u0026#34;, \u0026#34;userName\u0026#34;: \u0026#34;assume-admin-role-example\u0026#34; }, \u0026#34;webIdFederationData\u0026#34;: {}, \u0026#34;attributes\u0026#34;: { \u0026#34;mfaAuthenticated\u0026#34;: \u0026#34;true\u0026#34;, \u0026#34;creationDate\u0026#34;: \u0026#34;2020-09-17T19:04:10Z\u0026#34; } } }, \u0026#34;eventTime\u0026#34;: \u0026#34;2020-09-17T19:05:08Z\u0026#34;, \u0026#34;eventSource\u0026#34;: \u0026#34;iam.amazonaws.com\u0026#34;, \u0026#34;eventName\u0026#34;: \u0026#34;CreateUser\u0026#34;, \u0026#34;awsRegion\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;sourceIPAddress\u0026#34;: \u0026#34;75.15.154.15\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;console.amazonaws.com\u0026#34;, \u0026#34;requestParameters\u0026#34;: { \u0026#34;userName\u0026#34;: \u0026#34;test-no-permission\u0026#34;, \u0026#34;tags\u0026#34;: [] }, \u0026#34;responseElements\u0026#34;: { \u0026#34;user\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/\u0026#34;, \u0026#34;userName\u0026#34;: \u0026#34;test-no-permission\u0026#34;, \u0026#34;userId\u0026#34;: \u0026#34;AIDA3JUODO7W7VCWFDJMM\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:iam::776613361644:user/test-no-permission\u0026#34;, \u0026#34;createDate\u0026#34;: \u0026#34;Sep 17, 2020 7:05:08 PM\u0026#34; } }, \u0026#34;requestID\u0026#34;: \u0026#34;cc58c060-fe96-4678-b0bf-b888f12bf008\u0026#34;, \u0026#34;eventID\u0026#34;: \u0026#34;38d0221b-61e0-47d6-9c45-7eb2dc55125b\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;AwsApiCall\u0026#34;, \u0026#34;recipientAccountId\u0026#34;: \u0026#34;776613361644\u0026#34; } AssumeRole\n{ \u0026#34;eventVersion\u0026#34;: \u0026#34;1.05\u0026#34;, \u0026#34;userIdentity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;AWSAccount\u0026#34;, \u0026#34;principalId\u0026#34;: \u0026#34;AIDAS6RF25DXSM2CA5KAD\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;203016562928\u0026#34; }, \u0026#34;eventTime\u0026#34;: \u0026#34;2020-09-17T19:04:10Z\u0026#34;, \u0026#34;eventSource\u0026#34;: \u0026#34;sts.amazonaws.com\u0026#34;, \u0026#34;eventName\u0026#34;: \u0026#34;AssumeRole\u0026#34;, \u0026#34;awsRegion\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;sourceIPAddress\u0026#34;: \u0026#34;AWS Internal\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;AWS Internal\u0026#34;, \u0026#34;requestParameters\u0026#34;: { \u0026#34;roleArn\u0026#34;: \u0026#34;arn:aws:iam::776613361644:role/assume-admin-role-example\u0026#34;, \u0026#34;roleSessionName\u0026#34;: \u0026#34;bob@example.com\u0026#34; }, \u0026#34;responseElements\u0026#34;: { \u0026#34;credentials\u0026#34;: { \u0026#34;accessKeyId\u0026#34;: \u0026#34;ASIA3JUODO7WTIO2PI64\u0026#34;, \u0026#34;expiration\u0026#34;: \u0026#34;Sep 17, 2020 8:04:10 PM\u0026#34;, \u0026#34;sessionToken\u0026#34;: \u0026#34;IQoJb3JpZ2luX2VjEAMaCXVzLWVhc3QtMSJIMEYCIQDsEwOWhE/9cNh+Xpg+V6r8ug3ULRnoOCPNCQhorh13xgIhAIfc+u8ttYNsjLQJRMvo7EnDXMkOAViMFuU7Mma8zjGEKqMCCBwQARoMNzc2NjEzMzYxNjQ1Igyt06eMsyzHkQJRK84qgAIF/jUW99caWE07piwWI2EGTHU2KMx6ioRz3uDbDS24GKy3XvQRalC+5YTZoOQDQvpziRmO33BEzM6Ws5TBTggo/yXGAJRQthB8IqiGkbsClbOG8cYsuhRXK3+yK8OHhCSfr0ehO2SYNiaqEClyT9n8QtEmkQawN56IiOoE9HBzTA7xxYbj7XULL/okog7D3l18NG32rxhHS1ACDN3ro9RGjrPicn9PHFfBqvK+uP3JJQVlcQZu6yGVvtH3rIiYdwAo5bSEc3G9G/LSEiwh47o7NrTOzrRsznARBgefSPs9K3qIgMpZHs3DgqJ0TID1k5y1w4KlPvL36C/+LEmxckNYMKrmjvsFOpwBGDQAVghEOsvntE328Yt2M9Yv0x55cZ5RPJ2pGtQW4geb8+aT2ThZ1zSGwlnvMM8TE+HAwUs0+GQwZbp5UpIiDYLzUeZ0pYWVBHmv/YzN3w0bSKTrC8Jc/0aAaUnxmKMkH5AWO6pBelw8KtVIvd9BwKgBQKVo+tsAVGEdKbVTlwOvLcuhWonCvjoxPCiPgNR05HF8QANbpWet0p+k\u0026#34; }, \u0026#34;assumedRoleUser\u0026#34;: { \u0026#34;assumedRoleId\u0026#34;: \u0026#34;AROAJBP4A5WSXVNY72RLE:bob@example.com\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:sts::776613361644:assumed-role/assume-admin-role-example/bob@example.com\u0026#34; } }, \u0026#34;requestID\u0026#34;: \u0026#34;fdbb008c-63ce-4207-8171-b041d6f38672\u0026#34;, \u0026#34;eventID\u0026#34;: \u0026#34;40b4d219-0448-436f-9420-cdd3dc654b44\u0026#34;, \u0026#34;resources\u0026#34;: [ { \u0026#34;accountId\u0026#34;: \u0026#34;776613361644\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;AWS::IAM::Role\u0026#34;, \u0026#34;ARN\u0026#34;: \u0026#34;arn:aws:iam::776613361644:role/assume-admin-role-example\u0026#34; } ], \u0026#34;eventType\u0026#34;: \u0026#34;AwsApiCall\u0026#34;, \u0026#34;recipientAccountId\u0026#34;: \u0026#34;776613361644\u0026#34;, \u0026#34;sharedEventID\u0026#34;: \u0026#34;19ee34b2-52bd-4dfa-8c8e-cf68344062a6\u0026#34; } SwitchRole\n{ \u0026#34;eventVersion\u0026#34;: \u0026#34;1.05\u0026#34;, \u0026#34;userIdentity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;AssumedRole\u0026#34;, \u0026#34;principalId\u0026#34;: \u0026#34;AROAJBP4A5WSXVNY72RLE:bob@example.com\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:sts::776613361644:assumed-role/assume-admin-role-example/bob@example.com\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;776613361644\u0026#34; }, \u0026#34;eventTime\u0026#34;: \u0026#34;2020-09-17T19:04:10Z\u0026#34;, \u0026#34;eventSource\u0026#34;: \u0026#34;signin.amazonaws.com\u0026#34;, \u0026#34;eventName\u0026#34;: \u0026#34;SwitchRole\u0026#34;, \u0026#34;awsRegion\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;sourceIPAddress\u0026#34;: \u0026#34;75.15.154.15\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\u0026#34;, \u0026#34;requestParameters\u0026#34;: null, \u0026#34;responseElements\u0026#34;: { \u0026#34;SwitchRole\u0026#34;: \u0026#34;Success\u0026#34; }, \u0026#34;additionalEventData\u0026#34;: { \u0026#34;SwitchFrom\u0026#34;: \u0026#34;arn:aws:iam::203016562928:user/bob@example.com\u0026#34;, \u0026#34;RedirectTo\u0026#34;: \u0026#34;https://console.aws.amazon.com/console/home\u0026#34; }, \u0026#34;eventID\u0026#34;: \u0026#34;70627092-0c9c-4163-9975-42ffcc50a37a\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;AwsConsoleSignIn\u0026#34;, \u0026#34;recipientAccountId\u0026#34;: \u0026#34;776613361644\u0026#34; } in the source account look up for AssumeRole around the same time with the same \u0026ldquo;sharedEventID\u0026rdquo; AssumeRole\n{ \u0026#34;eventVersion\u0026#34;: \u0026#34;1.05\u0026#34;, \u0026#34;userIdentity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;IAMUser\u0026#34;, \u0026#34;principalId\u0026#34;: \u0026#34;AIDAS6RF25DXSM2CA5KAD\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:iam::203016562928:user/bob@example.com\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;203016562928\u0026#34;, \u0026#34;accessKeyId\u0026#34;: \u0026#34;ASIAS6RF25DXQR3PH2AX\u0026#34;, \u0026#34;userName\u0026#34;: \u0026#34;bob@example.com\u0026#34;, \u0026#34;sessionContext\u0026#34;: { \u0026#34;sessionIssuer\u0026#34;: {}, \u0026#34;webIdFederationData\u0026#34;: {}, \u0026#34;attributes\u0026#34;: { \u0026#34;mfaAuthenticated\u0026#34;: \u0026#34;true\u0026#34;, \u0026#34;creationDate\u0026#34;: \u0026#34;2020-09-17T13:58:45Z\u0026#34; } }, \u0026#34;invokedBy\u0026#34;: \u0026#34;AWS Internal\u0026#34; }, \u0026#34;eventTime\u0026#34;: \u0026#34;2020-09-17T19:04:10Z\u0026#34;, \u0026#34;eventSource\u0026#34;: \u0026#34;sts.amazonaws.com\u0026#34;, \u0026#34;eventName\u0026#34;: \u0026#34;AssumeRole\u0026#34;, \u0026#34;awsRegion\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;sourceIPAddress\u0026#34;: \u0026#34;AWS Internal\u0026#34;, \u0026#34;userAgent\u0026#34;: \u0026#34;AWS Internal\u0026#34;, \u0026#34;requestParameters\u0026#34;: { \u0026#34;roleArn\u0026#34;: \u0026#34;arn:aws:iam::776613361644:role/assume-admin-role-example\u0026#34;, \u0026#34;roleSessionName\u0026#34;: \u0026#34;bob@example.com\u0026#34; }, \u0026#34;responseElements\u0026#34;: { \u0026#34;credentials\u0026#34;: { \u0026#34;accessKeyId\u0026#34;: \u0026#34;ASIA3JUODO7WTIO2PI64\u0026#34;, \u0026#34;expiration\u0026#34;: \u0026#34;Sep 17, 2020 8:04:10 PM\u0026#34;, \u0026#34;sessionToken\u0026#34;: \u0026#34;IQoJb3JpZ2luX2VjEAMaCXVzLWVhc3QtMSJIMEYCIQDsEwOWhE/9cNh+Xpg+V6r8ug3ULRnoOCPNCQhorh13xgIhAIfc+u8ttYNsjLQJRMvo7EnDXMkOAViMFuU7Mma8zjGEKqMCCBwQARoMNzc2NjEzMzYxNjQ1Igyt06eMsyzHkQJRK84qgAIF/jUW99caWE07piwWI2EGTHU2KMx6ioRz3uDbDS24GKy3XvQRalC+5YTZoOQDQvpziRmO33BEzM6Ws5TBTggo/yXGAJRQthB8IqiGkbsClbOG8cYsuhRXK3+yK8OHhCSfr0ehO2SYNiaqEClyT9n8QtEmkQawN56IiOoE9HBzTA7xxYbj7XULL/okog7D3l18NG32rxhHS1ACDN3ro9RGjrPicn9PHFfBqvK+uP3JJQVlcQZu6yGVvtH3rIiYdwAo5bSEc3G9G/LSEiwh47o7NrTOzrRsznARBgefSPs9K3qIgMpZHs3DgqJ0TID1k5y1w4KlPvL36C/+LEmxckNYMKrmjvsFOpwBGDQAVghEOsvntE328Yt2M9Yv0x55cZ5RPJ2pGtQW4geb8+aT2ThZ1zSGwlnvMM8TE+HAwUs0+GQwZbp5UpIiDYLzUeZ0pYWVBHmv/YzN3w0bSKTrC8Jc/0aAaUnxmKMkH5AWO6pBelw8KtVIvd9BwKgBQKVo+tsAVGEdKbVTlwOvLcuhWonCvjoxPCiPgNR05HF8QANbpWet0p+k\u0026#34; }, \u0026#34;assumedRoleUser\u0026#34;: { \u0026#34;assumedRoleId\u0026#34;: \u0026#34;AROAJBP4A5WSXVNY72RLE:bob@example.com\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:sts::776613361644:assumed-role/assume-admin-role-example/bob@example.com\u0026#34; } }, \u0026#34;requestID\u0026#34;: \u0026#34;fdbb008c-63ce-4207-8171-b041d6f38672\u0026#34;, \u0026#34;eventID\u0026#34;: \u0026#34;14fb06e3-5649-4fc3-a274-226ba85c8be6\u0026#34;, \u0026#34;resources\u0026#34;: [ { \u0026#34;accountId\u0026#34;: \u0026#34;776613361644\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;AWS::IAM::Role\u0026#34;, \u0026#34;ARN\u0026#34;: \u0026#34;arn:aws:iam::776613361644:role/assume-admin-role-example\u0026#34; } ], \u0026#34;eventType\u0026#34;: \u0026#34;AwsApiCall\u0026#34;, \u0026#34;recipientAccountId\u0026#34;: \u0026#34;203016562928\u0026#34;, \u0026#34;sharedEventID\u0026#34;: \u0026#34;19ee34b2-52bd-4dfa-8c8e-cf68344062a6\u0026#34; } Reference  How to Audit Cross-Account Roles Using AWS CloudTrail and Amazon CloudWatch Events\n","date":1600401210,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600401210,"objectID":"194a3a6cbc7ae1a17950c74e2243f85a","permalink":"https://davidxiao.me/post/how-to-audit-user-activities-using-aws-cloudtrail-part-2/","publishdate":"2020-09-17T23:53:30-04:00","relpermalink":"/post/how-to-audit-user-activities-using-aws-cloudtrail-part-2/","section":"post","summary":"This is the second post of a series that demonstrates how to leverage AWS CloudTrail in auditing user actions. This post is focused on cross account access.","tags":[],"title":"Audit User Actions Using CloudTrail - Part 2","type":"post"},{"authors":["David Xiao"],"categories":[],"content":"","date":1600401203,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600401203,"objectID":"6b564f57f4f5f81bc4b6ef86a348f0c3","permalink":"https://davidxiao.me/post/how-to-audit-user-activities-using-aws-cloudtrail-part-1/","publishdate":"2020-09-17T23:53:23-04:00","relpermalink":"/post/how-to-audit-user-activities-using-aws-cloudtrail-part-1/","section":"post","summary":"AWS CloudTrail is an essential service that records user actions and systems events. This is the first post of a series that demonstrates how to leverage CloudTrail to identify the IAM principal and establish timelines. This post is focused on same account access.","tags":[],"title":"Audit User Actions Using CloudTrail - Part 1","type":"post"},{"authors":["David Xiao"],"categories":["Information Security","AWS","IAM"],"content":"Why Do I Care Cloudtrail is an essential service in AWS that provides the source of truth on what has happened at API and event level.\nWhether you are troubleshooting or investigating something on AWS, being able to look up user identity across the Cloudtrail event logs can be very helpful.\nBy default AWS provides 90 days of event history and you can look up on key fields such as User name, event time or event id.\nIn some cases that\u0026rsquo;s all you need.\nBut there are cases where you need to go beyond the 90 days and want to be able to extract user identity information from Cloudtrail logs directly.\nFor example, you may wish to write a Lambda function to auto-tag any new EC2 instances with username of the creator, eventid, eventtime when a user is creating new EC2 instances.\nFor another example, you may need to search history go past 90 days to look for information like WHO did WHAT and WHEN.\nIn those cases, understand the JSON structure of Cloudtrail log and specifically the identity related portion comes handy.\neventType Cloudtrail records various types of events. In each JSON record, eventType indicates the type of the event. Each event type has a different JSON structure.\nThe following types cover the most cases I\u0026rsquo;m aware of but the list is not intended to be exhaustivee - I will add to it as I learn.\nAwsApiCall API call is the most common event type. It represents an API call on an AWS service.\nThe great thing about this event type is it can be triggered on CloudWatch event. update: recently CloudWatch Event is renamed to AWS EventBridge.\nAwsConsoleSignIn This type of event is generated when a user signed in on AWS management console.\nAwsServiceEvent Services such as AWS SSO generates such type of event when authenticating or federating a user.\nuserIdentity.type On each record, the userIdentity block represents the identity information. Various types of userIdentity exists. The most common ones are: IAMUser, AssumedRole, AWSService, SAMLUser and Unknown.\nIAMUser The below json is extracted from a Cloudtrail event that represents an API call made by an IAM user. User name can be extracted from the userIdentity.userName field.\n{ \u0026#34;eventVersion\u0026#34;: \u0026#34;1.05\u0026#34;, \u0026#34;userIdentity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;IAMUser\u0026#34;, \u0026#34;principalId\u0026#34;: \u0026#34;AIDAUWQOET4WMTL6OV3SZ\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:iam::323225952045:user/tool-poc\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;323225952045\u0026#34;, \u0026#34;accessKeyId\u0026#34;: \u0026#34;AKIAUWQOET4WFCRTJDF5\u0026#34;, \u0026#34;userName\u0026#34;: \u0026#34;tool-poc\u0026#34; }, \u0026#34;eventID\u0026#34;: \u0026#34;1e85a381-9e58-4612-a8d5-abc30ff95f65\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;AwsApiCall\u0026#34;, ... } In another example, the eventType is different but userIdentity block structure looks similar.\n{ \u0026#34;eventVersion\u0026#34;: \u0026#34;1.05\u0026#34;, \u0026#34;userIdentity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;IAMUser\u0026#34;, \u0026#34;principalId\u0026#34;: \u0026#34;AIDAVBHXPSQ567GPQHO75\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:iam::346263884858:user/admin\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;346263884858\u0026#34;, \u0026#34;userName\u0026#34;: \u0026#34;admin\u0026#34; }, \u0026#34;eventTime\u0026#34;: \u0026#34;2020-09-12T18:05:04Z\u0026#34;, \u0026#34;eventSource\u0026#34;: \u0026#34;signin.amazonaws.com\u0026#34;, \u0026#34;eventName\u0026#34;: \u0026#34;ConsoleLogin\u0026#34;, \u0026#34;awsRegion\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;eventID\u0026#34;: \u0026#34;0b8f0958-8507-4526-b8f5-d56741ccae77\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;AwsConsoleSignIn\u0026#34;, ... } AssumedRole AssumedRole is when an identity assumes an AWS role. The identity could be IAM user in the same account, user from another AWS account, AWS service or a SAML provider.\nBelow are a few examples.\nUser name: alice@example.com\n{ \u0026#34;eventVersion\u0026#34;: \u0026#34;1.05\u0026#34;, \u0026#34;userIdentity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;AssumedRole\u0026#34;, \u0026#34;principalId\u0026#34;: \u0026#34;AROAJKUFA6XAMROQBJRNA:alice@example.com\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:sts::323225952045:assumed-role/assume-admin-role-an-account/alice@example.com\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;323225952045\u0026#34;, ... }, \u0026#34;eventID\u0026#34;: \u0026#34;e7f3be2f-a81b-4a87-975f-eaac58faca9e\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;AwsApiCall\u0026#34;, ... } User name: AutoScaling\n{ \u0026#34;eventVersion\u0026#34;: \u0026#34;1.05\u0026#34;, \u0026#34;userIdentity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;AssumedRole\u0026#34;, \u0026#34;principalId\u0026#34;: \u0026#34;AROAJ6TYGYS2TFMOQYEY2:AutoScaling\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:sts::323225952045:assumed-role/AWSServiceRoleForAutoScaling/AutoScaling\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;323225952045\u0026#34;, ... }, \u0026#34;eventID\u0026#34;: \u0026#34;b67837c3-f90c-49c9-8750-02adef205f64\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;AwsApiCall\u0026#34;, ... } User name: bob@example.com\n{ \u0026#34;eventVersion\u0026#34;: \u0026#34;1.05\u0026#34;, \u0026#34;userIdentity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;AssumedRole\u0026#34;, \u0026#34;principalId\u0026#34;: \u0026#34;AROAI4O72XO7XFD2BHDUA:bob@example.com\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:sts::323225952045:assumed-role/Sandbox-SSO-PowerUser/bob@example.com\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;323225952045\u0026#34;, ... }, \u0026#34;eventID\u0026#34;: \u0026#34;5921eee9-7a54-4672-84d5-9a64a81822e4\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;AwsApiCall\u0026#34;, ... } User name: test@example.com\n{ \u0026#34;eventVersion\u0026#34;: \u0026#34;1.05\u0026#34;, \u0026#34;userIdentity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;AssumedRole\u0026#34;, \u0026#34;principalId\u0026#34;: \u0026#34;AROAVBHXPSQ577YYUL4QC:test@example.com\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:sts::346263884858:assumed-role/AWSReservedSSO_AWSAdministratorAccess_33ca3b9a1184d671/test@example.com\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;346263884858\u0026#34;, ... }, \u0026#34;eventID\u0026#34;: \u0026#34;a1b2f460-0288-4937-b850-12b521a10230\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;AwsApiCall\u0026#34;, ... } User name: AssumeRoleSession\n{ \u0026#34;eventVersion\u0026#34;: \u0026#34;1.07\u0026#34;, \u0026#34;userIdentity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;AssumedRole\u0026#34;, \u0026#34;principalId\u0026#34;: \u0026#34;AROAIUHYOXFSUYZJIJQUM:AssumeRoleSession\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:sts::323225952045:assumed-role/CloudHealth/AssumeRoleSession\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;323225952045\u0026#34;, \u0026#34;accessKeyId\u0026#34;: \u0026#34;ASIAUWQOET4WKMRLT5G6\u0026#34;, \u0026#34;sessionContext\u0026#34;: { \u0026#34;sessionIssuer\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Role\u0026#34;, \u0026#34;principalId\u0026#34;: \u0026#34;AROAIUHYOXFSUYZJIJQUM\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:iam::323225952045:role/CloudHealth\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;323225952045\u0026#34;, \u0026#34;userName\u0026#34;: \u0026#34;CloudHealth\u0026#34; }, \u0026#34;attributes\u0026#34;: { \u0026#34;creationDate\u0026#34;: \u0026#34;2020-09-15T13:53:25Z\u0026#34;, \u0026#34;mfaAuthenticated\u0026#34;: \u0026#34;false\u0026#34; } } }, \u0026#34;eventTime\u0026#34;: \u0026#34;2020-09-15T14:08:27Z\u0026#34;, \u0026#34;eventSource\u0026#34;: \u0026#34;dynamodb.amazonaws.com\u0026#34;, \u0026#34;eventName\u0026#34;: \u0026#34;ListTables\u0026#34;, \u0026#34;awsRegion\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;sourceIPAddress\u0026#34;: \u0026#34;34.230.249.2\u0026#34;, \u0026#34;eventID\u0026#34;: \u0026#34;de0f486d-c1ff-4032-9e86-17ba166f687e\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;AwsApiCall\u0026#34;, ... } SAMLUser This type of userIdentity are most commonly seen in AssumeRoleWithSAML event.\nUser name: bob@example.com\n{ \u0026#34;eventVersion\u0026#34;: \u0026#34;1.05\u0026#34;, \u0026#34;userIdentity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;SAMLUser\u0026#34;, \u0026#34;principalId\u0026#34;: \u0026#34;6DLJuKNu+27u3kwvB9BKCv71kco=:bob@example.com\u0026#34;, \u0026#34;userName\u0026#34;: \u0026#34;bob@example.com\u0026#34;, \u0026#34;identityProvider\u0026#34;: \u0026#34;6DLJuKNu+27u3kwvB9BKCv71kco=\u0026#34; }, \u0026#34;eventTime\u0026#34;: \u0026#34;2020-09-08T13:22:03Z\u0026#34;, \u0026#34;eventSource\u0026#34;: \u0026#34;sts.amazonaws.com\u0026#34;, \u0026#34;eventName\u0026#34;: \u0026#34;AssumeRoleWithSAML\u0026#34;, \u0026#34;awsRegion\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;sourceIPAddress\u0026#34;: \u0026#34;72.21.217.22\u0026#34;, \u0026#34;eventID\u0026#34;: \u0026#34;892c55be-2ab1-4e0e-a80f-5e04f05b625d\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;AwsApiCall\u0026#34;, ... } AWSService For this type of userIdentity, it simply does not have a real user. Instead, it\u0026rsquo;s AWS service that is performing an action.\nUser name (blank)\n{ \u0026#34;eventVersion\u0026#34;: \u0026#34;1.05\u0026#34;, \u0026#34;userIdentity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;AWSService\u0026#34;, \u0026#34;invokedBy\u0026#34;: \u0026#34;elasticbeanstalk.amazonaws.com\u0026#34; }, \u0026#34;eventTime\u0026#34;: \u0026#34;2020-09-15T13:43:16Z\u0026#34;, \u0026#34;eventSource\u0026#34;: \u0026#34;sts.amazonaws.com\u0026#34;, \u0026#34;eventName\u0026#34;: \u0026#34;AssumeRole\u0026#34;, \u0026#34;awsRegion\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;sourceIPAddress\u0026#34;: \u0026#34;elasticbeanstalk.amazonaws.com\u0026#34;, \u0026#34;eventID\u0026#34;: \u0026#34;93fd006e-a58f-4304-a9a1-04136ca8a1c3\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;AwsApiCall\u0026#34;, ... } Unknown This is commonly seen in AwsServiceEvent event. I\u0026rsquo;ve seen AWS SSO produces this type of event but I\u0026rsquo;m not aware of what else AWS services produce it.\nUser name: test@example.com\n{ \u0026#34;eventVersion\u0026#34;: \u0026#34;1.05\u0026#34;, \u0026#34;userIdentity\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Unknown\u0026#34;, \u0026#34;principalId\u0026#34;: \u0026#34;90677f325d-ffd9565d-ac85-4753-8dc6-502c67f1c727\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;346263884858\u0026#34;, \u0026#34;userName\u0026#34;: \u0026#34;test@example.com\u0026#34; }, \u0026#34;eventTime\u0026#34;: \u0026#34;2020-09-15T13:35:04Z\u0026#34;, \u0026#34;eventSource\u0026#34;: \u0026#34;sso.amazonaws.com\u0026#34;, \u0026#34;eventName\u0026#34;: \u0026#34;Authenticate\u0026#34;, \u0026#34;awsRegion\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;sourceIPAddress\u0026#34;: \u0026#34;75.15.150.17\u0026#34;, ... \u0026#34;eventID\u0026#34;: \u0026#34;63e0001b-e2fa-49b0-bf29-b7c92d977266\u0026#34;, \u0026#34;eventType\u0026#34;: \u0026#34;AwsServiceEvent\u0026#34;, \u0026#34;recipientAccountId\u0026#34;: \u0026#34;346263884858\u0026#34; } ","date":1600128000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600128000,"objectID":"80aea303b5c4762f56e6193674f894cb","permalink":"https://davidxiao.me/post/extract-user-identity-from-aws-cloudtrail/","publishdate":"2020-09-15T00:00:00Z","relpermalink":"/post/extract-user-identity-from-aws-cloudtrail/","section":"post","summary":"Whether you are troubleshooting or investigating something on AWS, being able to look up user identity across the Cloudtrail event logs can be very helpful.","tags":["cybersecurity","aws","cloudtrail","iam","user-identity"],"title":"Extract User Identity from AWS Cloudtrail","type":"post"},{"authors":null,"categories":["Information Security"],"content":"OTP is very common in today\u0026rsquo;s MFA implementation.\nHOTP HOTP stands for HMAC-based One-time Password algorithm. It computes the value with the following inputs:\n  A cryptographic hash method, H (default is SHA-1)\n  A secret key, K, which is an arbitrary byte string, and must remain private\n  A counter, C, which counts the number of iterations\n  A HOTP value length, d (6–10, default is 6, and 6–8 is recommended)\n  TOTP TOTP stands for Time-based One-time Password algorithm (TOTP). It is an extension of HOTP that generates a one-time password (OTP) by instead taking uniqueness from the current time.\nMore often than not, time is downsampled into larger durations (e.g., 30 seconds) to allow for validity between the parties.\nTo establish TOTP authentication, the authenticatee and authenticator must pre-establish both the HOTP parameters and the following TOTP parameters:\n  T0, the Unix time from which to start counting time steps (default is 0)\n  TX, an interval which will be used to calculate the value of the counter CT (default is 30 seconds)\n  ","date":1599696000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599696000,"objectID":"ddac6575cc7cd61a91985b9be6b6616c","permalink":"https://davidxiao.me/post/one-time-password-and-hotp-totp/","publishdate":"2020-09-10T00:00:00Z","relpermalink":"/post/one-time-password-and-hotp-totp/","section":"post","summary":"All you need to know about OTP from a security perspective.","tags":["cybersecurity","otp"],"title":"One Time Password, HOTP and TOTP","type":"post"},{"authors":["David Xiao"],"categories":["Threat Modeling"],"content":"TLDR: This post is my collection of articles related to threat modeling and Microsoft STRIDE threat model.\nWhat Is Threat Modeling At a high level, threat modeling is a process of putting the \u0026ldquo;bad guy\u0026rdquo; hat on and conducting an security assessment over a system (such as a website or a mobile app) to identify and prioritize threats and mitigations.\nA more complete definition can be found on Wikipedia.\nThere are many ways to do threat modeling. Depending on the types of system and workloads that are in scope, the applicable threats can vary a lot.\nFor example, threat modeling over a set of highly scalable workloads deployed on MS Azure might start from a threat library that includes portential threats relevant to Azure services in use, while assessing over a simple web application hosted on on-prem data center might start from a different set of threats relevant to host based security and OWASP Top 10.\nWhat Is STRIDE STRIDE is both a threat model framework and a methodology that developed and adopted in Microsoft over the years.\nSTRIDE stands for:\n  Spoofing: Impersonating something or someone else.\n  Tampering: Modifying data or code.\n  Repudiation: Claiming to have not performed an action.\n  Information Disclosure: Exposing information to someone not authorized to see it.\n  Denial of Service: Deny or degrade service to users.\n  Elevation of Privilege: Gain capabilities without proper authorization.\n  Microsoft suggests the following approach when conducting a threat modeling:\n  Threat Modeling Process   Most Current Articles  Threat Modeling. A high level overview.\n Azure Threat Modeling Tool, the framework and the tool. 02/16/2017\nOlder References  STRIDE chart 09/11/2007\n Threat Modeling, once again 08/30/2007\n Threat Modeling again. Drawing the diagram 08/31/2007\n Threat Modeling Again, STRIDE 09/04/2007\n Threat Modeling Again, STRIDE Mitigations 09/05/2007\n Threat Modeling Again, What does STRIDE have to do with threat modeling 09/07/2007\n Threat Modeling Again, STRIDE per Element 09/10/2007\n Threat Modeling Again, Threat Modeling PlaySound 09/11/2007\n","date":1599609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599609600,"objectID":"23de67da845cdebbe87e209b36bbc6f9","permalink":"https://davidxiao.me/post/threat-modeling-and-stride-model/","publishdate":"2020-09-09T00:00:00Z","relpermalink":"/post/threat-modeling-and-stride-model/","section":"post","summary":"This post is my collection of articles related to threat modeling and Microsoft STRIDE threat model.","tags":["cybersecurity","threat-modeling","stride"],"title":"Threat Modeling and STRIDE Model","type":"post"},{"authors":["David Xiao"],"categories":["Information Security","TLS"],"content":"Both TLS and SSH are security protocols aimed to solve a specific set of problems.\nTLS is the transport layer of HTTPS protocol while SSH is designed to replace plaintext Telnet protocol.\nArchitecture wise, TLS is relatively simple: It has a handshake protocol that does the authentication and agrees on a session key that will be used to encrypt the rest of the communication.\nSSH is more complicated than TLS. It has the following main components:\n  transport layer;\n  user authentication layer;\n  connection layer;\n  Six SSH related RFC are published in relate to SSH: 4251, 4252, 4253, 4254, 425 and 4256.\nSSH Transport Layer Transport layer handles key exchange, server authentication and sets up encryption, compression and integrity verification. It exposes to the upper layer an programmatic interface for sending and receiving plaintext data. The transport layer also arranges for key re-exchange, usually after 1 GB of data has been transferred or after 1 hour has passed, whichever occurs first.\nUser Authentication Layer It handles client authentication and provides a number of authentication methods. Widely used user-authentication methods include password, publickey, keyboard-interactive, GSSAPI authentication which allows SSH to authenticate using external mechanisms such as Kerberos 5 or NTLM, providing single sign-on capability to SSH sessions.\nConnection Layer It defines the concept of channels in SSH. A single SSH connection can host multiple channels simultaneously, each transferring data in both directions. Standard channel types include: shell for terminal shells; SFTP and exec requests (including SCP transfers); direct-tcpip for client-to-server forwarded connections; forwarded-tcpip for server-to-client forwarded connections etc.\n","date":1598918400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598918400,"objectID":"ea0ab71495875103a520d14320bdeb4a","permalink":"https://davidxiao.me/post/ssh-and-tls/","publishdate":"2020-09-01T00:00:00Z","relpermalink":"/post/ssh-and-tls/","section":"post","summary":"Review the differences and similarities between the two protocols from an architecture and security perspective.","tags":["cybersecurity","tls","ssh"],"title":"SSH and TLS: Differences and Similarities","type":"post"},{"authors":["David Xiao"],"categories":["Information Security","TLS"],"content":"At a high level, the following occurs during a TLS handshake:\ngraph TD; A[Client establishes a TCP connection to the server] --\u0026gt;B[Client sends Hello and list of cipher suites including TLS version] --\u0026gt;C[Server sends Hello, selected suite and certificate] --\u0026gt; D[Client validates certificate] D --\u0026gt; E[Client and server starts key exchange process. \u0026lt;br/\u0026gt;RSA and Diffie-Hellman are two common KEP algogirhtms] E --\u0026gt; F{Key Exchange Protocol} F --\u0026gt;|RSA| G[Both client and server independently \u0026lt;br/\u0026gt;agree on the same secret value with client random,\u0026lt;br/\u0026gt; server random and premaster secret] F --\u0026gt;|DH| H[Both client and server independently \u0026lt;br/\u0026gt;agree on the same secret value over exchanging\u0026lt;br/\u0026gt; a few DH parameters] G --\u0026gt;I[Regardless of which KEP was used, \u0026lt;br/\u0026gt;the rest of the session uses the agreed symmetric key to encrypt \u0026lt;br/\u0026gt;the communication both ways going forward] H --\u0026gt;I Read more about DH on my post and wikipedia\nKey Takeaways About the KEPs 👉 DH achieves forward secrecy while RSA does not.\n👉 DH handshake takes longer than RSA.\nWhat Else You Need To Know about TLS   TLS 1.0 and TLS 1.1 are no longer secure and should be avoided. A best practice is to use TLS version is 1.2 or later at the time of writing.\n  HTTPS means \u0026ldquo;HTTP over TLS\u0026rdquo;.\n  Both SSH and TLS are purpose-built for secure communication over the Internet, but they are very different in many ways. Check out my another post where I explain the differences between the two.\n  Glossary Cipher Suite A cipher suite is a set of algorithms. It usually contain include: a key exchange algorithm, a bulk encryption algorithm, and a message authentication code (MAC) algorithm.\nFor example, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 means:\n  ECDHE_RSA indicates the key exchange algorithm being used.\n  AES_128_GCM indicates the block cipher being used to encrypt the message stream, together with the block cipher mode of operation.\n  SHA256 indicates the message authentication algorithm which is used to authenticate a message.\n  ECDHE_RSA key exchange algorithm In a nutshell, it is ECDHE signed by RSA. Signing defeats man-in-the-middle attack. See detail here\n","date":1598832000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599696000,"objectID":"2eb2482a2cccf73d60498a682663af1e","permalink":"https://davidxiao.me/post/tls-handshake-in-a-nutshell/","publishdate":"2020-08-31T00:00:00Z","relpermalink":"/post/tls-handshake-in-a-nutshell/","section":"post","summary":"A quick overview of TLS handshake","tags":["cybersecurity","tls"],"title":"TLS Handshake in a Nutshell","type":"post"},{"authors":["David Xiao"],"categories":["Aviation"],"content":"Primer PPL stands for Private Pilot License. In Canada and US, PPL holders can fly an airplane under VFR rules.\nThe type of airplane PPL holder can legally fly depends on a few things. Usually one can legally fly small/light airplanes that he is most familiar with, such as Cessna 172 trainer.\nTo fly complex, high performance or tailwheel airplanes, one need to obtain respective endorsement from a certified instructor first.\nFor heavier airplane or those equipped with turbojet powerplant, type rating is required before he can legally fly one.\nAbove all, PPL holder needs to stay current and competent before he decides to fly as pilot. The old aviation proverb says, \u0026ldquo;Takeoffs are optional, landings are mandatory\u0026rdquo;.\nRegulatory Body and Laws / Regulations In Canada, Transport Canada governs general aviation.\nIn US, FAA governs general aviation.\nCARs: Canadian Aviation Regulations. Link on Transport Canada\nCruising Altitudes When flying VFR above 3,000 AGL, remember \u0026ldquo;East is Odd, West is Even Odder\u0026rdquo; on Magnetic Track (not Magnetic Heading)\n602.34 Cruising Altitudes and Cruising Flight Levels\nCessna 172M procedures Precautionary Landing COWLS check\n  Civilization (nearby population)\n  Obstacle (tower, treeline, powerline)\n  Wind (headwind on final)\n  Length of the surface (2000 ft would be minimal for C172 considering obstacle clearance, touchdown area and distance required for T/O)\n  Surface condition (too soft, too much rough, uneven terrain)\n  High Pass and Low Pass\n  High pass is completed at circuit altitude: 60kt with flaps 20\n  If satisfied with the surface, a low pass is completed at 500 AGL with same speed and configuration\n  In both high pass and low pass, the key is to trim for straight and level flight at the correct speed and altitude before abeam threshold.\n  Use the same pitch for speed and power for decent technique. For C172, 1900rpm is rule of thumb that can keep 60kt without decending.\n  On the downwind for landing, complete 3P: Prelanding checklist, Pan call, and Pax - passenger briefing)\n  Enroute Climb Lookout to clear the climb\nAPT - Attitude, Power (control the adverse yaw), Trim\nLevel off from climbing - The same APT procedure applies.\n Reference\nClimb\nPitch up and hold the nose on the horizon Peek at A/S as it decreases to 75 Full Power, Mix Rich. Carb Off. Right rudder when needed Trim Level Off from enroute climb\nStarts at 50-100ft below target altitude. Gradually push the nose down to cruise attitude.\nReduce Power to Cruise setting: 2300rpm. Left Rudder when needed\nEnroute Decent Lookout to clear the decent\nPAT - Power (control the adverse yaw), Attitude, Trim\nLevel off from climbing - The same APT applies.\n Reference\nNormal Takeoff Take-off Distance is the lump sum of the following three:\n  Takeoff roll (ground roll)\n  Lift-off\n  Initial Climb until clear 50ft obstacle\n  Confirm Wind Input before takeoff. Use Cross-wind Take-off Checklist if needed.\nElevator neutral. Aileron neutral. No flaps. Full Power. Mix Rich. Carb Cold. Call \u0026#34;Power Set\u0026#34;. Stay on the centerline, use Right Rudder as needed. Check and call \u0026#34;Engine gauges green\u0026#34;. Check and call \u0026#34;Airspeed alive\u0026#34;. Wings level. Rotate at 55. Right Rudder! Call \u0026#34;Rotate\u0026#34;. Nose on the Horizon. Call \u0026#34;____, \u0026lt;callsign\u0026gt; airborne Rwy __\u0026#34; Climb out at 70. Trim. Normal Landing Important: Set your mindset as \u0026ldquo;keep it flying without landing\u0026rdquo;\nOn Down Wind:\nSet Power to 2300rpm. Fly parallel to the landing Runway. Use a Crab angle when needed Pre-landing checklist. (Primer locked, Master ON, Magneto on Both, Circuit Breakers Check, Landing Lights ON, Carb ON, Mix Rich, Engine Green, Fuel on Both, Doors and Windows Locked, Seatbelts fastened, Brakes Check) \u0026#34;Pre-landing Checklist Complete\u0026#34; \u0026#34;Aiming to touch down at one third of the Rwy\u0026#34; At 45 degrees beyond threshold (turn early when having a tailwind), reduce power to 1500rpm, holding the altitude while making a turn to base. Call \u0026#34;___, \u0026lt;callsign\u0026gt;, turning base for Rwy __\u0026#34; (optional) On Base Leg:\nHolding the altitude while bleeding off A/S until it reaches 75 knots Apply flaps 20 (be careful not to ballon up) and trim for 75 Anticipate a 500fpm decent. Look out for Wind *** When having tail winds, turn early and anticipate a bit high Turning Final and call \u0026#34;___, \u0026lt;callsign\u0026gt;, turning final on Rwy __. [Tough-n-Go / Full Stop]\u0026#34; On Final:\nApply full flaps. A/S 65. Trim. Line up early on the extended runway centerline. Fly with a crab angle initially to correct for drift. Pitch for Airspeed, Power for altitude Transition to Sideslip. When getting the vision of \u0026#34;exploding\u0026#34; runway: Power to Idle, Hold control column and gradually level off. Judge the sink rate using peripheral vision. When sinking, do baby steps of \u0026#34;pull-pause-pull\u0026#34; to keep the nose slight below horizon. When not sinking, hold the control column but no pulling. When touches down completely: Wind input - Aileron fully deflected into the wind Opposite Rudder to stay on the centerline Short Field Landing On Down wind:\n\u0026#34;Aiming to touch down at second dash\u0026#34; On Final:\nApproach speed: 60 \u0026#34;There is an 50ft obstacle before threshold\u0026#34; When obstacle is cleared, power to idle and maintain 60 After touching down, HOLD control full back, RETRACT flaps and APPLY maximum brake pressure (from C172 POH) Soft Field Landing On Down wind:\n\u0026#34;Aiming to touch down at one third of the Rwy\u0026#34; On Final:\nPerform a 60kt approach on final Power to Idle and enter cruising attitude as normal landing Immediately after entering cruising attitude but before it starts sinking: Apply small amount of power (100 to 200rpm is enough) Touching down at a more nose up attitude than normal landing (textbook says roughtly the attitude of a power-off stall) During the flaring control column likely has more back travel than normal landing. It can be close to the belly when touching down After touchdown, HOLD control full back and DO NOT apply heavy brake pressure Power-off Stall Entry and Recovery On straight and level flight\nHASEL CHECK (Carb ON, Mix Rich) Power to Idle smoothly while controlling yaw Hold back control pressure to keep airplane straight and level Watch A/S decreases into slow flight range. Call out immiment stall by \u0026#34;STALL\u0026#34; when hearing horn and losing altitude Call out \u0026#34;RECOVER\u0026#34; and immediately nose down and apply full power and control yaw Power-on Stall Entry and Recovery Entry: Power to 1700rpm everything else is similiar to that of a power off stall. Expect more challenging yaw control due to slipstream and asymmetric thrust use RUDDER to control yaw Stall will happen in a more hose-up position it will be judged if heading can be kept during recovery ","date":1592870400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599696000,"objectID":"87395cd12f150d4dcd58523682e9dd20","permalink":"https://davidxiao.me/post/pilot-in-the-making/","publishdate":"2020-06-23T00:00:00Z","relpermalink":"/post/pilot-in-the-making/","section":"post","summary":"This is some of the notes I took when taking PPL flight lessons.","tags":["c172","PPL"],"title":"A New Pilot in the Making","type":"post"},{"authors":["David Xiao"],"categories":["Reading"],"content":"A Conflict of Visions: Ideological Origins of Political Struggles by Thomas Sowell. 2007. On Amazon\n","date":1592352000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592352000,"objectID":"e02356da39158f74300a3d64f61e1a86","permalink":"https://davidxiao.me/post/what-ive-been-reading/","publishdate":"2020-06-17T00:00:00Z","relpermalink":"/post/what-ive-been-reading/","section":"post","summary":"My reading list of nonfiction books. I enjoy reading them but you can draw your own conclusions.","tags":["book","thomas-sowell"],"title":"What I have Been Reading","type":"post"},{"authors":["David Xiao"],"categories":["Coding","React"],"content":"TLDR\nAs a recovering C++ developer learning React, I put together some notes along the journey.\nSome of the notes and example code were extracted from the materials listed in the reference. I\u0026rsquo;ve tried to include links but feel free to let me know if I missed something.\nCredit goes to the original authors.\nReference   Step-by-step guide. Great learning material.  What is React.js  React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It has a few building blocks such as elements, components etc.\n Reactjs.org\n Elements An element describes what you want to see on the screen:\nconst element = \u0026lt;h1\u0026gt;Hello world\u0026lt;/h1\u0026gt;; const div1 = \u0026lt;div /\u0026gt;; Components Elements such as \u0026lt;div /\u0026gt; are defined in HTML5. React extends it by introducing user-defined elements such as\n\u0026lt;Welcome name=\u0026#34;Sara\u0026#34; /\u0026gt; Welcome is a user-defined component. In React, always start component names with a capital letter to follow the naming convention.\nWhy Components Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.\nReact component can be declared as a JS function or a JS class. Either way, it accepts input (called “props”) and return React elements describing what should appear on the screen.\nWhen React sees an element representing a user-defined component, it wraps up JSX attributes and children and passes it as a single object (called props) to the component implicitly without user code.\npropsstands for properties.\nReact function An example:\nfunction Welcome(props) { return \u0026lt;h1\u0026gt;Hello, {props.name}\u0026lt;/h1\u0026gt;; } const element = \u0026lt;Welcome name=\u0026#34;Sara\u0026#34; /\u0026gt;; ReactDOM.render( element, document.getElementById(\u0026#39;root\u0026#39;) ); JS code starts at the top of the file. It gets executed from top to bottom. There is no entry point such as what \u0026ldquo;main()\u0026rdquo; has to do in C++.\nWhat happens in the example above is:\n  React calls ReactDOM.render() with the \u0026lt;Welcome name=\u0026quot;Sara\u0026quot; /\u0026gt;\n  React sees Welcome is a user-defined component and calls its corresponding function with {name: 'Sara'} as the props.\n  Welcome component returns \u0026lt;h1\u0026gt;Hello, Sara\u0026lt;/h1\u0026gt; as the result.\n  React takes care of updating the DOM with \u0026lt;h1\u0026gt;Hello, Sara\u0026lt;/h1\u0026gt;.\n  React class The function component example above can be equivalently rewritten as a class component:\nclass Welcome extends React.Component { render() { return \u0026lt;h1\u0026gt;Hello, {this.props.name}\u0026lt;/h1\u0026gt;; } } React class component always \u0026ldquo;inherited\u0026rdquo; from React.Component.\nrender() is the only method that any class \u0026ldquo;inherited\u0026rdquo; from React.Component must declare.\n Think of render() as a C++ pure virtual function in React.Component.\nA derived class would have to implement it before the class can be instantiated.\n  Calling a component in another component Let\u0026rsquo;s take function component as an example.\ngraph TD; Comment--\u0026gt;UserInfo--\u0026gt;Avatar; Comment passed the value of its own props.author to UserInfo.\nfunction Comment(props) { return ( \u0026lt;div className=\u0026#34;Comment\u0026#34;\u0026gt; \u0026lt;UserInfo user={props.author} /\u0026gt; \u0026lt;div className=\u0026#34;Comment-text\u0026#34;\u0026gt; {props.text} \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;Comment-date\u0026#34;\u0026gt; {formatDate(props.date)} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } UserInfo\u0026rsquo;s props contains a key value pair \u0026ldquo;user=\u0026hellip;\u0026rdquo; received from Comment. The value then gets passed down to Avatar.\nfunction UserInfo(props) { return ( \u0026lt;div className=\u0026#34;UserInfo\u0026#34;\u0026gt; \u0026lt;Avatar user={props.user} /\u0026gt; \u0026lt;div className=\u0026#34;UserInfo-name\u0026#34;\u0026gt; {props.user.name} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } Props Props gets passed to the constructor of class and stored as a class variable. Any method thereafer can reference it using this.props\n In a class component, think of this.props as a const reference member variable in C++.\nIt is initiated within constructor(props) where super(props) is called, the superclass always being React.Component.\n  We recommend naming props from the component’s own point of view rather than the context in which it is being used. The rationale being: It doesn’t need to know context such as where it is being rendered.\nThat\u0026rsquo;s a sort of isolation that helps in producing clear code.\nProps are Immutable Whether you declare a component as a function or a class, it must never modify its own props.\nThe following code is valid in javascript syntax but should not be used as React component as it changes its own input:\nfunction withdraw(account, amount) { account.total -= amount; }  Think of JS function parameter as pass by reference in C++.\nIn React, treat props as if it is const reference in C++.\n  Class, State and Lifecycle One difference between class and function is that class has a special object called this.states. states acts as a \u0026ldquo;container\u0026rdquo; that preserves variables between calls. In other words, class oject is \u0026ldquo;stateful\u0026rdquo; while function is \u0026ldquo;stateless\u0026rdquo;.\nA class has a few built-in methods including:\n  constructor(). See here\n  componentDidMount(). It is called when the object is rendered to the DOM for the first time. See here\n  componentWillUnmount(). It is called when the DOM produced by the object is removed. See here\n  A diagram to help understand lifecycle:\n  React lifecycle methods diagram   For a visual reference, click here\nstate is a built-in object in class.\n Click to see code example and explainations class Clock extends React.Component { constructor(props) { // for a React.Component subclass, you should call  // super(props) before any other statement  super(props); // in constructor, you should not call setState(),  // instead, assign the initial state to this.state directly  this.state = {date: new Date()}; } componentDidMount() { this.timerID = setInterval( () =\u0026gt; this.tick(), 1000 ); } componentWillUnmount() { clearInterval(this.timerID); } tick() { this.setState({ date: new Date() }); } render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;It is {this.state.date.toLocaleTimeString()}.\u0026lt;/h2\u0026gt;\u0026lt;/h2\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; ); } } ReactDOM.render( \u0026lt;Clock /\u0026gt;, document.getElementById(\u0026#39;root\u0026#39;) );   When \u0026lt;Clock /\u0026gt; is passed to ReactDOM.render(), React calls the constructor of the Clock component. Since Clock needs to display the current time, it initializes this.state with an object including the current time. We will later update this state.\n  React then calls the Clock component’s render() method. This is how React learns what should be displayed on the screen. React then updates the DOM to match the Clock’s render output.\n  When the Clock output is inserted in the DOM, React calls the componentDidMount() lifecycle method. Inside it, the Clock component asks the browser to set up a timer to call the component’s tick() method once a second.\n  Every second the browser calls the tick() method. Inside it, the Clock component schedules a UI update by calling setState() with an object containing the current time.\n👉 Important: Thanks to the setState() call, React knows the state has changed, and calls the render() method again to learn what should be on the screen. This time, this.state.date in the render() method will be different, and so the render output will include the updated time. React updates the DOM accordingly.\n  If the Clock component is ever removed from the DOM, React calls the componentWillUnmount() lifecycle method so the timer is stopped.\n   Props vs State This is a growing list.\n\u0026ldquo;rendered\u0026rdquo; value In React, both this.props and this.state represent the rendered values, i.e. what’s currently on the screen.\nBoth props and state can be accessed by \u0026ldquo;this\u0026rdquo; Both this.state and this.props are valid within the class scope.\nProps are immutable It is not supposed to be modified in any way. If the component needs to be \u0026ldquo;stateful\u0026rdquo; during the calls, always use state.\nAvoid Copying Props into State constructor(props) { super(props); // Don\u0026#39;t do this! this.state = { color: props.color }; }   This is a common mistake. It’s unnecessary (use this.props.color instead) and prone to bugs (updates to the color prop won’t be reflected in the state).\nOnly use it if you want to disregard prop updates. In that case, it makes sense to rename the prop to be called initialColor or defaultColor. You can then force a component to “reset” its internal state by changing its key when necessary.\nRead this post on avoiding derived state to learn about what to do if you think you need some state to depend on the props.\n Reactjs.org\n State Updates May Be Asynchronous setState() \u0026ldquo;schedules\u0026rdquo; an update to a component’s state object. When state changes, the component responds by re-rendering.\nConsider using setState() that accepts a function rather than an object when you need to update state variables.\n React may batch multiple setState() calls into a single update for performance. In React, state must only be updated by setState() (only exception is within constructor()).\nThis is because manual updates won\u0026rsquo;t trigger UI updates since React doesn\u0026rsquo;t know state has changed.\nTo fix it, use a second form of setState() that accepts a \u0026ldquo;updater\u0026rdquo; function object as parameter.\n// Wrong. counter may not be updated immediately since setState() may be delayed in execution by React this.setState({ counter: this.state.counter + this.props.increment, }); // Correct. See explaination above this.setState((state, props) =\u0026gt; ({ counter: state.counter + props.increment })); In React, \u0026ldquo;updater\u0026rdquo; function takes the following signature:\n(state, props) =\u0026gt; stateChange The return value of the updater is shallowly merged with state. For example, in the following code, the return value of the function. will be assigned to state.counter:\nthis.setState((state, props) =\u0026gt; { return {counter: state.counter + props.step}; });  State holds all its variables React merges the object you provide into the current state.\nconstructor(props) { super(props); this.state = { posts: [], comments: [] }; } When you update comments with the following code, it leaves this.state.posts intact, but completely replaces this.state.comments.\nState is not accessible to other components State is not accessible to any component other than the one that owns and sets it.\n Think of state as a \u0026ldquo;protected\u0026rdquo; member variable encapsulated in React.Component class. It can be accessed by its derived classed but not from outside.   It is the philosophy that neither parent nor child components can know if a certain component is stateful or stateless, and they shouldn’t care its implementation details, such as whether it is defined as a function or a class.\nIn React apps, whether a component is stateful or stateless is considered an implementation detail of the component that may change over time. You can use stateless components inside stateful components, and vice versa.\nBe cautious about using \u0026ldquo;this\u0026rdquo; in a class method Unlike in C++ where this is accessible in any class method including in the constructor, in JS, this is undefined until it is bound.\nFirst, let\u0026rsquo;s take a look at this example where I purposely made an attempt to access this in constructor and get the following error:\nUncaught ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor at pen.js:-12 Second, in member methods this is undefined until it is bound.\nIn the following example code, if you forget to bind this.handleClick and pass it to onClick, this will be undefined when the function is actually called.\nThis is not React-specific; it is a part of how functions work in JavaScript.\nGenerally, if you refer to a method without () after it, such as onClick={this.handleClick}, you should bind that method.\nThere are two (recommended) ways to do it:\n// bind a method in constructor constructor(props) { super(props); this.state = {isToggleOn: true}; // This binding is necessary to make `this` work in the callback  this.handleClick = this.handleClick.bind(this); } // or the following way handleClick = () =\u0026gt; { console.log(\u0026#39;this is:\u0026#39;, this); } In either way, the method is bound and the render() will work:\nrender() { return ( \u0026lt;button onClick={this.handleClick}\u0026gt; Click me \u0026lt;/button\u0026gt; ); } ","date":1592092800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592697600,"objectID":"9f6701ebc2f92fefc0ed986deac0636f","permalink":"https://davidxiao.me/post/notes-from-my-journey-in-reactjs/","publishdate":"2020-06-14T00:00:00Z","relpermalink":"/post/notes-from-my-journey-in-reactjs/","section":"post","summary":"The Good, ~~the Bad and the Ugly.~~","tags":["javascript","react.js"],"title":"Notes from My Journey Learning Javascript and React.js","type":"post"},{"authors":["David Xiao"],"categories":["Coding"],"content":"Onboarding an existing project to GitHub If the project is not yet initialized by git, do the following first\ngit init ; # then create a .gitignore file if needed git add . ; git status -u ; # will show you all the files to be committed. git commit -m \u0026#34;init commit\u0026#34; ; Then connect it to GitHub\ngit remote add origin git@github.com:davxiao/my-proj.git ; git branch --set-upstream-to=origin/master master ; git pull origin master --allow-unrelated-histories ; git push ; ","date":1591920000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591920000,"objectID":"404329cd4368a7d9443a994170b0d483","permalink":"https://davidxiao.me/post/my-awesome-github-cheatsheet/","publishdate":"2020-06-12T00:00:00Z","relpermalink":"/post/my-awesome-github-cheatsheet/","section":"post","summary":"An awesome list of useful git slash github commands I compiled over time.","tags":["github","git","cheatsheet"],"title":"My Awesome GitHub CheatSheet","type":"post"},{"authors":["David Xiao"],"categories":["Site-Building"],"content":"If you own a personal site and like to make both your site and visitors secure, read this: Just because you\u0026rsquo;ve enabled HTTPS does not mean it\u0026rsquo;s sound and secure.\nTLS v1.0 and v1.1 are known to be vulnerable and should not be allowed on your site. It is a security best practice to make TLS v1.2 the minimum version allowed on your site.\nFor more detail, check out this post on Google Security Blog and this post on Google Chrome Browser Updates.\nGet a Test on your Site You can use SSLLabs to conduct a quick test on your site.\n  Initial test results   Click on any of the server will give you a brief explaination on the findings.\n  See explaination here   I\u0026rsquo;m using Cloudflare as CDN for api.davidxiao.me, so I went on to the Cloudflare portal and updated the \u0026ldquo;Minimum TLS Version\u0026rdquo; to \u0026ldquo;TLS 1.2\u0026rdquo;.\n  Updating minimum TLS version to 1.2   Then performed a re-scan. It looks much better this time.\n  The new results   Hope this is helpful!\n","date":1591833600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591833600,"objectID":"f287de2a3bb9f1d3288d7f84d12d7a34","permalink":"https://davidxiao.me/post/secure-your-https-ssl-tls/","publishdate":"2020-06-11T00:00:00Z","relpermalink":"/post/secure-your-https-ssl-tls/","section":"post","summary":"To site owners: Just because you've enabled HTTPS does not mean it's sound and secure. TLS v1.0 and v1.1 is unsecure and phasing out. ","tags":["security","https","tls"],"title":"Secure Your HTTPS / SSL / TLS","type":"post"},{"authors":["David Xiao"],"categories":["Homelab","Site-Building"],"content":"You will need the following to get dynamic DNS working on Cloudflare:\n  Cloudflare as your DNS provider. Migrating from your current DNS provider over to Cloudflare is easy and free whether you are using Godaddy, Namecheap or another one.\n  Get API token set up on Cloudflare.\n  Install cloudflare-cli.\n    Cloudflare API token    Cloudflare Token is preferred way over API key as token enables added security by allowing to specify access level with permissions and resources.\nToken can be disabled when not in use.\n  When those are met, a one-liner like the following will update A record api.davidxiao.me with your public internet IP.\nNOTE: If you are only using DDNS on Cloudflare and not using its CDN, remove --activate from the command below.\n$ env CF_API_KEY=\u0026#39;your-own-cloudflare-token-NOT-api-key\u0026#39; \\  CF_API_DOMAIN=\u0026#39;your-own-TLD-such-as-davidxiao.me\u0026#39; \\  cfcli --activate --type A edit your-subdomain-such-as-api.davidxiao.me \\  `curl -s \u0026#39;https://ip.seeip.org/\u0026#39;` ; Finally, put the code it into crontab will automate the process.\n","date":1591747200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591747200,"objectID":"c6c5540080ee57d9e628a5edae3468b4","permalink":"https://davidxiao.me/post/dynamic-dns-on-cloudflare/","publishdate":"2020-06-10T00:00:00Z","relpermalink":"/post/dynamic-dns-on-cloudflare/","section":"post","summary":"You will need the following to get dynamic DNS working on Cloudflare:\n  Cloudflare as your DNS provider. Migrating from your current DNS provider over to Cloudflare is easy and free whether you are using Godaddy, Namecheap or another one.","tags":["self-hosting","cloudflare","ddns","dynamic-dns"],"title":"Dynamic DNS on Cloudflare in 5 Minutes","type":"post"},{"authors":["David Xiao"],"categories":["Homelab","Site-Building"],"content":"Suppose you plan on hosting multiple API endpoints on one domain, make it api.your-domain.com, one way to do it is to put each endpoint under a distinctive path, each one would look like:\nhttps://api.your-domain.com/myapp1/    Tunneling through a Nginx reverse proxy   Configure a reverse proxy such as Nginx and set up rewrite rules can get it done quickly.\nSee below my example:\n Depending on your Linux distro and Nginx, most would need to put the conf file under /etc/nginx/sites-available/ directory and create a symbol link in /etc/nginx/sites-enabled/.\nRestart nginx service by sudo systemctl restart nginx ; and it\u0026rsquo;s working!\n","date":1591747200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591747200,"objectID":"626dbdf75bd549cb5401924f9e8f0fdb","permalink":"https://davidxiao.me/post/hosting-multiple-containers-with-nginx-rewrite-rules/","publishdate":"2020-06-10T00:00:00Z","relpermalink":"/post/hosting-multiple-containers-with-nginx-rewrite-rules/","section":"post","summary":"A reverse proxy such as Nginx will come in handy if you need to host multiple apps on a single domain. Here's a 5-minute how-to.","tags":["self-hosting","nginx","nginx rewrite"],"title":"Hosting Multiple Apps With Nginx Rewrite Rules","type":"post"},{"authors":["David Xiao"],"categories":["Homelab","Site-Building","Cloud"],"content":"TLDR;\n👉 This post talks about hosting remark42 commenting system as Docker container; Leveraging Cloudflare to protect the remark42 endpoint; Integrating remark42 to a static site which is built on Hugo and academic theme.\nBefore getting started, take a look at the posts on my blog at davidxiao.me and see the way commenting works.\nWhat Will be Covered in This Post   Deploy remark42 container on Docker\n  Protect your remark42 endpoint with Cloudflare CDN\n  Integrate remark42 to your Hugo site\n  Step 1. Deploy Remark42 on your Host  Remark42 is an open source commenting system that can be deployed as container. It\u0026rsquo;s self-contained with little external dependencies. You can find deployement guide on its Remark42\u0026rsquo;s git repo.\nFeel free to do container your way but if you are interested in what tool I use for docker management, it\u0026rsquo;s Portainer.\nI have the following parameters on my remark42 container:\nREMARK_URL make sure it has the full path if you are using reverse proxy and rewrites, e.g. https://api.davidxiao.me/remark42 SITE\tsite id. For example: davidxiao SECRET\trequired. can be a long and hard-to-guess string DEBUG\ttrue AUTH_GOOGLE_CID your own value AUTH_GOOGLE_CSEC your own value AUTH_FACEBOOK_CID your own value AUTH_FACEBOOK_CSEC your own value AUTH_TWITTER_CID your own value AUTH_TWITTER_CSEC your own value AUTH_GITHUB_CID your own value AUTH_GITHUB_CSEC your own value ADMIN_SHARED_EMAIL mail address that will receive notifications such as new comments NOTIFY_EMAIL_ADMIN\ttrue NOTIFY_TYPE\temail NOTIFY_EMAIL_FROM\tmail address that is in the same domain see Mailgun settings. For example, mine is remark42@davidxiao.me AUTH_EMAIL_FROM\tyour own value ADMIN_SHARED_ID\tOAuth authenticated user id that has admin access. see https://github.com/umputun/remark42#admin-users SMTP_HOST\tsmtp.mailgun.org SMTP_PORT\t465 SMTP_TLS\ttrue SMTP_USERNAME\tSMTP credential from Mailgun SMTP_PASSWORD\tyour own credential For more detail on how to configure email configuration on Remark42, check this out.\nApp Registration on the OAuth Providers Before registering you Remark42 app on google, facebook, twitter and github (the OAuth providers Remark42 supports), you would need to determine the domain name of your Remark42 api endpoint.\n  My app registration page on facebook as an example   DDNS(Dynamic DNS) comes in handy whether you are hosting Remark42 container on cloud such as AWS EC2 or on your homelab, since it allows you to update DNS A records whenever your endpoint IP changes.\n Selecting a DDNS provider is important for a few reasons.\n  Protection of your host\u0026rsquo;s public IP is important for self-hosting web apps. Using DDNS alone means your domain name gets resolved to your public IP. DDNS + CDN is a better approach.\n  Each OAuth provider has its own rules over whether an given OAuth redirect URI is allowed. For example, facebook does not allow any duckdns.org as part of redirect URI at time of writing.\n  Service availability concern. Your app will become inaccessible when the DDNS it relies on stops working.\n  The security posture of the DDNS provider. If the service provider gets compromised, you DDNS domain name can be \u0026ldquo;hijacked\u0026rdquo;.\n    My approach:\n  Set up your public endpoint leveraging a DNS provider such as Cloudflare that has large operating scale, supports DDNS management over API and offers CDN protection over your private endpoint. See here for more.\n  On your private endpoint, Use a reverse proxy such as Nginx to rewrite URLs so that multiple apps can be \u0026ldquo;tunneled through\u0026rdquo; a single domain name when needed. See here for more.\n  Use Nginx control policy to restrict access to only Cloudflare IPs and local trusted networks.\n  Step 2. Protect(tunnel) your Endpoint You need to use Cloudflare as DNS provider before enabling Cloudflare CDN.\nTo enable CDN, first go to Cloudflare portal and enable CDN for your remark42 subdomain. In my case it\u0026rsquo;s api.davidxiao.me.\n  Enabling Proxy by clicking on the Proxy status icon   Second, modify caching level to \u0026ldquo;No query string\u0026rdquo;. No Query String means it only delivers files from cache when there is no query string. It\u0026rsquo;s the caching behavior we expect for an API endpoint, isn\u0026rsquo;t it?\n  Enabling Proxied by clicking on Proxy status icon   Step 2.1 Enable End-to-end HTTPS with Cloudflare There are several SSL options provided by Cloudflare. Check this out to understand the difference.\nBased on my own needs, I\u0026rsquo;ve set up a \u0026ldquo;Full\u0026rdquo; mode in Cloudflare, which ensures a secure connection between both the web browser and Cloudflare and between Cloudflare and my endpoint. This option uses a self-signed certificate at the my endpoint web server.\n  Enabling SSL in Full mode     Generate and download Cloudflare\u0026rsquo;s self-signed certificates   Save the origin certificat as origin-cert.pem and the private key as priv.key, place both files on your host and make sure they both have ownership of root and have 0600 permissions.\nThen you just need to add the file locations in your nginx configuration file. See below my configruation files for example:\n Step 3. Integrate Remark42 to Your Hugo Site Override the comments.html template by:\n$ cp your-project-root/themes/academic/layouts/partials/comments.html your-project-root/layouts/partials/comments.html and modify the new one as you see fit.\nThe following is my modified version of comments.html.\n Conclusion Congrats! You\u0026rsquo;ve got the remark42 commenting system integrated to your Hugo site.\nComments and Feedback are welcome!\n","date":1591660800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591660800,"objectID":"ee0bc639306b982f76fe73369383b2ef","permalink":"https://davidxiao.me/post/adding-your-own-commenting-system-to-a-static-site/","publishdate":"2020-06-09T00:00:00Z","relpermalink":"/post/adding-your-own-commenting-system-to-a-static-site/","section":"post","summary":"If you are looking for guidance on integrating an open-source commenting system such as Remark42 to your site, here is how I did it.","tags":["self-hosting","hugo","hugo-academic","remark42","cloudflare","docker"],"title":"Integrating a Self-Hosting Commenting System to Your Site","type":"post"},{"authors":["David Xiao"],"categories":["Homelab"],"content":"Mailgun is a SaaS that provides email services (both sending and receiving) through both conventional SMTP and RESTful APIs. Find more detail here.\nIn this post we will cover the SMTP option as it can be easily integrated with Postfix.\nWhat\u0026rsquo;s Required You would need the following:\n  A custom domain name, something like yourcompany.com. You also need to have admin access to your DNS provider.\n  A Mailgun account that allows you to send out mails using your custom domain name. Payment information is required when signing up but no charges will take place at the moment.\n  Admin privilege on a Linux box to set up Postfix server. Outbound internet access is required.\n  Onboarding Mailgun Make sure you fill out payment information when signing up a new account on Mailgun. There\u0026rsquo;s no charge for small volume mail delivery but it\u0026rsquo;s a Mailgun requirement if you plan on delivering emails with your custom mail address like yourname@yourdomain.com.\n  Sign up on Mailgun   Mailgun provides multiple plans, the Flex Trial is essentially a pay-as-you-go option that works very well if you don\u0026rsquo;t need to deliver a large volume of emails everyday.\n  Flex Trial is pay-as-you-go   DNS Settings For Sending on Mailgun to work properly, you\u0026rsquo;ve got to update a few DNS settings. First, you\u0026rsquo;d have to add a subdomain to your domain for Mailgun MX. For example, I\u0026rsquo;ve added mg.davidxiao.me.\nThen you\u0026rsquo;d have to add a few TXT records on DNS.\n  Adding TXT records for sending emails   What About Receiving Receiving and forwarding incoming mails is a premium feature on Mailgun that requires spending commitments.\nI will write another post talking about using a free-of-charge mail forwading service. Stay tuned.\nSMTP Credential On Mailgun portal, under Settings/Domain Settings and click on SMTP credentials, you will be able to provision new SMTP credentials. The SMTP password will only show one time during user provisioning for security.\n  SMTP user credential and SMTP server detail   Which SMTP Port to Use Short version: It depends on what your client can support.\nLong version:\nMailgun indicates the following ports are open: 25, 587, and 465 (SSL/TLS)\nPort 25 is not recommended because many enterprise firewalls deny it for security reasons.\nPort 587 is the STARTTLS version. In short, client first initiates a plain TCP connection. When server advises that it supports STARTTLS, client will respond with STARTTLS and proceed with reconnecting to the same 587 port, this time with TLS handshake. The protocol is such that server will deny TLS handshakes in the first place if client did not complete an initial TCP session and ask for STARTTLS.\nPort 465 is the \u0026ldquo;straight-in\u0026rdquo; SSL/TLS in that it deals with every session as TLS.\nPostfix Postfix can be easily installed on almost any Linux distro. On Ubuntu, run:\nsudo apt install libsasl2-modules postfix ; Then create a file /etc/postfix/sasl/sasl_passwd_mailgun. Copy the following line into the file, replacing your-username@mg.yourdomain.com:your-password-here with your actual SMTP credential.\n[smtp.mailgun.org]:587 your-username@mg.yourdomain.com:your-password-here Run:\nsudo postmap /etc/postfix/sasl/sasl_passwd_mailgun ; If all went well, you have a new file as /etc/postfix/sasl/sasl_passwd_mailgun.db. It\u0026rsquo;s what Postfix will be reading from for Mailgun SMTP authentication.\nSecure the passwords Both sasl_passwd_mailgun and sasl_passwd_mailgun.db contain plain text of your app password, to secure the access, you need to:\nsudo chown root:root /etc/postfix/sasl/sasl_passwd_mailgun /etc/postfix/sasl/sasl_passwd_mailgun.db ; sudo chmod 0600 /etc/postfix/sasl/sasl_passwd_mailgun /etc/postfix/sasl/sasl_passwd_mailgun.db ; Setting up Postfix\u0026rsquo;s main configuration file is /etc/postfix/main.cf. See the following my own configuration for your reference.\n   myhostname indicates the hostname of the Postfix\n  mynetworks is the IP CIDRs that are allowed to relay mails through Postfix. It should only contain your local networks\n  smtp_sasl_password_maps is where the sasl_passwd file is located\n  relayhost is the server name and port. Replace it with[smtp.mailgun.org]:587\n  Edit the values respectively.\nFor security reason, do not expose Postfix service to anywhere outside of your trusted networks.\nIn the example above, I am allowing anonymous SMTP authentication from mynetworks. The argument can be made that attackers will be after more valuable targets than fiddling with Postfix relay service provided the local network is compromised.\nTesting and Troubleshooting When config file is done, reload Postfix configurations without having to restart the service:\nsudo postfix reload ; For SMTP testing, I personally like to use swaks, a purpose-built Perl script.\nWith swaks installed, it will be just a one-liner to send out a testing mail:\n./swaks \\  --server \u0026lt;your-postfix-server-ip\u0026gt; \\  --port 25 \\  --from yourname@yourdomain.com \\  --to anymailbox@wherever.com \\  --h-Subject: \u0026#34;Hello world\u0026#34; \\  --body \u0026#39;Testing some Mailgun awesomness!\u0026#39; If you suspect something went wrong, go check the logs:\nsudo tail -f /var/log/syslog ; # and sudo tail -f /var/log/mail.err ; That\u0026rsquo;s it!\nOn a side note, there are lots of tweaks can be done on the Postfix end depending on what you need to achieve, but this simple guide should be able to get you started quickly.\nLet me know if you have any questions or comments.\n","date":1591401600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591401600,"objectID":"6594869e12680af7c30fde196ac33f2a","permalink":"https://davidxiao.me/post/setting-up-a-mailgun-relay-with-postfix/","publishdate":"2020-06-06T00:00:00Z","relpermalink":"/post/setting-up-a-mailgun-relay-with-postfix/","section":"post","summary":"Set up a Postfix server on local network that relays outgoing emails through Mailgun SMTP.","tags":["homelab","postfix","mailgun","mailgun relay"],"title":"Setting Up a Mailgun Relay With Postfix","type":"post"},{"authors":["David Xiao"],"categories":["Homelab"],"content":"You would need the following to set up a gmail relay on Postfix:\n  An app password obtained from your Gmail account. It will be effectively your Gmail SMTP password.\n  Admin privilege on a Linux box to set up Postfix server. Outbound internet access is required.\n  Google App Password App passwords let you sign in to your Google Account from apps that don\u0026rsquo;t support 2-Step Verification. This post from Google explains how to obtain an app password.\n  Sign up for an App Password on your Google Account   Essentially, first you need to go to Google Account and enable two Factor Authentication. Without enabling 2FA, app password option is disabled on Google.\nThen click on \u0026lsquo;Security\u0026rsquo; from the left, click on \u0026lsquo;App passwords\u0026rsquo; under \u0026lsquo;Signing in to Google\u0026rsquo; and click on \u0026lsquo;Generate\u0026rsquo; button, here you go. Copy the password as we will need it later.\nThe rest of the post is using Ubuntu as an example, but the approach should work for most recent Linux distro in general.\nPostfix Postfix can be easily installed on almost any Linux distro. On Ubuntu, run:\nsudo apt install libsasl2-modules postfix ; Then create a file /etc/postfix/sasl/sasl_passwd. Copy the following line into the file, replacing your@gmail.com with your actual Gmail; abcdefghijk123 with your actual app password.\n[smtp.gmail.com]:587 your@gmail.com:abcdefghijk123 Run:\nsudo postmap /etc/postfix/sasl/sasl_passwd ; If all went well, you have a new file as /etc/postfix/sasl/sasl_passwd.db. It\u0026rsquo;s what Postfix will be reading from for Gmail SMTP authentication.\nSecure the passwords Both sasl_passwd and sasl_passwd.db contain plain text of your app password, to secure the access, you need to:\nsudo chown root:root /etc/postfix/sasl/sasl_passwd /etc/postfix/sasl/sasl_passwd.db ; sudo chmod 0600 /etc/postfix/sasl/sasl_passwd /etc/postfix/sasl/sasl_passwd.db ; Setting up Postfix\u0026rsquo;s main configuration file is /etc/postfix/main.cf. See the following my own configuration for your reference.\n   myhostname indicates the hostname of the Postfix\n  mynetworks is the IP CIDRs that are allowed to relay mails through Postfix. It should only contain your local networks\n  smtp_sasl_password_maps is where the sasl_passwd file is located\n  relayhost is the server name and port\n  Edit the values respectively.\nFor security reason, do not expose Postfix service to anywhere outside of your trusted networks.\nIn the example above, I am allowing anonymous SMTP authentication from mynetworks. The argument can be made that attackers will be after more valuable targets than fiddling with Postfix relay service provided the local network is compromised.\nTesting and Troubleshooting When config file is done, reload Postfix configurations without having to restart the service:\nsudo postfix reload ; For SMTP testing, I personally like to use swaks, a purpose-built Perl script.\nWith swaks installed, it will be just a one-liner to send out a testing mail:\n./swaks \\  --server \u0026lt;your-postfix-server-ip\u0026gt; \\  --port 25 \\  --from yourmail@gmail.com \\  --to anymailbox@wherever.com \\  --h-Subject: \u0026#34;Hello world\u0026#34; \\  --body \u0026#39;Testing some Mailgun awesomness!\u0026#39; If you suspect something went wrong, go check the logs:\nsudo tail -f /var/log/syslog ; # and sudo tail -f /var/log/mail.err ; That\u0026rsquo;s it!\nOn a side note, there are lots of tweaks can be done on the Postfix end depending on what you need to achieve, but this simple guide should be able to get you started quickly.\nLet me know if you have any questions or comments. On my post I will be discussing setting up a Mailgun relay. Stay tuned!\n","date":1591315200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591315200,"objectID":"a6c6a4f34a210c3670766ea945bc7735","permalink":"https://davidxiao.me/post/setting-up-a-gmail-relay-with-postfix/","publishdate":"2020-06-05T00:00:00Z","relpermalink":"/post/setting-up-a-gmail-relay-with-postfix/","section":"post","summary":"Set up Postfix that relays outgoing emails through your personal Gmail account.","tags":["homelab","postfix","gmail","gmail relay"],"title":"Setting up a Gmail Relay With Postfix","type":"post"},{"authors":["David Xiao"],"categories":["Homelab"],"content":" TL;DR\nInstall and configure Proxmox as KVM hypervisor.\n  Playing 三國志XIII on Win10 guest through Remote Desktop   ","date":1590710400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590710400,"objectID":"ed7797a56d44b5b65ba3e870422a0de8","permalink":"https://davidxiao.me/post/my-homelab-setup-from-hardware-to-kvm-part-2/","publishdate":"2020-05-29T00:00:00Z","relpermalink":"/post/my-homelab-setup-from-hardware-to-kvm-part-2/","section":"post","summary":"Install and configure Proxmox as KVM hypervisor.","tags":[],"title":"My Homelab Setup From Hardware to KVM - Part 2","type":"post"},{"authors":["David Xiao"],"categories":["Homelab"],"content":" TL;DR\nI plan on writing a few posts about my Homelab project. This is the first one focusing on the hardware spec and networking.\n Last year I decided to set up a homelab to learn technologies, to run some services for my own use and more importantly, to have fun.\nThere is a budget and a few high level requirements on the infrastructure side I worked on:\n  Be able to run a hypervisor that supports both Linux and Windows virtual machine\n  One single host. No clustering\n  Use open source as long as the it\u0026rsquo;s mature enough\n  Easy to manage and operate\n  Cost effective\n  No dedicated networking hardware\n  I plan on writing a few posts with respect to the HW spec I chose, the architecture decisions I made along the way and how I built the whole lab. This is the first post.\nHardware  table th:nth-of-type(1){ width: 20%; } table th:nth-of-type(2) { width: 30%; } table th:nth-of-type(3) { width: 50%; }     Item Spec Notes     CPU AMD Ryzen 7 3700x 65W TDP. 8-core, 16-thread, 7nm   Motherboard ASUS PRIME X470-PRO See my notes   Memory 16gb x2 ECC UDIMM Unbuffered ECC   System Storage 250GB SATA SSD See my notes   Data Storage 4TB HDD As temporary data storage   Networking On-board Gigabit Ethernet See my notes   Graphics Card #1 Asus GeForce GTX 1660 Super model: TUF-GTX1660S-O6G-GAMING See my notes   Graphics Card #2 MSI GeForce GT 710 1GB Fanless design    Accessories such as case and power supply are not listed but included in the total cost.\nTotal Cost The hardware cost of my homelab is around CA $1,400 when I bought them back in December 2019.\nMotherboard If you need to use ECC memory, you have to pick a motherboard that support ECC. In consumer grade motherboard market, look no further than ASUS and ASROCK. Those two are know for building consumer grade ECC-enabled motherboards.\nIf you need to manage your homelab hypervisor from a remote location, and be able to access it when troubleshooting something low level, e.g. when hypervisor is crashed or configuring BIOS, you have two choices: Phyical Access or IPMI.\nPhyical Access It means hook up a display, a keyboard and a mouse to your server and sit in front of it when troubleshooting.\nIPMI With IPMI, tasks such as power on/off the machine, configure BIOS settings and monitor console output all can be done from remote wia a web portal. Motherboards that support IPMI typically provide a dedicated Ethernet port for IPMI management. Learn more about IPMI here.\nASROCK has some pretty good IPMI-enabled workstartion motherboards. For AMD cpu, take a look at ASROCK X470D4U or x470d4u2-2t with 10G networking. There are also x570d4i-2t to be released in 2020.\nStorage To have flexability and speed, I need two kinds of storage. Direct Attached Storage (DAS) for hypervisor and guest OS images and Network Attached Storage (NAS) for data such as video and photos.\nSSD as DAS M2.SSD is my primary choice for DAS since it\u0026rsquo;s much faster than SATA SSD both on paper and in reality. So I bought a XPG SX8800 PRO 1TB and installed it on my server.\nUnfortunately my server started freezing up randomly every a few hours to a few days. Troubleshooting proved to be one hell of an effort when my server is in the basement without a dedicated display. I\u0026rsquo;d have to take an external display from my home office down to the basement for troubleshooting. IPMI could have saved my day.\n  Error messages showing I/O error on nvme0n1   It took some time to reproduce the problem and troubleshoot the issues. Finally I was able to conclude that the controller chip that XPG SX8800 PRO uses may have compatibility issue with PRIME X470-PRO. After I replaced the M2.SSD with an old SATA SSD that I have, the server runs smoothly without any issues.\nSynology NAS I have a Synology DS416play. It\u0026rsquo;s a little home NAS with 4 bays and 1GB memory. I\u0026rsquo;ve since upgraded the memory to 8G and have it fitted with 4x10G HDD. In terms of usable space it has around 27T with one disk fault tolerance which is more than enough for me.\nThe downside of this NAS is it only has Gigabit Ethernet. If you think 10G is appealing, I\u0026rsquo;m totally with you. QNAP is offering a number of 10G ready NAS. Check it out here for detail.\nNetworking My home network topology is rather simple. Both homlab server and NAS are connected to the internet router. The router provides basic functionalities such as IP management and port mapping.\n  Home Network Diagram   Given my home network cables are all Cat5 supporting up to 1 Gigabit, I have to stay with 1G network and the on-board Gigabit Ethernet works well in my setup.\nIf you are considering 10G, you would need to make sure all critial devices on the network (e.g. router, NAS, Wifi etc.) are capable of dealing with the throughput, since any performance bottleneck can be the low watermark that undermines the overall network performance.\nGPU Passthrough The KVM hypervisor supports passing graphics card(s) onto dedicated guest OS.\nOn my setup, GTX1660 is the primary card for tasks such as streaming encoding/decoding whereas the GT710 is pass-through to a Win10 guest. This setup allows me to play a few not-so-demanding games on the Win10 through remote desktop.\n  Playing 三國志XIII on Win10 guest through Remote Desktop   I will discuss more on GPU passthrough in the next post.\n","date":1590624000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590624000,"objectID":"97dd21703514933ab3aad135fc7b49ed","permalink":"https://davidxiao.me/post/my-homelab-setup-from-hardware-to-kvm-part-1/","publishdate":"2020-05-28T00:00:00Z","relpermalink":"/post/my-homelab-setup-from-hardware-to-kvm-part-1/","section":"post","summary":"I plan on writing a few posts about my Homelab project. This is the first one focusing on the hardware spec and networking","tags":["kvm","homelab","amd ryzen","kvm","proxmox","pve"],"title":"My Homelab Setup From Hardware to KVM - Part 1","type":"post"},{"authors":["David Xiao"],"categories":["Cloud"],"content":" TL;DR\nThis post will show you how to build and deploy a voice-activated app on Google Cloud in 10 minutes. It responds to your commands and plays personalized music if you ask! Not a bad way to play on someone\u0026rsquo;s birthday, eh?\nCreate a New Project on Google Actions Console The app is built on Google Cloud using Google Actions and Dialogflow. If you don\u0026rsquo;t have a Google Actions account, click here to create a new one. It\u0026rsquo;s free.\nWhen the account is created, go ahead and create a new project. Google Actions allows you to add Actions support to existing GCP projects, but we will create a new one to keep it simple.\n  Create a new project   Specify a Catchy Name for Your App You need to specify a catchy name for the app so that every time when you say those \u0026ldquo;gateway words\u0026rdquo; to the Google Home device, it will activate the app for you.\nGo to the project dashboard, click on \u0026ldquo;Quick setup\u0026rdquo; followed by \u0026ldquo;Decide how your action is invoked\u0026rdquo; and put the app name here. It may reject the name if it\u0026rsquo;s too common or ambiguous, e.g. \u0026ldquo;Hello\u0026rdquo; is probably not a good choice here.\nFor example, my app is called \u0026ldquo;Hello Jukebox\u0026rdquo;.\n  Specify a catchy name for your app   Add Actions to Your App There is no secret sauce. An app is only as smart as what it\u0026rsquo;s taught. This app will respond to voice commands and act accordingly based on the intents developeed for it. \u0026ldquo;Intent\u0026rdquo; is a Google term referring to a combination of voice command and its response.\nWithin one app, developer can create as many intents as they want as long as no intent is stepping on one another\u0026rsquo;s toes. For example, trying to create two separate intents both responding to the same command \u0026ldquo;what is my favoriate color\u0026rdquo; would be confusing to begin with.\nWithin an intent, developer can decide on the kind of response it needs to give: it can be as simple as having Google Home say something or be more complicated with custom logic.\n  Add a new Action to your app   Use Case 1: Simple Voice Commands and Text Responses Scroll down the Actions dashboard until the Fulfillment section, click on \u0026ldquo;Edit in Dialogflow\u0026rdquo; and click on the Intents. Start adding intents.\n  Edit in Dialogflow     Add new Intent   For example, you may want to create an intent called \u0026ldquo;special-intent\u0026rdquo;, add \u0026ldquo;Do you know why today is so special\u0026rdquo; as voice command and add \u0026ldquo;Of course I know, David\u0026rdquo; as text responses to the intent. Those are what you would say to the app and what the app will say back respectively.\n  A list of intents I added     Text Responses   Use Case 2: Implement custom logic using Cloud Function The second use case is enabling webhook in an intent and developing a handler for it.\nThis approach allows you to implement custom logic for an intent. GCP supports either running your custom code on a Cloud Function or calling an external web service you specify.\n  Text Responses   I will use the Cloud Function way for this example since we don\u0026rsquo;t need to worry about resource or storage thanks to its serverless nature.\nFirst, you need to enable \u0026ldquo;Webhook\u0026rdquo; on the intent that needs to have custom logic. Second, click on the Fulfillment on the left navbar and enable Inline editor. Last, copy and paste the following code example and click on save. That\u0026rsquo;s it.\nThe code example will first say something then play an audio clip. If you need to play something else, e.g. a peronalized audio clip, you can replace the URL with your own thing, but then you would have to deal with access control.\n Testing Your New App on Simulator Click on \u0026ldquo;Google Assistant\u0026rdquo; on the right bar to open the Simulator on Google Actions. From there you can tinker with your app until you\u0026rsquo;re satisfied with it :-)\n  Text Responses   Deploying to your Google Home Device Making your app available on Google Assistant Actions Portal sounds like a great idea, however the releasing process could take some time as Google needs to review and approve your app first before it can be released. Since my post promised you a 10-minute ride, let\u0026rsquo;s rolling to get the freshly baked app onto your own Google Home device.\nOn Actions console, click on \u0026ldquo;Deploy\u0026rdquo;, choose \u0026ldquo;Alpha\u0026rdquo;, click on \u0026ldquo;Manage Alpha Testers\u0026rdquo;, and add your own Google Home device account email here. You can then switch to your Google Home account and use the opt-in link received on the invitation email to accept the invite.\n  Make an Alpha Deployment   When it\u0026rsquo;s ready, click on \u0026ldquo;Create a release\u0026rdquo;, and wait it to complete. It can take a few minutes.\nCongrats! You\u0026rsquo;ve just developed and deployed your first Google Home app in 10 minutes! Try say to your Google Home: \u0026ldquo;Hey Google, Talk to your_app_name_here\u0026rdquo; and see what happens :)\n","date":1590451200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590451200,"objectID":"568466a0369b7a28c2719b3586e50773","permalink":"https://davidxiao.me/post/building-your-first-app-on-google-home/","publishdate":"2020-05-26T00:00:00Z","relpermalink":"/post/building-your-first-app-on-google-home/","section":"post","summary":"Build and deploy a voice-activated app on Google Home in 10 minutes. It responds to your commands and plays personalized music if you ask! Not a bad way to play on someone's birthday, eh? :-)","tags":["cloud","gcp","google home","google cloud function"],"title":"Building Your First App on Google Home in 10 minutes","type":"post"},{"authors":["David Xiao"],"categories":["Raspberry-Pi"],"content":"A little teaser here: Raspberry Pi is not really ediable :-)\nSo I have a Raspberry Pi Zero W for about one year now.\nIt runs a few software. One of them is called Pi-Star. It\u0026rsquo;s an open source toolkit for digial voice over amateur radio. Find more detail about Pi-Star here.\nAmateur radio is one of my hobbies. Figuring out how digital voice modes work in the amateur radio world took some time for me but it was rewarding. At the end of the day, listening to hams talking about their passions from all over the world on my little handheld radio feels amazing.\nPi-Star works very well in my setup, so when I found out Pi-Star does not display my public IP address on OLED, I decided to write some code for it.\nHere\u0026rsquo;s what it looks like.\n  OLED display showing my Public IP    1. Download the Toolchain with Extra Libs and Headers I use Ubuntu 20.04 on my homelab as cross compiling platform, but any recent Linux distro should work.\nMy toolchain is a fork from the original toolchain with extra libs and headers for compiling MMDVMHost.\n$ cd ~/code $ git clone https://github.com/davxiao/tools.git  2. Code is the Easy Part \u0026lt;3 Pi-Star consists of a few components including a PHP frontend and a few programs as backend for data exchange over various digital voice networks.\nMMDVMHost is the program that interfaces to the digital voice modem (MMDVM) on one side, and a suitable network on the other. It\u0026rsquo;s written in standard C++ with dependencies to external libs such as ArduiPi_OLED.\nFor my purpose, I added some code in CNetworkinfo class and COLED class. If you don\u0026rsquo;t know much about C++, no worries, just download all source code from my github repo.\nDownload my repo:\n$ cd ~/code $ git clone https://github.com/davxiao/MMDVMHost.git  3. Prep for the Cross Compilation In MMDVMHost/cmake/CrossCompile.cmake, you wanted to update toolchain paths so that CMake will be able to generate correct Makefile afterwards.\nWhen it\u0026rsquo;s done, run:\n$ cd MMDVMHost/cmake $ cmake ../ -DCMAKE_TOOLCHAIN_FILE=./CrossCompile.cmake  If you see warnings like this, try delete CMakeCache.txt and run the cmake command again.\nCMake Warning: Manually-specified variables were not used by the project: CMAKE_TOOLCHAIN_FILE 4. Last Step When Cmake is done, a Makefile was generated under the same directory. Run the following in the same directory:\n$ make ;  When the complication is complete, you should see MMDVMHost in the cmake/ directory. You may wish to run file ./MMDVMHost to confirm the target platform is ARM as opposed to amd64. Here\u0026rsquo;s my output:\n./MMDVMHost: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-armhf.so.3, for GNU/Linux 2.6.32, with debug_info, not stripped Congrats! You\u0026rsquo;ve built MMDVMHost using cross compilcation.\nDeployment You can skip this section if you have set up your own deployment pipeline.\nOn my homelab, I mount the same Samba share folder on both the Ubuntu and the Pi, then just copy the MMDVMHost over. Before replacing the MMDVMHost, you need to confirm the SD card is mounted in R/W mode and MMDVMHost service is stopped. Make a backup of the original MMDVMHost is also a good idea.\n$ rpi-rw ; $ sudo systemctl stop mmdvmhost ; $ sudo systemctl stop mmdvmhost.timer ; $ sudo cp ~/nas-dir/MMDVMHost.build /usr/local/bin/MMDVMHost ; $ sudo systemctl start mmdvmhost ; $ sudo systemctl start mmdvmhost.timer ;   If you experience mount error(115): Operation now in progress when mounting CIFS on Pi, it might be caused by the iptable rules set by Pi-Star.\nTo troubleshooting the issue, run the following commands on Pi-Star and see if mount works.\nNo worries, the following changes do not persist between restarts.\nsudo iptables -P INPUT ACCEPT; sudo iptables -P FORWARD ACCEPT; sudo iptables -P OUTPUT ACCEPT; sudo iptables -F; sudo iptables -X ; sudo iptables -nvL ;    ","date":1590364800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590364800,"objectID":"aa5e9008023e4ff275a095085263da18","permalink":"https://davidxiao.me/post/cross-compile-mmdvmhost-on-ubuntu/","publishdate":"2020-05-25T00:00:00Z","relpermalink":"/post/cross-compile-mmdvmhost-on-ubuntu/","section":"post","summary":"A quick \"How-to\" guide to compiling raspberry-pi programs on Ubuntu 20.04 using pi toolchain. This post takes Pi Zero W (BCM2708 chip) as an example but the approach would be applicable to other Pi systems.","tags":["raspberrypi","cross-compile","linux","c++","cmake"],"title":"Cross Compile MMDVMHost on Ubuntu","type":"post"},{"authors":["David Xiao"],"categories":["Site-Building"],"content":"In this post I will talk about how I built this website from the ground up using Hugo as site generator and Firebase as hosting provider. I wish you\u0026rsquo;ll find it helpful.\n Web development has come a long way. Back in the late 90\u0026rsquo;s when I first came across Internet, anyone who knows anything about HTML would be considered very technical.\nFast forward into 2020, social media and smart phone is ubiquitous, web hosting services such as Wix and Wordpress have made content creation possible for anyone who wishes to create a website without much headache.\nWhy should you building a website from the ground up as opposed to using a web hosting service?\nMaybe it\u0026rsquo;s for you Building a website with a static site generator is not for everyone. George Cushen who is Hugo theme Academic\u0026rsquo;s main contributor once put:\n \u0026hellip;(it would) require a basic understanding of using the command line in the Terminal (Mac/Linux) or Command Prompt (Windows) app on your computer. If you are not interested in this, perhaps this is not for you\u0026hellip;\n Original post\n But if going beyond content creation and learning more about building a website that is lightweight and secure, cost effective yet no vendor lock-in is your thing, then let\u0026rsquo;s dive right in.\nOverview First and foremost, let\u0026rsquo;s take a look on what will be covered in the post.\n  Register a domain name.\n  Set up Hugo as static site generator.\n  Use a kick-starter theme to get going quickly.\n  Deploy the site to Firebase.\n  Add your domain to the new site.\n  1. Register a domain name It\u0026rsquo;s pretty straightforward. You come up with a great domain name. It is better to be concise and easy to remember. Be creative \u0026lt;3.\nThen complete the domain registration on any Domain Name Registrar you prefer. I use Google Domains but there are other good choices such as Namecheap and GoDaddy.\n  Register a domain name on Google Domains   June 2020: For a few reasons, one being Google domains does not provide API for dynamic DNS (A records), I\u0026rsquo;ve changed my domain name registrar to Namecheap, my DNS provider to Cloudflare].\n2. Setting up Hugo  Hugo is a static site generator. There are many other site generators, I picked Hugo for a few reasons:\n It\u0026rsquo;s open source and backed by an active developer team and support community. It\u0026rsquo;s a monolithic program with no external dependencies. It\u0026rsquo;s production ready.  In a nutshell, Hugo renders content into HTML files and uploads the files onto your choice of hosting provider. Your content is what you write as content creator. Hugo takes content files written in Markdown (.md), a format that is intended to be used by technical and non-technical writers alike. Since inception, Markdown has become the de facto format in content creation and blogging.\nIf you need to learn about Markdown syntax, there are good guides such as Markdown Guide.\nInstalling Hugo On macOS, I recommend using a package manager such as Homebrew to manage third-party packages. With Homebrew installed, to install Hugo, just run:\n$ brew install hugo ;  All set. In case you need to check which Hugo version is installed, run hugo version. On my mac it returns Hugo Static Site Generator v0.70.0/extended darwin/amd64\nFor installing Hugo on Windows or Linux, refer to Hugo\u0026rsquo;s documentation.\n3. Use a kick-starter theme Hugo has built-in theme mechanism that allows developers to quickly run a theme and see the results. It also provides all the necessary building blocks for user to personalize the theme. There are many themes available on Hugo, for my own website I use Academic Theme. It also comes with a academic-kickstart repo on github for teasers.\nThe easy way to get started is to just fork the repo, download the code and run it.\n  Fork the kickstart into your own repo   Download the code:\n$ git clone \u0026lt;replace-it-with-your-own-repo-url\u0026gt; ; $ cd \u0026lt;your-repo-root-dir\u0026gt; ; $ git submodule update --init --recursive ; # get the latest Academic theme  Run Hugo to serve the test site:\n$ hugo server -D ;  Now visit http://127.0.0.1:1313/ on your web browser and you should see the homepage.\nCongrats! You\u0026rsquo;ve got your first Hugo website up and running on your local environment!\n Hugo only binds to local network address for security by default. If you need to test the site on another computer in your local network, run:\n$ hugo server -D --bind=0.0.0.0 ;    4. Deploy the new site to Firebase There are many out there: Google Firebase, GitHub Pages, Netlify and AWS Amplify to name a few. Each one has its own offering. I picked Firebase as my hosting provider because they seem to offer a bit more on their free tier.\nFirst, install Firebase CLI and (optional) Google Cloud SDK CLI.\n  Firebase CLI. The recommended way is to run npm i -g firebase-tools ; See its github repo for more detail. If you don\u0026rsquo;t have npm installed yet, run: brew install node ;. npm will be installed alongside node.js.\n  Google Cloud SDK CLI. Run brew cask install google-cloud-sdk ;\n  Next, go to Firebase to set up an account and create a new Firebase project. Make sure it uses the default free tier plan which is called Spark. Be noted you need to specify GCP resource location under Project Overview in Firebase Dashboard after project is created. The location can not be changed afterwards, so choose something close to you would be wise.\n  Specify resource location under Project Overview in Firebase Dashboard   Set up service account authenication on Firebase Authenticating with a service account allows you to use Firebase CLI to manage your Firebase project. Google has provided a step by step guide here.\nWhen authentication is set up, go to your project root directory and follow the recorded screens below to initialize firebase and deploy the very first version of your site onto firebase.\n Congratulations! Your website is online! You should find your Hosting URL at the end of the Firebase deploy output, it\u0026rsquo;s typically something like: https://your-project-id.web.app\n5. Add your domain to the new site Go to Hosting on Firebase, click on \u0026ldquo;Add custom domain\u0026rdquo;. Typically you wanted to add your root domain name and a sub domain name such as \u0026ldquo;www\u0026rdquo;. For example, I added \u0026ldquo;davidxiao.me\u0026rdquo; for my website and added another entry for redirecting www.davidxiao.me to davidxiao.me\nWhen it\u0026rsquo;s complete, you will be able to visit your website by your custom domain regsitered on step 1.\n  Add custom domain to your website   ","date":1586995200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586995200,"objectID":"e68706bd91a6931f00b0ba34bb78d1e0","permalink":"https://davidxiao.me/post/building-a-website-in-2020/","publishdate":"2020-04-16T00:00:00Z","relpermalink":"/post/building-a-website-in-2020/","section":"post","summary":"If you are interested in building a personal blog site in a cost efficent way, this post discusses about creating a website from the ground up with minimal vendor dependency and high levels of autonomy using Hugo and Firebase.","tags":["hugo","firehose","markdown","static website"],"title":"Building a website in 2020","type":"post"}]