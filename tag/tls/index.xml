<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tls | DAVID&#39;S GARAGE</title>
    <link>https://davidxiao.me/tag/tls/</link>
      <atom:link href="https://davidxiao.me/tag/tls/index.xml" rel="self" type="application/rss+xml" />
    <description>tls</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â©2021 David Xiao</copyright><lastBuildDate>Sat, 10 Oct 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://davidxiao.me/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>tls</title>
      <link>https://davidxiao.me/tag/tls/</link>
    </image>
    
    <item>
      <title>Sign Client Certificate Using Self Signed CA Certificate</title>
      <link>https://davidxiao.me/post/sign-client-certificate-using-self-signed-ca-certificate/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://davidxiao.me/post/sign-client-certificate-using-self-signed-ca-certificate/</guid>
      <description>&lt;p&gt;TL;DR&lt;/p&gt;
&lt;p&gt;When TLS mutual authentication is put in place between controller node and work nodes in a cluster setting, it&amp;rsquo;s not uncommon to see client certificates signed by either self-signed CA or private CA.&lt;/p&gt;
&lt;p&gt;This post covers how to generate a self-signed root CA and to sign a client certificate using &lt;code&gt;openssl&lt;/code&gt;. In cases when private CA is employed instead, the client certificate signing portion is still relevant.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The configuration described in this post is for testing only. It is NOT secure for production use.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;self-signed-ca-certificate&#34;&gt;Self-signed CA Certificate&lt;/h2&gt;
&lt;p&gt;Before we start, let&amp;rsquo;s create a root directory called &lt;code&gt;tls-cert&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Under the root directory, we create a sub directory and some files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[tls-cert] mkdir ca
[tls-cert] mkdir ca/ca.db.certs
[tls-cert] touch ca/ca.db.index
[tls-cert] echo &amp;#34;123456&amp;#34; &amp;gt; ca/ca.db.serial
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next step is to generate a CA key: in this example it&amp;rsquo;s 2048-bit RSA:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[tls-cert] openssl genrsa -out ca/ca.key 2048
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next is to create a self-signed X509 certificate out of the CA key. The client keys will be signed with it later.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[tls-cert] openssl req -new -x509 -days 365 -key ca/ca.key -out ca/ca.crt
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &amp;#39;.&amp;#39;, the field will be left blank.
-----
Country Name (2 letter code) []:.
State or Province Name (full name) []:.
Locality Name (eg, city) []:.
Organization Name (eg, company) []:ca-org-name
Organizational Unit Name (eg, section) []:ca-orgunit-name
Common Name (eg, fully qualified host name) []:ca-common-name
Email Address []:admin@ca.com
[tls-cert]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;client-certificate&#34;&gt;Client certificate&lt;/h2&gt;
&lt;p&gt;Now that we&amp;rsquo;ve generated CA certificate, it&amp;rsquo;s time to generate a private key for the client and create a CSR (Certificate Signing Request)for the key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[tls-cert] openssl req -new -newkey rsa:2048 -nodes -keyout client.key -out client-key-sign-req.pem
Generating a 2048 bit RSA private key
...................................................................................................+++
........+++
writing new private key to &amp;#39;client.key&amp;#39;
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &amp;#39;.&amp;#39;, the field will be left blank.
-----
Country Name (2 letter code) []:.
State or Province Name (full name) []:.
Locality Name (eg, city) []:.
Organization Name (eg, company) []:client-org-name
Organizational Unit Name (eg, section) []:client-orgunit-name
Common Name (eg, fully qualified host name) []:client-common-name
Email Address []:admin@client.com

Please enter the following &amp;#39;extra&amp;#39; attributes
to be sent with your certificate request
A challenge password []:
[tls-cert]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;openssl needs to know a few parameters in order to sign the CSR. Let&amp;rsquo;s put all the parameters into a file and save it as &lt;code&gt;ca.conf&lt;/code&gt;:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/davxiao/ac12f7ebe4e37079ed279f3ce9bc85a9.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;With that sorted out, the last step is to sign the CSR file &lt;code&gt;client-key-sign-req.pem&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[tls-cert] openssl ca -config ca.conf -out client-certificate.pem.crt -infiles client-key-sign-req.pem
Using configuration from ca.conf
Check that the request matches the signature
Signature ok
The Subject&amp;#39;s Distinguished Name is as follows
organizationName      :ASN.1 12:&amp;#39;client-org-name&amp;#39;
organizationalUnitName:ASN.1 12:&amp;#39;client-orgunit-name&amp;#39;
commonName            :ASN.1 12:&amp;#39;client-common-name&amp;#39;
emailAddress          :IA5STRING:&amp;#39;admin@client.com&amp;#39;
Certificate is to be certified until Oct 11 02:08:05 2021 GMT (365 days)
Sign the certificate? [y/n]:y
1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated
[tls-cert]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve produced the following files in this example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ca/ca.key&lt;/code&gt;: private key of the self-signed root CA. It must be kept secret at all times.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ca/ca.crt&lt;/code&gt;: CA certificate of the root CA. It should be made available to whichever party that needs to verify the certificates that were signed by the root CA.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;client.key&lt;/code&gt;: private key of the client certificate. It must be kept secret except during the client authentication process.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;client-certificate.pem.crt&lt;/code&gt;: CA certificate of the client. It should be made available to whichever party that needs to verify the identity of the client.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH and TLS: Differences and Similarities</title>
      <link>https://davidxiao.me/post/ssh-and-tls/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://davidxiao.me/post/ssh-and-tls/</guid>
      <description>&lt;p&gt;Both TLS and SSH are security protocols aimed to solve a specific set of problems.&lt;/p&gt;
&lt;p&gt;TLS is the transport layer of HTTPS protocol while SSH is designed to replace plaintext Telnet protocol.&lt;/p&gt;
&lt;p&gt;Architecture wise, TLS is relatively simple: It has a handshake protocol that does the authentication and agrees on a session key that will be used to encrypt the rest of the communication.&lt;/p&gt;
&lt;p&gt;SSH is more 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_Shell#Architecture&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;complicated&lt;/a&gt; than TLS. It has the following main components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;transport layer;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;user authentication layer;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;connection layer;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Six SSH related RFC are published in relate to SSH: 4251, 4252, 4253, 4254, 425 and 4256.&lt;/p&gt;
&lt;h2 id=&#34;ssh-transport-layer&#34;&gt;SSH Transport Layer&lt;/h2&gt;
&lt;p&gt;Transport layer handles key exchange, server authentication and sets up encryption, compression and integrity verification. It exposes to the upper layer an programmatic interface for sending and receiving plaintext data. The transport layer also arranges for key re-exchange, usually after 1 GB of data has been transferred or after 1 hour has passed, whichever occurs first.&lt;/p&gt;
&lt;h2 id=&#34;user-authentication-layer&#34;&gt;User Authentication Layer&lt;/h2&gt;
&lt;p&gt;It handles client authentication and provides a number of authentication methods. Widely used user-authentication methods include password, publickey, keyboard-interactive, GSSAPI authentication which allows SSH to authenticate using external mechanisms such as Kerberos 5 or NTLM, providing single sign-on capability to SSH sessions.&lt;/p&gt;
&lt;h2 id=&#34;connection-layer&#34;&gt;Connection Layer&lt;/h2&gt;
&lt;p&gt;It defines the concept of channels in SSH. A single SSH connection can host multiple channels simultaneously, each transferring data in both directions. Standard channel types include: shell for terminal shells; SFTP and exec requests (including SCP transfers); direct-tcpip for client-to-server forwarded connections; forwarded-tcpip for server-to-client forwarded connections etc.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TLS Handshake in a Nutshell</title>
      <link>https://davidxiao.me/post/tls-handshake-in-a-nutshell/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://davidxiao.me/post/tls-handshake-in-a-nutshell/</guid>
      <description>&lt;p&gt;At a high level, the following occurs during a TLS handshake:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;graph TD;
    A[Client establishes a TCP connection to the server] --&amp;gt;B[Client sends Hello and list of cipher suites including TLS version] --&amp;gt;C[Server sends Hello, selected suite and certificate] --&amp;gt; D[Client validates certificate]
    D --&amp;gt; E[Client and server starts key exchange process. &amp;lt;br/&amp;gt;RSA and Diffie-Hellman are two common KEP algogirhtms]
    E --&amp;gt; F{Key Exchange Protocol}
    F --&amp;gt;|RSA| G[Both client and server independently &amp;lt;br/&amp;gt;agree on the same secret value with client random,&amp;lt;br/&amp;gt; server random and premaster secret]
    F --&amp;gt;|DH| H[Both client and server independently &amp;lt;br/&amp;gt;agree on the same secret value over exchanging&amp;lt;br/&amp;gt;  a few DH parameters]
    G --&amp;gt;I[Regardless of which KEP was used, &amp;lt;br/&amp;gt;the rest of the session uses the agreed symmetric key to encrypt &amp;lt;br/&amp;gt;the communication both ways going forward]
    H --&amp;gt;I
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Read more about DH on 
&lt;a href=&#34;https://davidxiao.me/post/diffie-hellman-key-exchange-in-a-nutshell/&#34;&gt;my post&lt;/a&gt; and 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange#Cryptographic_explanation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;key-takeaways-about-the-keps&#34;&gt;Key Takeaways About the KEPs&lt;/h2&gt;
&lt;p&gt;ð DH achieves 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Forward_secrecy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;forward secrecy&lt;/a&gt; while RSA does not.&lt;/p&gt;
&lt;p&gt;ð DH handshake takes longer than RSA.&lt;/p&gt;
&lt;h2 id=&#34;what-else-you-need-to-know-about-tls&#34;&gt;What Else You Need To Know about TLS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TLS 1.0 and TLS 1.1 are no longer secure and should be avoided. A best practice is to use TLS version is 1.2 or later at the time of writing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTPS means &amp;ldquo;HTTP over TLS&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both SSH and TLS are purpose-built for secure communication over the Internet, but they are very different in many ways. Check out 
&lt;a href=&#34;https://davidxiao.me/post/ssh-and-tls/&#34;&gt;my another post&lt;/a&gt; where I explain the differences between the two.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;glossary&#34;&gt;Glossary&lt;/h2&gt;
&lt;h3 id=&#34;cipher-suite&#34;&gt;Cipher Suite&lt;/h3&gt;
&lt;p&gt;A cipher suite is a set of algorithms. It usually contain include: a key exchange algorithm, a bulk encryption algorithm, and a message authentication code (MAC) algorithm.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;/code&gt; means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ECDHE_RSA indicates the key exchange algorithm being used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AES_128_GCM indicates the block cipher being used to encrypt the message stream, together with the block cipher mode of operation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SHA256 indicates the message authentication algorithm which is used to authenticate a message.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ecdhe_rsa-key-exchange-algorithm&#34;&gt;ECDHE_RSA key exchange algorithm&lt;/h3&gt;
&lt;p&gt;In a nutshell, it is ECDHE signed by RSA. Signing defeats man-in-the-middle attack. See detail 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Elliptic-curve_Diffie-Hellman&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Secure Your HTTPS / SSL / TLS</title>
      <link>https://davidxiao.me/post/secure-your-https-ssl-tls/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://davidxiao.me/post/secure-your-https-ssl-tls/</guid>
      <description>&lt;p&gt;If you own a personal site and like to make both your site and visitors secure, read this: Just because you&amp;rsquo;ve enabled HTTPS does not mean it&amp;rsquo;s sound and secure.&lt;/p&gt;
&lt;p&gt;TLS v1.0 and v1.1 are known to be vulnerable and should not be allowed on your site. It is a security best practice to make TLS v1.2 the minimum version allowed on your site.&lt;/p&gt;
&lt;p&gt;For more detail, check out 
&lt;a href=&#34;https://security.googleblog.com/2018/10/modernizing-transport-security.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this post&lt;/a&gt; on Google Security Blog and 
&lt;a href=&#34;https://developers.google.com/web/updates/2020/02/chrome-81-deps-rems#remove_tls_10_and_tls_11&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this post&lt;/a&gt; on Google Chrome Browser Updates.&lt;/p&gt;
&lt;h2 id=&#34;get-a-test-on-your-site&#34;&gt;Get a Test on your Site&lt;/h2&gt;
&lt;p&gt;You can use 
&lt;a href=&#34;https://www.ssllabs.com/ssltest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SSLLabs&lt;/a&gt; to conduct a quick test on your site.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-initial-test-results&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/secure-your-https-ssl-tls/sslreport1_hu4983f44c036a3ff7c6c18a3e1d69f764_337807_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Initial test results&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/secure-your-https-ssl-tls/sslreport1_hu4983f44c036a3ff7c6c18a3e1d69f764_337807_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2230&#34; height=&#34;1516&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Initial test results
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Click on any of the server will give you a brief explaination on the findings.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-see-explaination-here&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/secure-your-https-ssl-tls/sslreport2_hu3b6b7884631da49756285134b8c40644_167991_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;See explaination here&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/secure-your-https-ssl-tls/sslreport2_hu3b6b7884631da49756285134b8c40644_167991_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2236&#34; height=&#34;1184&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    See explaination here
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;I&amp;rsquo;m using Cloudflare as CDN for api.davidxiao.me, so I went on to the Cloudflare portal and updated the &amp;ldquo;Minimum TLS Version&amp;rdquo; to &amp;ldquo;TLS 1.2&amp;rdquo;.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-updating-minimum-tls-version-to-12&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/secure-your-https-ssl-tls/tls_hu8dc6d5d801d6201179ba0c66dc555f46_76902_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Updating minimum TLS version to 1.2&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/secure-your-https-ssl-tls/tls_hu8dc6d5d801d6201179ba0c66dc555f46_76902_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2072&#34; height=&#34;806&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Updating minimum TLS version to 1.2
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Then performed a re-scan. It looks much better this time.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-new-results&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/secure-your-https-ssl-tls/sslreport3_hu06b46150dc388fe5c30dd7fb161e2545_330910_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;The new results&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/secure-your-https-ssl-tls/sslreport3_hu06b46150dc388fe5c30dd7fb161e2545_330910_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2232&#34; height=&#34;1512&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The new results
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Hope this is helpful!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
