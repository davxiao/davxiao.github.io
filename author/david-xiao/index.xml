<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>David Xiao | DAVID&#39;S GARAGE</title>
    <link>https://davidxiao.me/author/david-xiao/</link>
      <atom:link href="https://davidxiao.me/author/david-xiao/index.xml" rel="self" type="application/rss+xml" />
    <description>David Xiao</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2020 David Xiao</copyright><lastBuildDate>Fri, 29 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://davidxiao.me/author/david-xiao/avatar_huc9a803f18ab730e706c7c1ec5503b96b_29954_270x270_fill_lanczos_center_2.png</url>
      <title>David Xiao</title>
      <link>https://davidxiao.me/author/david-xiao/</link>
    </image>
    
    <item>
      <title>My Homelab Setup From Hardware to KVM - Part 2</title>
      <link>https://davidxiao.me/post/my-homelab-setup-from-hardware-to-kvm-part-2/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      <guid>https://davidxiao.me/post/my-homelab-setup-from-hardware-to-kvm-part-2/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Wikipedia:Too_long;_didn%27t_read&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TL;DR&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Install and configure Proxmox as KVM hypervisor.&lt;/em&gt;&lt;/p&gt;















&lt;figure id=&#34;figure-playing-三國志xiiihttpsstoresteampoweredcomapp363150romance_of_the_three_kingdoms_xiii-on-win10-guest-through-remote-desktop&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;playsan13.png&#34; data-caption=&#34;Playing 三國志XIII on Win10 guest through Remote Desktop&#34;&gt;


  &lt;img src=&#34;playsan13.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Playing &lt;a href=&#34;https://store.steampowered.com/app/363150/ROMANCE_OF_THE_THREE_KINGDOMS_XIII/&#34;&gt;三國志XIII&lt;/a&gt; on Win10 guest through Remote Desktop
  &lt;/figcaption&gt;


&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Building Your First App on Google Home in 10 minutes</title>
      <link>https://davidxiao.me/post/building-your-first-app-on-google-home/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      <guid>https://davidxiao.me/post/building-your-first-app-on-google-home/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Wikipedia:Too_long;_didn%27t_read&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TL;DR&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post will show you how to build and deploy a voice-activated app on Google Cloud in 10 minutes. It responds to your commands and plays personalized music if you ask! Not a bad way to play on someone&amp;rsquo;s birthday, eh?&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-a-new-project-on-google-actions-console&#34;&gt;Create a New Project on Google Actions Console&lt;/h2&gt;
&lt;p&gt;The app is built on Google Cloud using Google Actions and Dialogflow. If you don&amp;rsquo;t have a Google Actions account, click 
&lt;a href=&#34;https://console.actions.google.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; to create a new one. It&amp;rsquo;s free.&lt;/p&gt;
&lt;p&gt;When the account is created, go ahead and create a new project. Google Actions allows you to add Actions support to existing GCP projects, but we will create a new one to keep it simple.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-create-a-new-project&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/newproject_hu743e9e3ec8e102a213e0e2f07b641661_182403_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Create a new project&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/newproject_hu743e9e3ec8e102a213e0e2f07b641661_182403_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2392&#34; height=&#34;1042&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Create a new project
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;specify-a-catchy-name-for-your-app&#34;&gt;Specify a Catchy Name for Your App&lt;/h2&gt;
&lt;p&gt;You need to specify a catchy name for the app so that every time when you say those &amp;ldquo;gateway words&amp;rdquo; to the Google Home device, it will activate the app for you.&lt;/p&gt;
&lt;p&gt;Go to the project dashboard, click on &amp;ldquo;Quick setup&amp;rdquo; followed by &amp;ldquo;Decide how your action is invoked&amp;rdquo; and put the app name here. It may reject the name if it&amp;rsquo;s too common or ambiguous, e.g. &amp;ldquo;Hello&amp;rdquo; is probably not a good choice here.&lt;/p&gt;
&lt;p&gt;For example, my app is called &amp;ldquo;Hello Jukebox&amp;rdquo;.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-specify-a-catchy-name-for-your-app&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/hellojukebox_hu00583f257256ac5d2540f09ced6a2a1c_203654_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Specify a catchy name for your app&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/hellojukebox_hu00583f257256ac5d2540f09ced6a2a1c_203654_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2398&#34; height=&#34;1514&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Specify a catchy name for your app
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;add-actions-to-your-app&#34;&gt;Add Actions to Your App&lt;/h2&gt;
&lt;p&gt;There is no secret sauce. An app is only as smart as what it&amp;rsquo;s taught. This app will respond to voice commands and act accordingly based on the intents developeed for it. &amp;ldquo;Intent&amp;rdquo; is a Google term referring to a combination of voice command and its response.&lt;/p&gt;
&lt;p&gt;Within one app, developer can create as many intents as they want as long as no intent is stepping on one another&amp;rsquo;s toes. For example, trying to create two separate intents both responding to the same command &amp;ldquo;what is my favoriate color&amp;rdquo; would be confusing to begin with.&lt;/p&gt;
&lt;p&gt;Within an intent, developer can decide on the kind of response it needs to give: it can be as simple as having Google Home say something or be more complicated with custom logic.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-add-a-new-action-to-your-app&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/addaction_hu5a34da406b359feaea235349c9d3070a_89800_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Add a new Action to your app&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/addaction_hu5a34da406b359feaea235349c9d3070a_89800_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1962&#34; height=&#34;800&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Add a new Action to your app
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;use-case-1-simple-voice-commands-and-text-responses&#34;&gt;Use Case 1: Simple Voice Commands and Text Responses&lt;/h3&gt;
&lt;p&gt;Scroll down the Actions dashboard until the Fulfillment section, click on &amp;ldquo;Edit in Dialogflow&amp;rdquo; and click on the Intents. Start adding intents.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-edit-in-dialogflow&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/editdialogflow_hu0a5e6ae8e7a5a9d21267103e72f6723b_121154_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Edit in Dialogflow&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/editdialogflow_hu0a5e6ae8e7a5a9d21267103e72f6723b_121154_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2290&#34; height=&#34;1378&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Edit in Dialogflow
  &lt;/figcaption&gt;


&lt;/figure&gt;






  
  











&lt;figure id=&#34;figure-add-new-intent&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/addintents_hu5caf5e9408c46163cab731953699f0c0_150879_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Add new Intent&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/addintents_hu5caf5e9408c46163cab731953699f0c0_150879_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2126&#34; height=&#34;848&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Add new Intent
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;For example, you may want to create an intent called &amp;ldquo;special-intent&amp;rdquo;, add &amp;ldquo;Do you know why today is so special&amp;rdquo; as voice command and add &amp;ldquo;Of course I know, David&amp;rdquo; as text responses to the intent. Those are what you would say to the app and what the app will say back respectively.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-a-list-of-intents-i-added&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/addnewintent_hu4379dc9c90fb0c256e025ee19dca75f6_98047_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;A list of intents I added&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/addnewintent_hu4379dc9c90fb0c256e025ee19dca75f6_98047_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1568&#34; height=&#34;866&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    A list of intents I added
  &lt;/figcaption&gt;


&lt;/figure&gt;






  
  











&lt;figure id=&#34;figure-text-responses&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/response_hu977f95ac59ecb13bada691ae3f06f746_90426_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Text Responses&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/response_hu977f95ac59ecb13bada691ae3f06f746_90426_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1570&#34; height=&#34;732&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Text Responses
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;use-case-2-implement-custom-logic-using-cloud-function&#34;&gt;Use Case 2: Implement custom logic using Cloud Function&lt;/h3&gt;
&lt;p&gt;The second use case is enabling webhook in an intent and developing a handler for it.&lt;/p&gt;
&lt;p&gt;This approach allows you to implement custom logic for an intent. GCP supports either running your custom code on a 
&lt;a href=&#34;https://cloud.google.com/functions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Function&lt;/a&gt; or calling an external web service you specify.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-text-responses&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/inline_hu7df3c6f58ea55e824903f43390cf3d99_512086_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Text Responses&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/inline_hu7df3c6f58ea55e824903f43390cf3d99_512086_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2144&#34; height=&#34;1514&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Text Responses
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;I will use the Cloud Function way for this example since we don&amp;rsquo;t need to worry about resource or storage thanks to its serverless nature.&lt;/p&gt;
&lt;p&gt;First, you need to enable &amp;ldquo;Webhook&amp;rdquo; on the intent that needs to have custom logic. Second, click on the Fulfillment on the left navbar and enable Inline editor. Last, copy and paste the following code example and click on save. That&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;The code example will first say something then play an audio clip. If you need to play something else, e.g. a peronalized audio clip, you can replace the URL with your own thing, but then you would have to deal with access control.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/davxiao/8d0d35d3c88078e5fc96114d02c8ee6b.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;testing-your-new-app-on-simulator&#34;&gt;Testing Your New App on Simulator&lt;/h3&gt;
&lt;p&gt;Click on &amp;ldquo;Google Assistant&amp;rdquo; on the right bar to open the Simulator on Google Actions. From there you can tinker with your app until you&amp;rsquo;re satisfied with it :-)&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-text-responses&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/test_hu4c7ce97dca92ec99c2a240b81e7d53b6_267148_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Text Responses&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/test_hu4c7ce97dca92ec99c2a240b81e7d53b6_267148_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2854&#34; height=&#34;1422&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Text Responses
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;deploying-to-your-google-home-device&#34;&gt;Deploying to your Google Home Device&lt;/h3&gt;
&lt;p&gt;Making your app available on 
&lt;a href=&#34;https://assistant.google.com/explore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Assistant Actions Portal&lt;/a&gt; sounds like a great idea, however the releasing process could take some time as Google needs to review and approve your app first before it can be released. Since my post promised you a 10-minute ride, let&amp;rsquo;s rolling to get the freshly baked app onto your own Google Home device.&lt;/p&gt;
&lt;p&gt;On Actions console, click on &amp;ldquo;Deploy&amp;rdquo;, choose &amp;ldquo;Alpha&amp;rdquo;, click on &amp;ldquo;Manage Alpha Testers&amp;rdquo;, and add your own Google Home device account email here. You can then switch to your Google Home account and use the opt-in link received on the invitation email to accept the invite.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-make-an-alpha-deployment&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/deploy_hub0f70cc191eb1433db74b863010b6132_192039_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Make an Alpha Deployment&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/deploy_hub0f70cc191eb1433db74b863010b6132_192039_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2290&#34; height=&#34;1364&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Make an Alpha Deployment
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;When it&amp;rsquo;s ready, click on &amp;ldquo;Create a release&amp;rdquo;, and wait it to complete. It can take a few minutes.&lt;/p&gt;
&lt;p&gt;Congrats! You&amp;rsquo;ve just developed and deployed your first Google Home app in 10 minutes! Try say to your Google Home: &amp;ldquo;Hey Google, Talk to your_app_name_here&amp;rdquo; and see what happens :)&lt;/p&gt;
&lt;h2&gt;Comments&lt;/h2&gt;&lt;div id=&#34;remark42&#34;&gt;&lt;/div&gt;
&lt;script&gt;
  var remark_config = {
    host: &#34;https://api.davidxiao.me:8964/remark42&#34;, 
    site_id: &#39;davidxiao&#39;,
    components: [&#39;embed&#39;], 
                           
                           
                           
                           
                           
    url: &#34;https://davidxiao.me/post/building-your-first-app-on-google-home/&#34;, 
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
    max_shown_comments: 10, 
    theme: &#39;dark&#39;, 
    locale: &#39;en&#39; 
  };

  (function(c) {
    for(var i = 0; i &lt; c.length; i++){
      var d = document, s = d.createElement(&#39;script&#39;);
      s.src = remark_config.host + &#39;/web/&#39; +c[i] +&#39;.js&#39;;
      s.defer = true;
      (d.head || d.body).appendChild(s);
    }
  })(remark_config.components || [&#39;embed&#39;]);
&lt;/script&gt;

</description>
    </item>
    
    <item>
      <title>Cross Compile MMDVMHost on Ubuntu</title>
      <link>https://davidxiao.me/post/cross-compile-mmdvmhost-on-ubuntu/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      <guid>https://davidxiao.me/post/cross-compile-mmdvmhost-on-ubuntu/</guid>
      <description>&lt;p&gt;A little teaser here: Raspberry Pi is not really ediable :-)&lt;/p&gt;
&lt;p&gt;So I have a 
&lt;a href=&#34;https://www.raspberrypi.org/blog/raspberry-pi-zero-w-joins-family/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Raspberry Pi Zero W&lt;/a&gt; for about one year now.&lt;/p&gt;
&lt;p&gt;It runs a few software. One of them is called Pi-Star. It&amp;rsquo;s an open source toolkit for digial voice over 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Amateur_radio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;amateur radio&lt;/a&gt;. Find more detail about Pi-Star 
&lt;a href=&#34;https://www.pistar.uk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Amateur radio is one of my hobbies. Figuring out how 
&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_amateur_radio_modes#Digital_voice&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;digital voice modes&lt;/a&gt; work in the amateur radio world took some time for me but it was rewarding. At the end of the day, listening to hams talking about their passions from all over the world on my little handheld radio feels amazing.&lt;/p&gt;
&lt;p&gt;Pi-Star works very well in my setup, so when I found out Pi-Star does not display my public IP address on OLED, I decided to write some code for it.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what it looks like.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-oled-display-showing-my-public-ip&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/cross-compile-mmdvmhost-on-ubuntu/pistar-inetip_hu15853694f5406fd361772a3bb29a5fde_1385514_2000x2000_fit_q90_lanczos.jpg&#34; data-caption=&#34;OLED display showing my Public IP&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/cross-compile-mmdvmhost-on-ubuntu/pistar-inetip_hu15853694f5406fd361772a3bb29a5fde_1385514_2000x2000_fit_q90_lanczos.jpg&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2842&#34; height=&#34;2131&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    OLED display showing my Public IP
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;hr&gt;
&lt;h2 id=&#34;1-download-the-toolchain-with-extra-libs-and-headers&#34;&gt;1. Download the Toolchain with Extra Libs and Headers&lt;/h2&gt;
&lt;p&gt;I use Ubuntu 20.04 on my homelab as cross compiling platform, but any recent Linux distro should work.&lt;/p&gt;
&lt;p&gt;My toolchain is a fork from the original toolchain with extra libs and headers for compiling MMDVMHost.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ~/code
$ git clone https://github.com/davxiao/tools.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-code-is-the-easy-part-3&#34;&gt;2. Code is the Easy Part &amp;lt;3&lt;/h2&gt;
&lt;p&gt;Pi-Star consists of a few components including a PHP frontend and a few programs as backend for data exchange over various digital voice networks.&lt;/p&gt;
&lt;p&gt;MMDVMHost is the program that interfaces to the digital voice modem (MMDVM) on one side, and a suitable network on the other. It&amp;rsquo;s written in standard C++ with dependencies to external libs such as 
&lt;a href=&#34;https://github.com/hallard/ArduiPi_OLED&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ArduiPi_OLED&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For my purpose, I added some code in &lt;code&gt;CNetworkinfo&lt;/code&gt; class and &lt;code&gt;COLED&lt;/code&gt; class. If you don&amp;rsquo;t know much about C++, no worries, just download all source code from my github repo.&lt;/p&gt;
&lt;p&gt;Download my repo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ~/code
$ git clone https://github.com/davxiao/MMDVMHost.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-prep-for-the-cross-compilation&#34;&gt;3. Prep for the Cross Compilation&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;MMDVMHost/cmake/CrossCompile.cmake&lt;/code&gt;, you wanted to update toolchain paths so that CMake will be able to generate correct Makefile afterwards.&lt;/p&gt;
&lt;p&gt;When it&amp;rsquo;s done, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd MMDVMHost/cmake
$ cmake ../ -DCMAKE_TOOLCHAIN_FILE=./CrossCompile.cmake
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you see warnings like this, try delete &lt;code&gt;CMakeCache.txt&lt;/code&gt; and run the cmake command again.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;CMake Warning:
  Manually-specified variables were not used by the project:
    CMAKE_TOOLCHAIN_FILE
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-last-step&#34;&gt;4. Last Step&lt;/h2&gt;
&lt;p&gt;When Cmake is done, a &lt;code&gt;Makefile&lt;/code&gt; was generated under the same directory. Run the following in the same directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make ;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the complication is complete, you should see &lt;code&gt;MMDVMHost&lt;/code&gt; in the &lt;code&gt;cmake/&lt;/code&gt; directory. You may wish to run &lt;code&gt;file ./MMDVMHost&lt;/code&gt; to confirm the target platform is ARM as opposed to amd64. Here&amp;rsquo;s my output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; ./MMDVMHost: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), 
 dynamically linked, interpreter /lib/ld-linux-armhf.so.3, for GNU/Linux 2.6.32,
 with debug_info, not stripped
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Congrats! You&amp;rsquo;ve built MMDVMHost using cross compilcation.&lt;/p&gt;
&lt;h2 id=&#34;deployment&#34;&gt;Deployment&lt;/h2&gt;
&lt;p&gt;You can skip this section if you have set up your own deployment pipeline.&lt;/p&gt;
&lt;p&gt;On my homelab, I mount the same Samba share folder on both the Ubuntu and the Pi, then just copy the MMDVMHost over. Before replacing the MMDVMHost, you need to confirm the SD card is mounted in R/W mode and MMDVMHost service is stopped. Make a backup of the original MMDVMHost is also a good idea.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rpi-rw ; 
$ sudo systemctl stop mmdvmhost ; 
$ sudo systemctl stop mmdvmhost.timer ;
$ sudo cp ~/nas-dir/MMDVMHost.build /usr/local/bin/MMDVMHost ;
$ sudo systemctl start mmdvmhost ;
$ sudo systemctl start mmdvmhost.timer ;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;If you experience &lt;code&gt;mount error(115): Operation now in progress&lt;/code&gt; when mounting CIFS on Pi, it might be caused by the iptable rules set by Pi-Star.&lt;/p&gt;
&lt;p&gt;To troubleshooting the issue, run the following commands on Pi-Star and see if mount works.&lt;/p&gt;
&lt;p&gt;No worries, the following changes do not persist between restarts.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;    sudo iptables -P INPUT ACCEPT; 
    sudo iptables -P FORWARD ACCEPT; 
    sudo iptables -P OUTPUT ACCEPT; 
    sudo iptables -F; 
    sudo iptables -X ; 
    sudo iptables -nvL ;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;&lt;div id=&#34;remark42&#34;&gt;&lt;/div&gt;
&lt;script&gt;
  var remark_config = {
    host: &#34;https://api.davidxiao.me:8964/remark42&#34;, 
    site_id: &#39;davidxiao&#39;,
    components: [&#39;embed&#39;], 
                           
                           
                           
                           
                           
    url: &#34;https://davidxiao.me/post/cross-compile-mmdvmhost-on-ubuntu/&#34;, 
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
    max_shown_comments: 10, 
    theme: &#39;dark&#39;, 
    locale: &#39;en&#39; 
  };

  (function(c) {
    for(var i = 0; i &lt; c.length; i++){
      var d = document, s = d.createElement(&#39;script&#39;);
      s.src = remark_config.host + &#39;/web/&#39; +c[i] +&#39;.js&#39;;
      s.defer = true;
      (d.head || d.body).appendChild(s);
    }
  })(remark_config.components || [&#39;embed&#39;]);
&lt;/script&gt;

</description>
    </item>
    
    <item>
      <title>Building a website in 2020</title>
      <link>https://davidxiao.me/post/building-a-website-in-2020/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://davidxiao.me/post/building-a-website-in-2020/</guid>
      <description>&lt;p&gt;In this post I will talk about how I built this website from the ground up using Hugo as site generator and Firebase as hosting provider. I wish you&amp;rsquo;ll find it helpful.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class=&#34;my-dropcap&#34;&gt;W&lt;/span&gt;eb development has come a long way. Back in the late 90&amp;rsquo;s when I first came across Internet, anyone who knows anything about 
&lt;a href=&#34;https://en.wikipedia.org/wiki/HTML&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTML&lt;/a&gt; would be considered very technical.&lt;/p&gt;
&lt;p&gt;Fast forward into 2020, social media and smart phone is ubiquitous, 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Web_hosting_service&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;web hosting services&lt;/a&gt; such as 
&lt;a href=&#34;https://www.wix.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wix&lt;/a&gt; and 
&lt;a href=&#34;https://wordpress.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wordpress&lt;/a&gt; have made 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Content_creation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;content creation&lt;/a&gt; possible for anyone who wishes to create a website without much headache.&lt;/p&gt;
&lt;p&gt;Why should you building a website from the ground up as opposed to using a web hosting service?&lt;/p&gt;
&lt;h2 id=&#34;maybe-its-for-you&#34;&gt;Maybe it&amp;rsquo;s for you&lt;/h2&gt;
&lt;p&gt;Building a website with a static site generator is not for everyone. George Cushen who is Hugo theme Academic&amp;rsquo;s main contributor once put:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;hellip;(it would) require a basic understanding of using the command line in the Terminal (Mac/Linux) or Command Prompt (Windows) app on your computer. If you are not interested in this, perhaps this is not for you&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://georgecushen.com/create-your-website-with-hugo/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Original post&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But if going beyond content creation and learning more about building a website that is lightweight and secure, cost effective yet no 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Vendor_lock-in&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vendor lock-in&lt;/a&gt; is your thing, then let&amp;rsquo;s dive right in.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;First and foremost, let&amp;rsquo;s take a look on what will be covered in the post.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Register a domain name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up Hugo as static site generator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a kick-starter theme to get going quickly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy the site to Firebase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add your domain to the new site.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-register-a-domain-name&#34;&gt;1. Register a domain name&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s pretty straightforward. You come up with a great domain name. It is better to be concise and easy to remember. Be creative &amp;lt;3.&lt;/p&gt;
&lt;p&gt;Then complete the domain registration on any 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Domain_name_registrar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Domain Name Registrar&lt;/a&gt; you prefer. I use 
&lt;a href=&#34;https://domains.google/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Domains&lt;/a&gt; but there are other good choices such as 
&lt;a href=&#34;https://namecheap.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Namecheap&lt;/a&gt; and 
&lt;a href=&#34;https://godaddy.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Daddy&lt;/a&gt;.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-register-a-domain-name-on-google-domains&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-a-website-in-2020/googledomain_hua80840076dd6af33bd83daa8ff78b57a_385165_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Register a domain name on Google Domains&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-a-website-in-2020/googledomain_hua80840076dd6af33bd83daa8ff78b57a_385165_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2812&#34; height=&#34;1530&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Register a domain name on Google Domains
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;2-setting-up-hugo&#34;&gt;2. Setting up Hugo&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt; is a 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Web_template_system#Static_site_generators&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;static site generator&lt;/a&gt;. There are many other site generators, I picked Hugo for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Open_source&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;open source&lt;/a&gt; and backed by an active developer team and support community.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s a monolithic program with no external dependencies.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s production ready.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a nutshell, Hugo renders content into HTML files and uploads the files onto your choice of hosting provider. Your content is what you write as content creator. Hugo takes content files written in 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Markdown&lt;/a&gt; (&lt;code&gt;.md&lt;/code&gt;), a format that is intended to be used by technical and non-technical writers alike. Since inception, Markdown has become the &lt;em&gt;de facto&lt;/em&gt; format in content creation and blogging.&lt;/p&gt;
&lt;p&gt;If you need to learn about Markdown syntax, there are good guides such as 
&lt;a href=&#34;https://www.markdownguide.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Markdown Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;installing-hugo&#34;&gt;Installing Hugo&lt;/h3&gt;
&lt;p&gt;On macOS, I recommend using a package manager such as 
&lt;a href=&#34;https://brew.sh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Homebrew&lt;/a&gt; to manage third-party packages. With Homebrew installed, to install Hugo, just run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew install hugo ;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All set. In case you need to check which Hugo version is installed, run &lt;code&gt;hugo version&lt;/code&gt;. On my mac it returns &lt;code&gt;Hugo Static Site Generator v0.70.0/extended darwin/amd64&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For installing Hugo on Windows or Linux, refer to Hugo&amp;rsquo;s documentation.&lt;/p&gt;
&lt;h2 id=&#34;3-use-a-kick-starter-theme&#34;&gt;3. Use a kick-starter theme&lt;/h2&gt;
&lt;p&gt;Hugo has built-in theme mechanism that allows developers to quickly run a theme and see the results. It also provides all the necessary building blocks for user to personalize the theme. There are many themes available on Hugo, for my own website I use Academic Theme. It also comes with a 
&lt;a href=&#34;https://github.com/sourcethemes/academic-kickstart/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;academic-kickstart repo&lt;/a&gt; on github for teasers.&lt;/p&gt;
&lt;p&gt;The easy way to get started is to just fork the repo, download the code and run it.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-fork-the-kickstart-into-your-own-repo&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-a-website-in-2020/forkrepo_hub00e36fa908e191c517c523b2f035a7a_337164_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Fork the kickstart into your own repo&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-a-website-in-2020/forkrepo_hub00e36fa908e191c517c523b2f035a7a_337164_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2068&#34; height=&#34;1406&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Fork the kickstart into your own repo
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Download the code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone &amp;lt;replace-it-with-your-own-repo-url&amp;gt; ;
$ cd &amp;lt;your-repo-root-dir&amp;gt; ;
$ git submodule update --init --recursive ; # get the latest Academic theme
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run Hugo to serve the test site:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo server -D ;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now visit 
&lt;a href=&#34;http://127.0.0.1:1313/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://127.0.0.1:1313/&lt;/a&gt; on your web browser and you should see the homepage.&lt;/p&gt;
&lt;p&gt;Congrats! You&amp;rsquo;ve got your first Hugo website up and running on your local environment!&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Hugo only binds to local network address for &lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_by_default&#34;&gt;security by default&lt;/a&gt;. If you need to test the site on another computer in your local network, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo server -D --bind=0.0.0.0 ;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;4-deploy-the-new-site-to-firebase&#34;&gt;4. Deploy the new site to Firebase&lt;/h2&gt;
&lt;p&gt;There are many out there: 
&lt;a href=&#34;https://http://firebase.google.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Firebase&lt;/a&gt;, 
&lt;a href=&#34;https://pages.github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Pages&lt;/a&gt;, 
&lt;a href=&#34;https://www.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Netlify&lt;/a&gt; and 
&lt;a href=&#34;http://aws.amazon.com/amplify/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS Amplify&lt;/a&gt; to name a few. Each one has its own offering. I picked Firebase as my hosting provider because they seem to offer a bit more on their free tier.&lt;/p&gt;
&lt;p&gt;First, install Firebase CLI and (optional) Google Cloud SDK CLI.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Firebase CLI. The recommended way is to run &lt;code&gt;npm i -g firebase-tools ;&lt;/code&gt; See its 
&lt;a href=&#34;https://github.com/firebase/firebase-tools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github repo&lt;/a&gt; for more detail. If you don&amp;rsquo;t have &lt;code&gt;npm&lt;/code&gt; installed yet, run: &lt;code&gt;brew install node ;&lt;/code&gt;. npm will be installed alongside node.js.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google Cloud SDK CLI. Run &lt;code&gt;brew cask install google-cloud-sdk ;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, go to 
&lt;a href=&#34;https://firebase.google.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Firebase&lt;/a&gt; to set up an account and create a new Firebase project. Make sure it uses the default free tier plan which is called &lt;code&gt;Spark&lt;/code&gt;. Be noted you need to specify GCP resource location under &lt;strong&gt;Project Overview&lt;/strong&gt; in Firebase Dashboard after project is created. The location can not be changed afterwards, so choose something close to you would be wise.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-specify-resource-location-under-project-overview-in-firebase-dashboard&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-a-website-in-2020/gcplocation_hu7482e11487f16a9bd601892124435dbc_331705_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Specify resource location under Project Overview in Firebase Dashboard&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-a-website-in-2020/gcplocation_hu7482e11487f16a9bd601892124435dbc_331705_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2356&#34; height=&#34;1516&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Specify resource location under Project Overview in Firebase Dashboard
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;set-up-service-account-authenication-on-firebase&#34;&gt;Set up service account authenication on Firebase&lt;/h3&gt;
&lt;p&gt;Authenticating with a service account allows you to use Firebase CLI to manage your Firebase project. Google has provided a step by step guide 
&lt;a href=&#34;https://firebase.google.com/docs/app-distribution/authenticate-service-account.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When authentication is set up, go to your project root directory and follow the recorded screens below to initialize firebase and deploy the very first version of your site onto firebase.&lt;/p&gt;
&lt;script id=&#34;asciicast-331048&#34; src=&#34;https://asciinema.org/a/331048.js&#34; async&gt;&lt;/script&gt;

&lt;p&gt;Congratulations! Your website is online! You should find your Hosting URL at the end of the Firebase deploy output, it&amp;rsquo;s typically something like: &lt;code&gt;https://your-project-id.web.app&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-add-your-domain-to-the-new-site&#34;&gt;5. Add your domain to the new site&lt;/h2&gt;
&lt;p&gt;Go to &lt;strong&gt;Hosting&lt;/strong&gt; on Firebase, click on &amp;ldquo;Add custom domain&amp;rdquo;. Typically you wanted to add your root domain name and a sub domain name such as &amp;ldquo;www&amp;rdquo;. For example, I added &amp;ldquo;davidxiao.me&amp;rdquo; for my website and added another entry for redirecting &lt;code&gt;www.davidxiao.me&lt;/code&gt; to &lt;code&gt;davidxiao.me&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When it&amp;rsquo;s complete, you will be able to visit your website by your custom domain regsitered on step 1.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-add-custom-domain-to-your-website&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-a-website-in-2020/customdomain_hu5e404376bd7baccdc222e51f4545ac8f_377474_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Add custom domain to your website&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-a-website-in-2020/customdomain_hu5e404376bd7baccdc222e51f4545ac8f_377474_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2318&#34; height=&#34;1026&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Add custom domain to your website
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2&gt;Comments&lt;/h2&gt;&lt;div id=&#34;remark42&#34;&gt;&lt;/div&gt;
&lt;script&gt;
  var remark_config = {
    host: &#34;https://api.davidxiao.me:8964/remark42&#34;, 
    site_id: &#39;davidxiao&#39;,
    components: [&#39;embed&#39;], 
                           
                           
                           
                           
                           
    url: &#34;https://davidxiao.me/post/building-a-website-in-2020/&#34;, 
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
    max_shown_comments: 10, 
    theme: &#39;dark&#39;, 
    locale: &#39;en&#39; 
  };

  (function(c) {
    for(var i = 0; i &lt; c.length; i++){
      var d = document, s = d.createElement(&#39;script&#39;);
      s.src = remark_config.host + &#39;/web/&#39; +c[i] +&#39;.js&#39;;
      s.defer = true;
      (d.head || d.body).appendChild(s);
    }
  })(remark_config.components || [&#39;embed&#39;]);
&lt;/script&gt;

</description>
    </item>
    
  </channel>
</rss>
