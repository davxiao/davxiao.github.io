<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloud | DAVID&#39;S GARAGE</title>
    <link>https://davidxiao.me/category/cloud/</link>
      <atom:link href="https://davidxiao.me/category/cloud/index.xml" rel="self" type="application/rss+xml" />
    <description>Cloud</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â©2020 David Xiao</copyright><lastBuildDate>Tue, 09 Jun 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://davidxiao.me/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Cloud</title>
      <link>https://davidxiao.me/category/cloud/</link>
    </image>
    
    <item>
      <title>Integrating a Self-Hosting Commenting System to Your Site</title>
      <link>https://davidxiao.me/post/adding-your-own-commenting-system-to-a-static-site/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://davidxiao.me/post/adding-your-own-commenting-system-to-a-static-site/</guid>
      <description>&lt;p&gt;&lt;em&gt;TLDR ðŸ‘‰ It talks about hosting remark42 commenting system as Docker container; Leveraging Cloudflare to protect the remark42 endpoint; Integrating remark42 to a Hugo static site which is built on Hugo and using academic theme.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Before getting started, have a look at any post on my blog at 
&lt;a href=&#34;https://davidxiao.me/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;davidxiao.me&lt;/a&gt; and see the way commenting works. If you like what you saw, please read on.&lt;/p&gt;
&lt;h2 id=&#34;what-will-be-covered-in-this-post&#34;&gt;What Will be Covered in This Post&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Deploy remark42 container on Docker&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protect your remark42 endpoint with Cloudflare CDN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrate remark42 to your Hugo site&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-1-hosting-remark42&#34;&gt;Step 1. Hosting Remark42&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://remark42.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Remark42&lt;/a&gt; is an open source commenting system that can be deployed as container. It&amp;rsquo;s self-contained with little external dependencies. You can find deployement guide on its Remark42&amp;rsquo;s git repo.&lt;/p&gt;
&lt;p&gt;Feel free to do container your way but if you are interested in what tool I use for docker management, it&amp;rsquo;s 
&lt;a href=&#34;https://github.com/portainer/portainer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Portainer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have the following parameters on my remark42 container:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;REMARK_URL              make sure it has the full path if you are using reverse proxy and rewrites, e.g. https://api.davidxiao.me/remark42
SITE	                site id. For example: davidxiao
SECRET	                required. can be a long and hard-to-guess string
DEBUG	                true
AUTH_GOOGLE_CID         your own value
AUTH_GOOGLE_CSEC        same
AUTH_FACEBOOK_CID       same
AUTH_FACEBOOK_CSEC      same
AUTH_TWITTER_CID        same
AUTH_TWITTER_CSEC       same
AUTH_GITHUB_CID         same
AUTH_GITHUB_CSEC        same
ADMIN_SHARED_EMAIL      mail address that will receive notifications such as new comments
NOTIFY_EMAIL_ADMIN	true
NOTIFY_TYPE	        email
NOTIFY_EMAIL_FROM	mail address that is in the same domain see Mailgun settings. For example, mine is remark42@davidxiao.me
AUTH_EMAIL_FROM	        same as above
ADMIN_SHARED_ID	        OAuth authenticated user id that has admin access. see https://github.com/umputun/remark42#admin-users
SMTP_HOST	        smtp.mailgun.org
SMTP_PORT	        465
SMTP_TLS	        true
SMTP_USERNAME	        SMTP credential from Mailgun
SMTP_PASSWORD	        
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;NOTES: for more detail on Remark42 email configuration, check this 
&lt;a href=&#34;https://github.com/umputun/remark42/blob/master/docs/email.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;page&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;app-registration-on-the-oauth-providers&#34;&gt;App Registration on the OAuth Providers&lt;/h3&gt;
&lt;p&gt;Before you can complete app registration on the 
&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_OAuth_providers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OAuth providers&lt;/a&gt; supported by Remark42 (Google, facebook, twitter, github), you would need to determine the domain name of your Remark42 api endpoint.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-my-app-registration-page-on-facebook-as-an-example&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/adding-your-own-commenting-system-to-a-static-site/facebook_hu9747433adb773f60d55694d972e5edfc_320108_2000x2000_fit_q90_lanczos.jpg&#34; data-caption=&#34;My app registration page on facebook as an example&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/adding-your-own-commenting-system-to-a-static-site/facebook_hu9747433adb773f60d55694d972e5edfc_320108_2000x2000_fit_q90_lanczos.jpg&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2682&#34; height=&#34;1342&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    My app registration page on facebook as an example
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Using a dynamic DNS (DDNS) would allow you to update IP address when your endpoint IP changes. If you are hosting Remark42 container on cloud such as AWS EC2 or on your homelab, DDNS can be helpful.&lt;/p&gt;
&lt;p&gt;Selecting a proper one as your DDNS provider is important to your solution. There are a few reasons.&lt;/p&gt;
&lt;p&gt;Each OAuth provider has its own rules over what kind of OAuth redirect URIs is allowed, some just don&amp;rsquo;t allow certain DDNS domains. For instance, facebook does not allow any &lt;code&gt;duckdns.org&lt;/code&gt; domain as part of redirect URIs at time of writing.&lt;/p&gt;
&lt;p&gt;Second, a typical DDNS provider would resolve your domain to your public IP. It&amp;rsquo;s what DDNS does. But for our purpose of hosting web apps, it&amp;rsquo;s not a great idea to expose your public IP as it could be exploited during an attack. CDN is a better approach but some DDNS providers may not offer that.&lt;/p&gt;
&lt;p&gt;Service availability is another concern. Without any service level agreement, your API will become inaccessible when the DDNS it relies on stops working.&lt;/p&gt;
&lt;p&gt;Last, the security posture of some DDNS providers can be doubtful. When the service platform itself gets compromised, bad things could happen really quickly before you are made aware of as end user.&lt;/p&gt;
&lt;p&gt;ðŸ‘‰ See my solution in twofold:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use a large-scale commercial DNS provider that supports DNS management over API, or even better - when it offers CDN protection over your origin endpoint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a reverse proxy such as Nginx to rewrite URLs so that multiple apps can be &amp;ldquo;tunneled through&amp;rdquo; a single domain name when needed. See 
&lt;a href=&#34;https://davidxiao.me/post/hosting-multiple-containers-with-nginx-rewrite-rules/&#34;&gt;here&lt;/a&gt; for detail.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With respect to DDNS provider, I landed on Cloudflare after having reviewed a few choices including Cloudflare, Duckdns, No-IP. See my Cloudflare DDNS setup 
&lt;a href=&#34;https://davidxiao.me/post/dynamic-dns-on-cloudflare/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;step-2-protecttunnel-your-endpoint&#34;&gt;Step 2. Protect(tunnel) your Endpoint&lt;/h2&gt;
&lt;p&gt;I assume you are using Cloudflare as DNS provider as it&amp;rsquo;s a prerequisite if you need to enable Cloudflare CDN.&lt;/p&gt;
&lt;p&gt;To enable CDN, first go to Cloudflare portal and enable CDN for your remark42 subdomain. In my case that&amp;rsquo;s &lt;code&gt;api.davidxiao.me&lt;/code&gt;.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-enabling-proxy-by-clicking-on-the-proxy-status-icon&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/adding-your-own-commenting-system-to-a-static-site/cdn_hu16e75ec25f0125b652450b7f91b4df42_98125_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Enabling Proxy by clicking on the Proxy status icon&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/adding-your-own-commenting-system-to-a-static-site/cdn_hu16e75ec25f0125b652450b7f91b4df42_98125_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2096&#34; height=&#34;758&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Enabling Proxy by clicking on the Proxy status icon
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Second, modify caching level to &amp;ldquo;No query string&amp;rdquo;. No Query String means it only delivers files from cache when there is no query string. It&amp;rsquo;s the caching behavior we expect for an API endpoint, isn&amp;rsquo;t it?&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-enabling-proxied-by-clicking-on-proxy-status-icon&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/adding-your-own-commenting-system-to-a-static-site/caching_hu1b96b407d2d894423ea0f28de5f404e7_230832_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Enabling Proxied by clicking on Proxy status icon&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/adding-your-own-commenting-system-to-a-static-site/caching_hu1b96b407d2d894423ea0f28de5f404e7_230832_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2126&#34; height=&#34;1352&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Enabling Proxied by clicking on Proxy status icon
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;step-21-enable-end-to-end-https-with-cloudflare&#34;&gt;Step 2.1 Enable End-to-end HTTPS with Cloudflare&lt;/h2&gt;
&lt;p&gt;There are several SSL options provided by Cloudflare. Check 
&lt;a href=&#34;https://support.cloudflare.com/hc/en-us/articles/200170416-End-to-end-HTTPS-with-Cloudflare-Part-3-SSL-options#h_845b3d60-9a03-4db0-8de6-20edc5b11057&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; out to understand the difference.&lt;/p&gt;
&lt;p&gt;Based on my own needs, I&amp;rsquo;ve set up a &amp;ldquo;Full&amp;rdquo; mode in Cloudflare, which ensures a secure connection between both the web browser and Cloudflare and between Cloudflare and my endpoint. This option uses a self-signed certificate at the my endpoint web server.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-enabling-ssl-in-full-mode&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/adding-your-own-commenting-system-to-a-static-site/ssl1_hu718aada9808213d1863d35c04aab4c8f_284146_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Enabling SSL in Full mode&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/adding-your-own-commenting-system-to-a-static-site/ssl1_hu718aada9808213d1863d35c04aab4c8f_284146_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2178&#34; height=&#34;1348&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Enabling SSL in Full mode
  &lt;/figcaption&gt;


&lt;/figure&gt;






  
  











&lt;figure id=&#34;figure-generate-and-download-cloudflares-self-signed-certificates&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/adding-your-own-commenting-system-to-a-static-site/ssl2_hu40bb48d6d163b284766543eb6db65c71_208391_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Generate and download Cloudflare&amp;rsquo;s self-signed certificates&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/adding-your-own-commenting-system-to-a-static-site/ssl2_hu40bb48d6d163b284766543eb6db65c71_208391_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2140&#34; height=&#34;1128&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Generate and download Cloudflare&amp;rsquo;s self-signed certificates
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Save the origin certificat as &lt;code&gt;origin-cert.pem&lt;/code&gt; and the private key as &lt;code&gt;priv.key&lt;/code&gt;, place both files on your host and make sure they both have ownership of &lt;code&gt;root&lt;/code&gt; and have &lt;code&gt;0600&lt;/code&gt; permissions.&lt;/p&gt;
&lt;p&gt;Then you just need to add the file locations in your nginx configuration file. See below my configruation files for example:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/davxiao/c4f16ebbcdb2ec0701bcaad24640d12c.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;step-3-integrate-remark42-to-your-hugo-site&#34;&gt;Step 3. Integrate Remark42 to Your Hugo Site&lt;/h2&gt;
&lt;p&gt;Override the &lt;code&gt;comments.html&lt;/code&gt; template by:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cp your-project-root/themes/academic/layouts/partials/comments.html your-project-root/layouts/partials/comments.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and modify the new one as you see fit.&lt;/p&gt;
&lt;p&gt;The following is my modified version of &lt;code&gt;comments.html&lt;/code&gt;.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/davxiao/2c4373dbbf55823ccb3460cd79b37ee5.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Congrats! You&amp;rsquo;ve got the remark42 commenting system integrated to your Hugo site. Comment, Suggestion, and Feedback are all welcome!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Your First App on Google Home in 10 minutes</title>
      <link>https://davidxiao.me/post/building-your-first-app-on-google-home/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      <guid>https://davidxiao.me/post/building-your-first-app-on-google-home/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Wikipedia:Too_long;_didn%27t_read&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TL;DR&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post will show you how to build and deploy a voice-activated app on Google Cloud in 10 minutes. It responds to your commands and plays personalized music if you ask! Not a bad way to play on someone&amp;rsquo;s birthday, eh?&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-a-new-project-on-google-actions-console&#34;&gt;Create a New Project on Google Actions Console&lt;/h2&gt;
&lt;p&gt;The app is built on Google Cloud using Google Actions and Dialogflow. If you don&amp;rsquo;t have a Google Actions account, click 
&lt;a href=&#34;https://console.actions.google.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; to create a new one. It&amp;rsquo;s free.&lt;/p&gt;
&lt;p&gt;When the account is created, go ahead and create a new project. Google Actions allows you to add Actions support to existing GCP projects, but we will create a new one to keep it simple.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-create-a-new-project&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/newproject_hu743e9e3ec8e102a213e0e2f07b641661_182403_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Create a new project&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/newproject_hu743e9e3ec8e102a213e0e2f07b641661_182403_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2392&#34; height=&#34;1042&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Create a new project
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;specify-a-catchy-name-for-your-app&#34;&gt;Specify a Catchy Name for Your App&lt;/h2&gt;
&lt;p&gt;You need to specify a catchy name for the app so that every time when you say those &amp;ldquo;gateway words&amp;rdquo; to the Google Home device, it will activate the app for you.&lt;/p&gt;
&lt;p&gt;Go to the project dashboard, click on &amp;ldquo;Quick setup&amp;rdquo; followed by &amp;ldquo;Decide how your action is invoked&amp;rdquo; and put the app name here. It may reject the name if it&amp;rsquo;s too common or ambiguous, e.g. &amp;ldquo;Hello&amp;rdquo; is probably not a good choice here.&lt;/p&gt;
&lt;p&gt;For example, my app is called &amp;ldquo;Hello Jukebox&amp;rdquo;.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-specify-a-catchy-name-for-your-app&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/hellojukebox_hu00583f257256ac5d2540f09ced6a2a1c_203654_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Specify a catchy name for your app&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/hellojukebox_hu00583f257256ac5d2540f09ced6a2a1c_203654_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2398&#34; height=&#34;1514&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Specify a catchy name for your app
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;add-actions-to-your-app&#34;&gt;Add Actions to Your App&lt;/h2&gt;
&lt;p&gt;There is no secret sauce. An app is only as smart as what it&amp;rsquo;s taught. This app will respond to voice commands and act accordingly based on the intents developeed for it. &amp;ldquo;Intent&amp;rdquo; is a Google term referring to a combination of voice command and its response.&lt;/p&gt;
&lt;p&gt;Within one app, developer can create as many intents as they want as long as no intent is stepping on one another&amp;rsquo;s toes. For example, trying to create two separate intents both responding to the same command &amp;ldquo;what is my favoriate color&amp;rdquo; would be confusing to begin with.&lt;/p&gt;
&lt;p&gt;Within an intent, developer can decide on the kind of response it needs to give: it can be as simple as having Google Home say something or be more complicated with custom logic.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-add-a-new-action-to-your-app&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/addaction_hu5a34da406b359feaea235349c9d3070a_89800_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Add a new Action to your app&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/addaction_hu5a34da406b359feaea235349c9d3070a_89800_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1962&#34; height=&#34;800&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Add a new Action to your app
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;use-case-1-simple-voice-commands-and-text-responses&#34;&gt;Use Case 1: Simple Voice Commands and Text Responses&lt;/h3&gt;
&lt;p&gt;Scroll down the Actions dashboard until the Fulfillment section, click on &amp;ldquo;Edit in Dialogflow&amp;rdquo; and click on the Intents. Start adding intents.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-edit-in-dialogflow&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/editdialogflow_hu0a5e6ae8e7a5a9d21267103e72f6723b_121154_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Edit in Dialogflow&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/editdialogflow_hu0a5e6ae8e7a5a9d21267103e72f6723b_121154_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2290&#34; height=&#34;1378&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Edit in Dialogflow
  &lt;/figcaption&gt;


&lt;/figure&gt;






  
  











&lt;figure id=&#34;figure-add-new-intent&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/addintents_hu5caf5e9408c46163cab731953699f0c0_150879_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Add new Intent&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/addintents_hu5caf5e9408c46163cab731953699f0c0_150879_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2126&#34; height=&#34;848&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Add new Intent
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;For example, you may want to create an intent called &amp;ldquo;special-intent&amp;rdquo;, add &amp;ldquo;Do you know why today is so special&amp;rdquo; as voice command and add &amp;ldquo;Of course I know, David&amp;rdquo; as text responses to the intent. Those are what you would say to the app and what the app will say back respectively.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-a-list-of-intents-i-added&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/addnewintent_hu4379dc9c90fb0c256e025ee19dca75f6_98047_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;A list of intents I added&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/addnewintent_hu4379dc9c90fb0c256e025ee19dca75f6_98047_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1568&#34; height=&#34;866&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    A list of intents I added
  &lt;/figcaption&gt;


&lt;/figure&gt;






  
  











&lt;figure id=&#34;figure-text-responses&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/response_hu977f95ac59ecb13bada691ae3f06f746_90426_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Text Responses&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/response_hu977f95ac59ecb13bada691ae3f06f746_90426_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1570&#34; height=&#34;732&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Text Responses
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;use-case-2-implement-custom-logic-using-cloud-function&#34;&gt;Use Case 2: Implement custom logic using Cloud Function&lt;/h3&gt;
&lt;p&gt;The second use case is enabling webhook in an intent and developing a handler for it.&lt;/p&gt;
&lt;p&gt;This approach allows you to implement custom logic for an intent. GCP supports either running your custom code on a 
&lt;a href=&#34;https://cloud.google.com/functions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Function&lt;/a&gt; or calling an external web service you specify.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-text-responses&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/inline_hu7df3c6f58ea55e824903f43390cf3d99_512086_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Text Responses&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/inline_hu7df3c6f58ea55e824903f43390cf3d99_512086_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2144&#34; height=&#34;1514&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Text Responses
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;I will use the Cloud Function way for this example since we don&amp;rsquo;t need to worry about resource or storage thanks to its serverless nature.&lt;/p&gt;
&lt;p&gt;First, you need to enable &amp;ldquo;Webhook&amp;rdquo; on the intent that needs to have custom logic. Second, click on the Fulfillment on the left navbar and enable Inline editor. Last, copy and paste the following code example and click on save. That&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;The code example will first say something then play an audio clip. If you need to play something else, e.g. a peronalized audio clip, you can replace the URL with your own thing, but then you would have to deal with access control.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/davxiao/8d0d35d3c88078e5fc96114d02c8ee6b.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;testing-your-new-app-on-simulator&#34;&gt;Testing Your New App on Simulator&lt;/h3&gt;
&lt;p&gt;Click on &amp;ldquo;Google Assistant&amp;rdquo; on the right bar to open the Simulator on Google Actions. From there you can tinker with your app until you&amp;rsquo;re satisfied with it :-)&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-text-responses&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/test_hu4c7ce97dca92ec99c2a240b81e7d53b6_267148_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Text Responses&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/test_hu4c7ce97dca92ec99c2a240b81e7d53b6_267148_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2854&#34; height=&#34;1422&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Text Responses
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;deploying-to-your-google-home-device&#34;&gt;Deploying to your Google Home Device&lt;/h3&gt;
&lt;p&gt;Making your app available on 
&lt;a href=&#34;https://assistant.google.com/explore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Assistant Actions Portal&lt;/a&gt; sounds like a great idea, however the releasing process could take some time as Google needs to review and approve your app first before it can be released. Since my post promised you a 10-minute ride, let&amp;rsquo;s rolling to get the freshly baked app onto your own Google Home device.&lt;/p&gt;
&lt;p&gt;On Actions console, click on &amp;ldquo;Deploy&amp;rdquo;, choose &amp;ldquo;Alpha&amp;rdquo;, click on &amp;ldquo;Manage Alpha Testers&amp;rdquo;, and add your own Google Home device account email here. You can then switch to your Google Home account and use the opt-in link received on the invitation email to accept the invite.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-make-an-alpha-deployment&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/deploy_hub0f70cc191eb1433db74b863010b6132_192039_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Make an Alpha Deployment&#34;&gt;


  &lt;img data-src=&#34;https://davidxiao.me/post/building-your-first-app-on-google-home/deploy_hub0f70cc191eb1433db74b863010b6132_192039_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;2290&#34; height=&#34;1364&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Make an Alpha Deployment
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;When it&amp;rsquo;s ready, click on &amp;ldquo;Create a release&amp;rdquo;, and wait it to complete. It can take a few minutes.&lt;/p&gt;
&lt;p&gt;Congrats! You&amp;rsquo;ve just developed and deployed your first Google Home app in 10 minutes! Try say to your Google Home: &amp;ldquo;Hey Google, Talk to your_app_name_here&amp;rdquo; and see what happens :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
